/*
 * GOLDEN-API
 * Trazadera Golden API
 *
 * OpenAPI spec version: 1.9.0
 * Contact: support@trazadera.com 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.trazadera.golden.restclient.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
/**
 * Represents upserted record result
 */
@Schema(description = "Represents upserted record result")

public class GoldenUpsertResponseDto {
  @SerializedName("inserted")
  private Boolean inserted = null;

  @SerializedName("updated")
  private Boolean updated = null;

  @SerializedName("record")
  private Map<String, Object> record = null;

  @SerializedName("errors")
  private List<String> errors = null;

  @SerializedName("messages")
  private List<String> messages = null;

  public GoldenUpsertResponseDto inserted(Boolean inserted) {
    this.inserted = inserted;
    return this;
  }

   /**
   * Indicates if the record was inserted.
   * @return inserted
  **/
  @Schema(description = "Indicates if the record was inserted.")
  public Boolean isInserted() {
    return inserted;
  }

  public void setInserted(Boolean inserted) {
    this.inserted = inserted;
  }

  public GoldenUpsertResponseDto updated(Boolean updated) {
    this.updated = updated;
    return this;
  }

   /**
   * Indicates if the record was updated.
   * @return updated
  **/
  @Schema(description = "Indicates if the record was updated.")
  public Boolean isUpdated() {
    return updated;
  }

  public void setUpdated(Boolean updated) {
    this.updated = updated;
  }

  public GoldenUpsertResponseDto record(Map<String, Object> record) {
    this.record = record;
    return this;
  }

  public GoldenUpsertResponseDto putRecordItem(String key, Object recordItem) {
    if (this.record == null) {
      this.record = new HashMap<String, Object>();
    }
    this.record.put(key, recordItem);
    return this;
  }

   /**
   * A record is a document with a unique identifier that is used as the core of Golden and represents a data record.
   * @return record
  **/
  @Schema(description = "A record is a document with a unique identifier that is used as the core of Golden and represents a data record.")
  public Map<String, Object> getRecord() {
    return record;
  }

  public void setRecord(Map<String, Object> record) {
    this.record = record;
  }

  public GoldenUpsertResponseDto errors(List<String> errors) {
    this.errors = errors;
    return this;
  }

  public GoldenUpsertResponseDto addErrorsItem(String errorsItem) {
    if (this.errors == null) {
      this.errors = new ArrayList<String>();
    }
    this.errors.add(errorsItem);
    return this;
  }

   /**
   * List of errors. If HTTP response represents an error (4xx or 5xx) this will contain a list of errors.
   * @return errors
  **/
  @Schema(description = "List of errors. If HTTP response represents an error (4xx or 5xx) this will contain a list of errors.")
  public List<String> getErrors() {
    return errors;
  }

  public void setErrors(List<String> errors) {
    this.errors = errors;
  }

  public GoldenUpsertResponseDto messages(List<String> messages) {
    this.messages = messages;
    return this;
  }

  public GoldenUpsertResponseDto addMessagesItem(String messagesItem) {
    if (this.messages == null) {
      this.messages = new ArrayList<String>();
    }
    this.messages.add(messagesItem);
    return this;
  }

   /**
   * Optional success messages. If present, the request was successful and response code will be 2xx.
   * @return messages
  **/
  @Schema(description = "Optional success messages. If present, the request was successful and response code will be 2xx.")
  public List<String> getMessages() {
    return messages;
  }

  public void setMessages(List<String> messages) {
    this.messages = messages;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoldenUpsertResponseDto goldenUpsertResponseDto = (GoldenUpsertResponseDto) o;
    return Objects.equals(this.inserted, goldenUpsertResponseDto.inserted) &&
        Objects.equals(this.updated, goldenUpsertResponseDto.updated) &&
        Objects.equals(this.record, goldenUpsertResponseDto.record) &&
        Objects.equals(this.errors, goldenUpsertResponseDto.errors) &&
        Objects.equals(this.messages, goldenUpsertResponseDto.messages);
  }

  @Override
  public int hashCode() {
    return Objects.hash(inserted, updated, record, errors, messages);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoldenUpsertResponseDto {\n");
    
    sb.append("    inserted: ").append(toIndentedString(inserted)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("    record: ").append(toIndentedString(record)).append("\n");
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("    messages: ").append(toIndentedString(messages)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
