/*
 * GOLDEN-API
 * Trazadera Golden API
 *
 * OpenAPI spec version: 15
 * Contact: support@trazadera.com 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.trazadera.golden.restclient.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.trazadera.golden.restclient.model.TaskInstanceDto;
import com.trazadera.golden.restclient.model.TaskInstanceDtoDuration;
import com.trazadera.golden.restclient.model.TaskSchedulingDto;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.OffsetDateTime;
/**
 * Represents the execution of a task.
 */
@Schema(description = "Represents the execution of a task.")

public class TaskInstanceDto {
  @SerializedName("id")
  private String id = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("node")
  private String node = null;

  @SerializedName("user")
  private String user = null;

  @SerializedName("completion")
  private Integer completion = null;

  @SerializedName("message")
  private String message = null;

  @SerializedName("extraMessage")
  private String extraMessage = null;

  /**
   * Task status.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    @SerializedName("CREATED")
    CREATED("CREATED"),
    @SerializedName("RUNNING")
    RUNNING("RUNNING"),
    @SerializedName("CANCEL")
    CANCEL("CANCEL"),
    @SerializedName("COMPLETED")
    COMPLETED("COMPLETED"),
    @SerializedName("FAILED")
    FAILED("FAILED"),
    @SerializedName("CANCELLED")
    CANCELLED("CANCELLED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StatusEnum fromValue(String input) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return StatusEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("status")
  private StatusEnum status = null;

  @SerializedName("created")
  private OffsetDateTime created = null;

  @SerializedName("started")
  private OffsetDateTime started = null;

  @SerializedName("finished")
  private OffsetDateTime finished = null;

  @SerializedName("ping")
  private OffsetDateTime ping = null;

  @SerializedName("duration")
  private TaskInstanceDtoDuration duration = null;

  @SerializedName("scheduling")
  private TaskSchedulingDto scheduling = null;

  @SerializedName("parent")
  private TaskInstanceDto parent = null;

  @SerializedName("children")
  private List<TaskInstanceDto> children = null;

  public TaskInstanceDto id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Task unique identifier.
   * @return id
  **/
  @Schema(description = "Task unique identifier.")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public TaskInstanceDto name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Task human-readable name.
   * @return name
  **/
  @Schema(description = "Task human-readable name.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public TaskInstanceDto node(String node) {
    this.node = node;
    return this;
  }

   /**
   * Node where the task is handled. Helps to identify the owner node in a cluster.
   * @return node
  **/
  @Schema(description = "Node where the task is handled. Helps to identify the owner node in a cluster.")
  public String getNode() {
    return node;
  }

  public void setNode(String node) {
    this.node = node;
  }

  public TaskInstanceDto user(String user) {
    this.user = user;
    return this;
  }

   /**
   * Golden user identifier executing the task.
   * @return user
  **/
  @Schema(description = "Golden user identifier executing the task.")
  public String getUser() {
    return user;
  }

  public void setUser(String user) {
    this.user = user;
  }

  public TaskInstanceDto completion(Integer completion) {
    this.completion = completion;
    return this;
  }

   /**
   * Completion percent (0-100%). Not always provided as some tasks are unbouded.
   * @return completion
  **/
  @Schema(description = "Completion percent (0-100%). Not always provided as some tasks are unbouded.")
  public Integer getCompletion() {
    return completion;
  }

  public void setCompletion(Integer completion) {
    this.completion = completion;
  }

  public TaskInstanceDto message(String message) {
    this.message = message;
    return this;
  }

   /**
   * Task status message. Always provided.
   * @return message
  **/
  @Schema(description = "Task status message. Always provided.")
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }

  public TaskInstanceDto extraMessage(String extraMessage) {
    this.extraMessage = extraMessage;
    return this;
  }

   /**
   * Task additional message. Provided for cancelation or error with additional information.
   * @return extraMessage
  **/
  @Schema(description = "Task additional message. Provided for cancelation or error with additional information.")
  public String getExtraMessage() {
    return extraMessage;
  }

  public void setExtraMessage(String extraMessage) {
    this.extraMessage = extraMessage;
  }

  public TaskInstanceDto status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Task status.
   * @return status
  **/
  @Schema(description = "Task status.")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  public TaskInstanceDto created(OffsetDateTime created) {
    this.created = created;
    return this;
  }

   /**
   * Task creation ISO timestamp.
   * @return created
  **/
  @Schema(description = "Task creation ISO timestamp.")
  public OffsetDateTime getCreated() {
    return created;
  }

  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }

  public TaskInstanceDto started(OffsetDateTime started) {
    this.started = started;
    return this;
  }

   /**
   * Task started ISO timestamp.
   * @return started
  **/
  @Schema(description = "Task started ISO timestamp.")
  public OffsetDateTime getStarted() {
    return started;
  }

  public void setStarted(OffsetDateTime started) {
    this.started = started;
  }

  public TaskInstanceDto finished(OffsetDateTime finished) {
    this.finished = finished;
    return this;
  }

   /**
   * Task finalization ISO timestamp.
   * @return finished
  **/
  @Schema(description = "Task finalization ISO timestamp.")
  public OffsetDateTime getFinished() {
    return finished;
  }

  public void setFinished(OffsetDateTime finished) {
    this.finished = finished;
  }

  public TaskInstanceDto ping(OffsetDateTime ping) {
    this.ping = ping;
    return this;
  }

   /**
   * Task ping ISO timestamp.
   * @return ping
  **/
  @Schema(description = "Task ping ISO timestamp.")
  public OffsetDateTime getPing() {
    return ping;
  }

  public void setPing(OffsetDateTime ping) {
    this.ping = ping;
  }

  public TaskInstanceDto duration(TaskInstanceDtoDuration duration) {
    this.duration = duration;
    return this;
  }

   /**
   * Get duration
   * @return duration
  **/
  @Schema(description = "")
  public TaskInstanceDtoDuration getDuration() {
    return duration;
  }

  public void setDuration(TaskInstanceDtoDuration duration) {
    this.duration = duration;
  }

  public TaskInstanceDto scheduling(TaskSchedulingDto scheduling) {
    this.scheduling = scheduling;
    return this;
  }

   /**
   * Get scheduling
   * @return scheduling
  **/
  @Schema(description = "")
  public TaskSchedulingDto getScheduling() {
    return scheduling;
  }

  public void setScheduling(TaskSchedulingDto scheduling) {
    this.scheduling = scheduling;
  }

  public TaskInstanceDto parent(TaskInstanceDto parent) {
    this.parent = parent;
    return this;
  }

   /**
   * Get parent
   * @return parent
  **/
  @Schema(description = "")
  public TaskInstanceDto getParent() {
    return parent;
  }

  public void setParent(TaskInstanceDto parent) {
    this.parent = parent;
  }

  public TaskInstanceDto children(List<TaskInstanceDto> children) {
    this.children = children;
    return this;
  }

  public TaskInstanceDto addChildrenItem(TaskInstanceDto childrenItem) {
    if (this.children == null) {
      this.children = new ArrayList<TaskInstanceDto>();
    }
    this.children.add(childrenItem);
    return this;
  }

   /**
   * Child tasks.
   * @return children
  **/
  @Schema(description = "Child tasks.")
  public List<TaskInstanceDto> getChildren() {
    return children;
  }

  public void setChildren(List<TaskInstanceDto> children) {
    this.children = children;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TaskInstanceDto taskInstanceDto = (TaskInstanceDto) o;
    return Objects.equals(this.id, taskInstanceDto.id) &&
        Objects.equals(this.name, taskInstanceDto.name) &&
        Objects.equals(this.node, taskInstanceDto.node) &&
        Objects.equals(this.user, taskInstanceDto.user) &&
        Objects.equals(this.completion, taskInstanceDto.completion) &&
        Objects.equals(this.message, taskInstanceDto.message) &&
        Objects.equals(this.extraMessage, taskInstanceDto.extraMessage) &&
        Objects.equals(this.status, taskInstanceDto.status) &&
        Objects.equals(this.created, taskInstanceDto.created) &&
        Objects.equals(this.started, taskInstanceDto.started) &&
        Objects.equals(this.finished, taskInstanceDto.finished) &&
        Objects.equals(this.ping, taskInstanceDto.ping) &&
        Objects.equals(this.duration, taskInstanceDto.duration) &&
        Objects.equals(this.scheduling, taskInstanceDto.scheduling) &&
        Objects.equals(this.parent, taskInstanceDto.parent) &&
        Objects.equals(this.children, taskInstanceDto.children);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, node, user, completion, message, extraMessage, status, created, started, finished, ping, duration, scheduling, parent, children);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TaskInstanceDto {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    node: ").append(toIndentedString(node)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    completion: ").append(toIndentedString(completion)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    extraMessage: ").append(toIndentedString(extraMessage)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    started: ").append(toIndentedString(started)).append("\n");
    sb.append("    finished: ").append(toIndentedString(finished)).append("\n");
    sb.append("    ping: ").append(toIndentedString(ping)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    scheduling: ").append(toIndentedString(scheduling)).append("\n");
    sb.append("    parent: ").append(toIndentedString(parent)).append("\n");
    sb.append("    children: ").append(toIndentedString(children)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
