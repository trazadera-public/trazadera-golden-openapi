/*
 * GOLDEN-API
 * Trazadera Golden API
 *
 * OpenAPI spec version: 16-SNAPSHOT
 * Contact: support@trazadera.com 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.trazadera.golden.restclient.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;import java.util.Map;
import java.util.List;
import java.util.Map;
/**
 * Represents handy configuration enumerations and lists related to resources.
 */
@Schema(description = "Represents handy configuration enumerations and lists related to resources.")

public class ResourceEnumsDto {
  @SerializedName("recordOperations")
  private List<String> recordOperations = null;

  @SerializedName("recordOperationsLabels")
  private Map<String, String> recordOperationsLabels = null;

  @SerializedName("entityStatus")
  private List<String> entityStatus = null;

  @SerializedName("entityStatusLabels")
  private Map<String, String> entityStatusLabels = null;

  @SerializedName("intervalTypes")
  private List<String> intervalTypes = null;

  @SerializedName("intervalTypesLabels")
  private Map<String, String> intervalTypesLabels = null;

  @SerializedName("bucketActions")
  private List<String> bucketActions = null;

  @SerializedName("bucketActionsLabels")
  private Map<String, String> bucketActionsLabels = null;

  @SerializedName("bucketConditionTypes")
  private List<String> bucketConditionTypes = null;

  @SerializedName("bucketConditionTypesLabels")
  private Map<String, String> bucketConditionTypesLabels = null;

  @SerializedName("entityTypes")
  private List<String> entityTypes = null;

  @SerializedName("entityTypesLabels")
  private Map<String, String> entityTypesLabels = null;

  @SerializedName("datasetIdentityTypes")
  private List<String> datasetIdentityTypes = null;

  @SerializedName("datasetIdentityTypesLabels")
  private Map<String, String> datasetIdentityTypesLabels = null;

  @SerializedName("datasetDataTypes")
  private List<String> datasetDataTypes = null;

  @SerializedName("datasetDataTypesLabels")
  private Map<String, String> datasetDataTypesLabels = null;

  @SerializedName("columnTypes")
  private List<String> columnTypes = null;

  @SerializedName("columnTypesLabels")
  private Map<String, String> columnTypesLabels = null;

  @SerializedName("columnUIArrayEditors")
  private List<String> columnUIArrayEditors = null;

  @SerializedName("columnUIArrayEditorsLabels")
  private Map<String, String> columnUIArrayEditorsLabels = null;

  @SerializedName("columnTokens")
  private List<String> columnTokens = null;

  @SerializedName("columnTokensLabels")
  private Map<String, String> columnTokensLabels = null;

  @SerializedName("columnValidations")
  private List<String> columnValidations = null;

  @SerializedName("columnValidationsLabels")
  private Map<String, String> columnValidationsLabels = null;

  @SerializedName("textOptions")
  private List<String> textOptions = null;

  @SerializedName("textOptionsLabels")
  private Map<String, String> textOptionsLabels = null;

  @SerializedName("indexerMappingsTypes")
  private List<String> indexerMappingsTypes = null;

  @SerializedName("indexerMappingsTypesLabels")
  private Map<String, String> indexerMappingsTypesLabels = null;

  @SerializedName("indexerMappingMatchingsTypes")
  private List<String> indexerMappingMatchingsTypes = null;

  @SerializedName("indexerMappingMatchingsTypesLabels")
  private Map<String, String> indexerMappingMatchingsTypesLabels = null;

  @SerializedName("bucketSorts")
  private List<String> bucketSorts = null;

  @SerializedName("bucketSortsLabels")
  private Map<String, String> bucketSortsLabels = null;

  @SerializedName("bucketClassifications")
  private List<String> bucketClassifications = null;

  @SerializedName("bucketClassificationsLabels")
  private Map<String, String> bucketClassificationsLabels = null;

  @SerializedName("columnErrorPolicies")
  private List<String> columnErrorPolicies = null;

  @SerializedName("columnErrorPoliciesLabels")
  private Map<String, String> columnErrorPoliciesLabels = null;

  @SerializedName("credentialTypes")
  private List<String> credentialTypes = null;

  @SerializedName("credentialTypesLabels")
  private Map<String, String> credentialTypesLabels = null;

  @SerializedName("transformationTypes")
  private List<String> transformationTypes = null;

  @SerializedName("transformationTypesLabels")
  private Map<String, String> transformationTypesLabels = null;

  @SerializedName("transformationMappingsTypes")
  private List<String> transformationMappingsTypes = null;

  @SerializedName("transformationMappingsTypesLabels")
  private Map<String, String> transformationMappingsTypesLabels = null;

  @SerializedName("resourceTestInputTypes")
  private List<String> resourceTestInputTypes = null;

  @SerializedName("resourceTestInputTypesLabels")
  private Map<String, String> resourceTestInputTypesLabels = null;

  @SerializedName("systemRoles")
  private List<String> systemRoles = null;

  @SerializedName("systemRolesLabels")
  private Map<String, String> systemRolesLabels = null;

  @SerializedName("allRoles")
  private List<String> allRoles = null;

  @SerializedName("allRolesLabels")
  private Map<String, String> allRolesLabels = null;

  @SerializedName("mergeTypes")
  private List<String> mergeTypes = null;

  @SerializedName("mergeTypesLabels")
  private Map<String, String> mergeTypesLabels = null;

  @SerializedName("mergeSorts")
  private List<String> mergeSorts = null;

  @SerializedName("mergeSortsLabels")
  private Map<String, String> mergeSortsLabels = null;

  @SerializedName("datasetColumns")
  private Map<String, List<String>> datasetColumns = null;

  @SerializedName("datasetColumnsLabels")
  private Map<String, Map<String, String>> datasetColumnsLabels = null;

  @SerializedName("indexerMappings")
  private Map<String, List<String>> indexerMappings = null;

  @SerializedName("indexerMappingsLabels")
  private Map<String, Map<String, String>> indexerMappingsLabels = null;

  @SerializedName("datasets")
  private List<String> datasets = null;

  @SerializedName("datasetsLabels")
  private Map<String, String> datasetsLabels = null;

  @SerializedName("credentials")
  private List<String> credentials = null;

  @SerializedName("credentialsLabels")
  private Map<String, String> credentialsLabels = null;

  @SerializedName("roles")
  private List<String> roles = null;

  @SerializedName("rolesLabels")
  private Map<String, String> rolesLabels = null;

  @SerializedName("tables")
  private List<String> tables = null;

  @SerializedName("tablesLabels")
  private Map<String, String> tablesLabels = null;

  @SerializedName("entities")
  private List<String> entities = null;

  @SerializedName("entitiesLabels")
  private Map<String, String> entitiesLabels = null;

  @SerializedName("sources")
  private List<String> sources = null;

  @SerializedName("sourcesLabels")
  private Map<String, String> sourcesLabels = null;

  @SerializedName("sinks")
  private List<String> sinks = null;

  @SerializedName("sinksLabels")
  private Map<String, String> sinksLabels = null;

  @SerializedName("indexers")
  private List<String> indexers = null;

  @SerializedName("indexersLabels")
  private Map<String, String> indexersLabels = null;

  @SerializedName("transformations")
  private List<String> transformations = null;

  @SerializedName("transformationsLabels")
  private Map<String, String> transformationsLabels = null;

  @SerializedName("pipelines")
  private List<String> pipelines = null;

  @SerializedName("pipelinesLabels")
  private Map<String, String> pipelinesLabels = null;

  @SerializedName("pipelineProcessors")
  private List<String> pipelineProcessors = null;

  @SerializedName("pipelineProcessorsLabels")
  private Map<String, String> pipelineProcessorsLabels = null;

  @SerializedName("classifiers")
  private List<String> classifiers = null;

  @SerializedName("classifiersLabels")
  private Map<String, String> classifiersLabels = null;

  @SerializedName("mergers")
  private List<String> mergers = null;

  @SerializedName("mergersLabels")
  private Map<String, String> mergersLabels = null;

  @SerializedName("stewards")
  private List<String> stewards = null;

  @SerializedName("stewardsLabels")
  private Map<String, String> stewardsLabels = null;

  @SerializedName("cronExpressions")
  private List<String> cronExpressions = null;

  @SerializedName("cronExpressionsLabels")
  private Map<String, String> cronExpressionsLabels = null;

  @SerializedName("tablesEntitiesResources")
  private List<String> tablesEntitiesResources = null;

  @SerializedName("tablesEntitiesResourcesLabels")
  private Map<String, String> tablesEntitiesResourcesLabels = null;

  @SerializedName("errors")
  private List<String> errors = null;

  @SerializedName("messages")
  private List<String> messages = null;

  public ResourceEnumsDto recordOperations(List<String> recordOperations) {
    this.recordOperations = recordOperations;
    return this;
  }

  public ResourceEnumsDto addRecordOperationsItem(String recordOperationsItem) {
    if (this.recordOperations == null) {
      this.recordOperations = new ArrayList<String>();
    }
    this.recordOperations.add(recordOperationsItem);
    return this;
  }

   /**
   * Record operations.
   * @return recordOperations
  **/
  @Schema(description = "Record operations.")
  public List<String> getRecordOperations() {
    return recordOperations;
  }

  public void setRecordOperations(List<String> recordOperations) {
    this.recordOperations = recordOperations;
  }

  public ResourceEnumsDto recordOperationsLabels(Map<String, String> recordOperationsLabels) {
    this.recordOperationsLabels = recordOperationsLabels;
    return this;
  }

  public ResourceEnumsDto putRecordOperationsLabelsItem(String key, String recordOperationsLabelsItem) {
    if (this.recordOperationsLabels == null) {
      this.recordOperationsLabels = new HashMap<String, String>();
    }
    this.recordOperationsLabels.put(key, recordOperationsLabelsItem);
    return this;
  }

   /**
   * Record operations and labels.
   * @return recordOperationsLabels
  **/
  @Schema(description = "Record operations and labels.")
  public Map<String, String> getRecordOperationsLabels() {
    return recordOperationsLabels;
  }

  public void setRecordOperationsLabels(Map<String, String> recordOperationsLabels) {
    this.recordOperationsLabels = recordOperationsLabels;
  }

  public ResourceEnumsDto entityStatus(List<String> entityStatus) {
    this.entityStatus = entityStatus;
    return this;
  }

  public ResourceEnumsDto addEntityStatusItem(String entityStatusItem) {
    if (this.entityStatus == null) {
      this.entityStatus = new ArrayList<String>();
    }
    this.entityStatus.add(entityStatusItem);
    return this;
  }

   /**
   * Entity statuses.
   * @return entityStatus
  **/
  @Schema(description = "Entity statuses.")
  public List<String> getEntityStatus() {
    return entityStatus;
  }

  public void setEntityStatus(List<String> entityStatus) {
    this.entityStatus = entityStatus;
  }

  public ResourceEnumsDto entityStatusLabels(Map<String, String> entityStatusLabels) {
    this.entityStatusLabels = entityStatusLabels;
    return this;
  }

  public ResourceEnumsDto putEntityStatusLabelsItem(String key, String entityStatusLabelsItem) {
    if (this.entityStatusLabels == null) {
      this.entityStatusLabels = new HashMap<String, String>();
    }
    this.entityStatusLabels.put(key, entityStatusLabelsItem);
    return this;
  }

   /**
   * Entity statuses and labels.
   * @return entityStatusLabels
  **/
  @Schema(description = "Entity statuses and labels.")
  public Map<String, String> getEntityStatusLabels() {
    return entityStatusLabels;
  }

  public void setEntityStatusLabels(Map<String, String> entityStatusLabels) {
    this.entityStatusLabels = entityStatusLabels;
  }

  public ResourceEnumsDto intervalTypes(List<String> intervalTypes) {
    this.intervalTypes = intervalTypes;
    return this;
  }

  public ResourceEnumsDto addIntervalTypesItem(String intervalTypesItem) {
    if (this.intervalTypes == null) {
      this.intervalTypes = new ArrayList<String>();
    }
    this.intervalTypes.add(intervalTypesItem);
    return this;
  }

   /**
   * Interval types.
   * @return intervalTypes
  **/
  @Schema(description = "Interval types.")
  public List<String> getIntervalTypes() {
    return intervalTypes;
  }

  public void setIntervalTypes(List<String> intervalTypes) {
    this.intervalTypes = intervalTypes;
  }

  public ResourceEnumsDto intervalTypesLabels(Map<String, String> intervalTypesLabels) {
    this.intervalTypesLabels = intervalTypesLabels;
    return this;
  }

  public ResourceEnumsDto putIntervalTypesLabelsItem(String key, String intervalTypesLabelsItem) {
    if (this.intervalTypesLabels == null) {
      this.intervalTypesLabels = new HashMap<String, String>();
    }
    this.intervalTypesLabels.put(key, intervalTypesLabelsItem);
    return this;
  }

   /**
   * Interval types and labels.
   * @return intervalTypesLabels
  **/
  @Schema(description = "Interval types and labels.")
  public Map<String, String> getIntervalTypesLabels() {
    return intervalTypesLabels;
  }

  public void setIntervalTypesLabels(Map<String, String> intervalTypesLabels) {
    this.intervalTypesLabels = intervalTypesLabels;
  }

  public ResourceEnumsDto bucketActions(List<String> bucketActions) {
    this.bucketActions = bucketActions;
    return this;
  }

  public ResourceEnumsDto addBucketActionsItem(String bucketActionsItem) {
    if (this.bucketActions == null) {
      this.bucketActions = new ArrayList<String>();
    }
    this.bucketActions.add(bucketActionsItem);
    return this;
  }

   /**
   * Bucket actions.
   * @return bucketActions
  **/
  @Schema(description = "Bucket actions.")
  public List<String> getBucketActions() {
    return bucketActions;
  }

  public void setBucketActions(List<String> bucketActions) {
    this.bucketActions = bucketActions;
  }

  public ResourceEnumsDto bucketActionsLabels(Map<String, String> bucketActionsLabels) {
    this.bucketActionsLabels = bucketActionsLabels;
    return this;
  }

  public ResourceEnumsDto putBucketActionsLabelsItem(String key, String bucketActionsLabelsItem) {
    if (this.bucketActionsLabels == null) {
      this.bucketActionsLabels = new HashMap<String, String>();
    }
    this.bucketActionsLabels.put(key, bucketActionsLabelsItem);
    return this;
  }

   /**
   * Bucket actions and labels.
   * @return bucketActionsLabels
  **/
  @Schema(description = "Bucket actions and labels.")
  public Map<String, String> getBucketActionsLabels() {
    return bucketActionsLabels;
  }

  public void setBucketActionsLabels(Map<String, String> bucketActionsLabels) {
    this.bucketActionsLabels = bucketActionsLabels;
  }

  public ResourceEnumsDto bucketConditionTypes(List<String> bucketConditionTypes) {
    this.bucketConditionTypes = bucketConditionTypes;
    return this;
  }

  public ResourceEnumsDto addBucketConditionTypesItem(String bucketConditionTypesItem) {
    if (this.bucketConditionTypes == null) {
      this.bucketConditionTypes = new ArrayList<String>();
    }
    this.bucketConditionTypes.add(bucketConditionTypesItem);
    return this;
  }

   /**
   * Bucket condition types.
   * @return bucketConditionTypes
  **/
  @Schema(description = "Bucket condition types.")
  public List<String> getBucketConditionTypes() {
    return bucketConditionTypes;
  }

  public void setBucketConditionTypes(List<String> bucketConditionTypes) {
    this.bucketConditionTypes = bucketConditionTypes;
  }

  public ResourceEnumsDto bucketConditionTypesLabels(Map<String, String> bucketConditionTypesLabels) {
    this.bucketConditionTypesLabels = bucketConditionTypesLabels;
    return this;
  }

  public ResourceEnumsDto putBucketConditionTypesLabelsItem(String key, String bucketConditionTypesLabelsItem) {
    if (this.bucketConditionTypesLabels == null) {
      this.bucketConditionTypesLabels = new HashMap<String, String>();
    }
    this.bucketConditionTypesLabels.put(key, bucketConditionTypesLabelsItem);
    return this;
  }

   /**
   * Bucket condition types and labels.
   * @return bucketConditionTypesLabels
  **/
  @Schema(description = "Bucket condition types and labels.")
  public Map<String, String> getBucketConditionTypesLabels() {
    return bucketConditionTypesLabels;
  }

  public void setBucketConditionTypesLabels(Map<String, String> bucketConditionTypesLabels) {
    this.bucketConditionTypesLabels = bucketConditionTypesLabels;
  }

  public ResourceEnumsDto entityTypes(List<String> entityTypes) {
    this.entityTypes = entityTypes;
    return this;
  }

  public ResourceEnumsDto addEntityTypesItem(String entityTypesItem) {
    if (this.entityTypes == null) {
      this.entityTypes = new ArrayList<String>();
    }
    this.entityTypes.add(entityTypesItem);
    return this;
  }

   /**
   * Entity types.
   * @return entityTypes
  **/
  @Schema(description = "Entity types.")
  public List<String> getEntityTypes() {
    return entityTypes;
  }

  public void setEntityTypes(List<String> entityTypes) {
    this.entityTypes = entityTypes;
  }

  public ResourceEnumsDto entityTypesLabels(Map<String, String> entityTypesLabels) {
    this.entityTypesLabels = entityTypesLabels;
    return this;
  }

  public ResourceEnumsDto putEntityTypesLabelsItem(String key, String entityTypesLabelsItem) {
    if (this.entityTypesLabels == null) {
      this.entityTypesLabels = new HashMap<String, String>();
    }
    this.entityTypesLabels.put(key, entityTypesLabelsItem);
    return this;
  }

   /**
   * Entity types and labels.
   * @return entityTypesLabels
  **/
  @Schema(description = "Entity types and labels.")
  public Map<String, String> getEntityTypesLabels() {
    return entityTypesLabels;
  }

  public void setEntityTypesLabels(Map<String, String> entityTypesLabels) {
    this.entityTypesLabels = entityTypesLabels;
  }

  public ResourceEnumsDto datasetIdentityTypes(List<String> datasetIdentityTypes) {
    this.datasetIdentityTypes = datasetIdentityTypes;
    return this;
  }

  public ResourceEnumsDto addDatasetIdentityTypesItem(String datasetIdentityTypesItem) {
    if (this.datasetIdentityTypes == null) {
      this.datasetIdentityTypes = new ArrayList<String>();
    }
    this.datasetIdentityTypes.add(datasetIdentityTypesItem);
    return this;
  }

   /**
   * Dataset identity types.
   * @return datasetIdentityTypes
  **/
  @Schema(description = "Dataset identity types.")
  public List<String> getDatasetIdentityTypes() {
    return datasetIdentityTypes;
  }

  public void setDatasetIdentityTypes(List<String> datasetIdentityTypes) {
    this.datasetIdentityTypes = datasetIdentityTypes;
  }

  public ResourceEnumsDto datasetIdentityTypesLabels(Map<String, String> datasetIdentityTypesLabels) {
    this.datasetIdentityTypesLabels = datasetIdentityTypesLabels;
    return this;
  }

  public ResourceEnumsDto putDatasetIdentityTypesLabelsItem(String key, String datasetIdentityTypesLabelsItem) {
    if (this.datasetIdentityTypesLabels == null) {
      this.datasetIdentityTypesLabels = new HashMap<String, String>();
    }
    this.datasetIdentityTypesLabels.put(key, datasetIdentityTypesLabelsItem);
    return this;
  }

   /**
   * Dataset identity types and labels.
   * @return datasetIdentityTypesLabels
  **/
  @Schema(description = "Dataset identity types and labels.")
  public Map<String, String> getDatasetIdentityTypesLabels() {
    return datasetIdentityTypesLabels;
  }

  public void setDatasetIdentityTypesLabels(Map<String, String> datasetIdentityTypesLabels) {
    this.datasetIdentityTypesLabels = datasetIdentityTypesLabels;
  }

  public ResourceEnumsDto datasetDataTypes(List<String> datasetDataTypes) {
    this.datasetDataTypes = datasetDataTypes;
    return this;
  }

  public ResourceEnumsDto addDatasetDataTypesItem(String datasetDataTypesItem) {
    if (this.datasetDataTypes == null) {
      this.datasetDataTypes = new ArrayList<String>();
    }
    this.datasetDataTypes.add(datasetDataTypesItem);
    return this;
  }

   /**
   * Dataset data types.
   * @return datasetDataTypes
  **/
  @Schema(description = "Dataset data types.")
  public List<String> getDatasetDataTypes() {
    return datasetDataTypes;
  }

  public void setDatasetDataTypes(List<String> datasetDataTypes) {
    this.datasetDataTypes = datasetDataTypes;
  }

  public ResourceEnumsDto datasetDataTypesLabels(Map<String, String> datasetDataTypesLabels) {
    this.datasetDataTypesLabels = datasetDataTypesLabels;
    return this;
  }

  public ResourceEnumsDto putDatasetDataTypesLabelsItem(String key, String datasetDataTypesLabelsItem) {
    if (this.datasetDataTypesLabels == null) {
      this.datasetDataTypesLabels = new HashMap<String, String>();
    }
    this.datasetDataTypesLabels.put(key, datasetDataTypesLabelsItem);
    return this;
  }

   /**
   * Dataset data types and labels.
   * @return datasetDataTypesLabels
  **/
  @Schema(description = "Dataset data types and labels.")
  public Map<String, String> getDatasetDataTypesLabels() {
    return datasetDataTypesLabels;
  }

  public void setDatasetDataTypesLabels(Map<String, String> datasetDataTypesLabels) {
    this.datasetDataTypesLabels = datasetDataTypesLabels;
  }

  public ResourceEnumsDto columnTypes(List<String> columnTypes) {
    this.columnTypes = columnTypes;
    return this;
  }

  public ResourceEnumsDto addColumnTypesItem(String columnTypesItem) {
    if (this.columnTypes == null) {
      this.columnTypes = new ArrayList<String>();
    }
    this.columnTypes.add(columnTypesItem);
    return this;
  }

   /**
   * Column types.
   * @return columnTypes
  **/
  @Schema(description = "Column types.")
  public List<String> getColumnTypes() {
    return columnTypes;
  }

  public void setColumnTypes(List<String> columnTypes) {
    this.columnTypes = columnTypes;
  }

  public ResourceEnumsDto columnTypesLabels(Map<String, String> columnTypesLabels) {
    this.columnTypesLabels = columnTypesLabels;
    return this;
  }

  public ResourceEnumsDto putColumnTypesLabelsItem(String key, String columnTypesLabelsItem) {
    if (this.columnTypesLabels == null) {
      this.columnTypesLabels = new HashMap<String, String>();
    }
    this.columnTypesLabels.put(key, columnTypesLabelsItem);
    return this;
  }

   /**
   * Column types and labels.
   * @return columnTypesLabels
  **/
  @Schema(description = "Column types and labels.")
  public Map<String, String> getColumnTypesLabels() {
    return columnTypesLabels;
  }

  public void setColumnTypesLabels(Map<String, String> columnTypesLabels) {
    this.columnTypesLabels = columnTypesLabels;
  }

  public ResourceEnumsDto columnUIArrayEditors(List<String> columnUIArrayEditors) {
    this.columnUIArrayEditors = columnUIArrayEditors;
    return this;
  }

  public ResourceEnumsDto addColumnUIArrayEditorsItem(String columnUIArrayEditorsItem) {
    if (this.columnUIArrayEditors == null) {
      this.columnUIArrayEditors = new ArrayList<String>();
    }
    this.columnUIArrayEditors.add(columnUIArrayEditorsItem);
    return this;
  }

   /**
   * Column UI Array Editor.
   * @return columnUIArrayEditors
  **/
  @Schema(description = "Column UI Array Editor.")
  public List<String> getColumnUIArrayEditors() {
    return columnUIArrayEditors;
  }

  public void setColumnUIArrayEditors(List<String> columnUIArrayEditors) {
    this.columnUIArrayEditors = columnUIArrayEditors;
  }

  public ResourceEnumsDto columnUIArrayEditorsLabels(Map<String, String> columnUIArrayEditorsLabels) {
    this.columnUIArrayEditorsLabels = columnUIArrayEditorsLabels;
    return this;
  }

  public ResourceEnumsDto putColumnUIArrayEditorsLabelsItem(String key, String columnUIArrayEditorsLabelsItem) {
    if (this.columnUIArrayEditorsLabels == null) {
      this.columnUIArrayEditorsLabels = new HashMap<String, String>();
    }
    this.columnUIArrayEditorsLabels.put(key, columnUIArrayEditorsLabelsItem);
    return this;
  }

   /**
   * Column UI Array Editor and labels.
   * @return columnUIArrayEditorsLabels
  **/
  @Schema(description = "Column UI Array Editor and labels.")
  public Map<String, String> getColumnUIArrayEditorsLabels() {
    return columnUIArrayEditorsLabels;
  }

  public void setColumnUIArrayEditorsLabels(Map<String, String> columnUIArrayEditorsLabels) {
    this.columnUIArrayEditorsLabels = columnUIArrayEditorsLabels;
  }

  public ResourceEnumsDto columnTokens(List<String> columnTokens) {
    this.columnTokens = columnTokens;
    return this;
  }

  public ResourceEnumsDto addColumnTokensItem(String columnTokensItem) {
    if (this.columnTokens == null) {
      this.columnTokens = new ArrayList<String>();
    }
    this.columnTokens.add(columnTokensItem);
    return this;
  }

   /**
   * Column tokens.
   * @return columnTokens
  **/
  @Schema(description = "Column tokens.")
  public List<String> getColumnTokens() {
    return columnTokens;
  }

  public void setColumnTokens(List<String> columnTokens) {
    this.columnTokens = columnTokens;
  }

  public ResourceEnumsDto columnTokensLabels(Map<String, String> columnTokensLabels) {
    this.columnTokensLabels = columnTokensLabels;
    return this;
  }

  public ResourceEnumsDto putColumnTokensLabelsItem(String key, String columnTokensLabelsItem) {
    if (this.columnTokensLabels == null) {
      this.columnTokensLabels = new HashMap<String, String>();
    }
    this.columnTokensLabels.put(key, columnTokensLabelsItem);
    return this;
  }

   /**
   * Column tokens and labels.
   * @return columnTokensLabels
  **/
  @Schema(description = "Column tokens and labels.")
  public Map<String, String> getColumnTokensLabels() {
    return columnTokensLabels;
  }

  public void setColumnTokensLabels(Map<String, String> columnTokensLabels) {
    this.columnTokensLabels = columnTokensLabels;
  }

  public ResourceEnumsDto columnValidations(List<String> columnValidations) {
    this.columnValidations = columnValidations;
    return this;
  }

  public ResourceEnumsDto addColumnValidationsItem(String columnValidationsItem) {
    if (this.columnValidations == null) {
      this.columnValidations = new ArrayList<String>();
    }
    this.columnValidations.add(columnValidationsItem);
    return this;
  }

   /**
   * Column validations.
   * @return columnValidations
  **/
  @Schema(description = "Column validations.")
  public List<String> getColumnValidations() {
    return columnValidations;
  }

  public void setColumnValidations(List<String> columnValidations) {
    this.columnValidations = columnValidations;
  }

  public ResourceEnumsDto columnValidationsLabels(Map<String, String> columnValidationsLabels) {
    this.columnValidationsLabels = columnValidationsLabels;
    return this;
  }

  public ResourceEnumsDto putColumnValidationsLabelsItem(String key, String columnValidationsLabelsItem) {
    if (this.columnValidationsLabels == null) {
      this.columnValidationsLabels = new HashMap<String, String>();
    }
    this.columnValidationsLabels.put(key, columnValidationsLabelsItem);
    return this;
  }

   /**
   * Column validations and labels.
   * @return columnValidationsLabels
  **/
  @Schema(description = "Column validations and labels.")
  public Map<String, String> getColumnValidationsLabels() {
    return columnValidationsLabels;
  }

  public void setColumnValidationsLabels(Map<String, String> columnValidationsLabels) {
    this.columnValidationsLabels = columnValidationsLabels;
  }

  public ResourceEnumsDto textOptions(List<String> textOptions) {
    this.textOptions = textOptions;
    return this;
  }

  public ResourceEnumsDto addTextOptionsItem(String textOptionsItem) {
    if (this.textOptions == null) {
      this.textOptions = new ArrayList<String>();
    }
    this.textOptions.add(textOptionsItem);
    return this;
  }

   /**
   * Text options.
   * @return textOptions
  **/
  @Schema(description = "Text options.")
  public List<String> getTextOptions() {
    return textOptions;
  }

  public void setTextOptions(List<String> textOptions) {
    this.textOptions = textOptions;
  }

  public ResourceEnumsDto textOptionsLabels(Map<String, String> textOptionsLabels) {
    this.textOptionsLabels = textOptionsLabels;
    return this;
  }

  public ResourceEnumsDto putTextOptionsLabelsItem(String key, String textOptionsLabelsItem) {
    if (this.textOptionsLabels == null) {
      this.textOptionsLabels = new HashMap<String, String>();
    }
    this.textOptionsLabels.put(key, textOptionsLabelsItem);
    return this;
  }

   /**
   * Text options and labels.
   * @return textOptionsLabels
  **/
  @Schema(description = "Text options and labels.")
  public Map<String, String> getTextOptionsLabels() {
    return textOptionsLabels;
  }

  public void setTextOptionsLabels(Map<String, String> textOptionsLabels) {
    this.textOptionsLabels = textOptionsLabels;
  }

  public ResourceEnumsDto indexerMappingsTypes(List<String> indexerMappingsTypes) {
    this.indexerMappingsTypes = indexerMappingsTypes;
    return this;
  }

  public ResourceEnumsDto addIndexerMappingsTypesItem(String indexerMappingsTypesItem) {
    if (this.indexerMappingsTypes == null) {
      this.indexerMappingsTypes = new ArrayList<String>();
    }
    this.indexerMappingsTypes.add(indexerMappingsTypesItem);
    return this;
  }

   /**
   * Indexer mappings.
   * @return indexerMappingsTypes
  **/
  @Schema(description = "Indexer mappings.")
  public List<String> getIndexerMappingsTypes() {
    return indexerMappingsTypes;
  }

  public void setIndexerMappingsTypes(List<String> indexerMappingsTypes) {
    this.indexerMappingsTypes = indexerMappingsTypes;
  }

  public ResourceEnumsDto indexerMappingsTypesLabels(Map<String, String> indexerMappingsTypesLabels) {
    this.indexerMappingsTypesLabels = indexerMappingsTypesLabels;
    return this;
  }

  public ResourceEnumsDto putIndexerMappingsTypesLabelsItem(String key, String indexerMappingsTypesLabelsItem) {
    if (this.indexerMappingsTypesLabels == null) {
      this.indexerMappingsTypesLabels = new HashMap<String, String>();
    }
    this.indexerMappingsTypesLabels.put(key, indexerMappingsTypesLabelsItem);
    return this;
  }

   /**
   * Indexer mappings and labels.
   * @return indexerMappingsTypesLabels
  **/
  @Schema(description = "Indexer mappings and labels.")
  public Map<String, String> getIndexerMappingsTypesLabels() {
    return indexerMappingsTypesLabels;
  }

  public void setIndexerMappingsTypesLabels(Map<String, String> indexerMappingsTypesLabels) {
    this.indexerMappingsTypesLabels = indexerMappingsTypesLabels;
  }

  public ResourceEnumsDto indexerMappingMatchingsTypes(List<String> indexerMappingMatchingsTypes) {
    this.indexerMappingMatchingsTypes = indexerMappingMatchingsTypes;
    return this;
  }

  public ResourceEnumsDto addIndexerMappingMatchingsTypesItem(String indexerMappingMatchingsTypesItem) {
    if (this.indexerMappingMatchingsTypes == null) {
      this.indexerMappingMatchingsTypes = new ArrayList<String>();
    }
    this.indexerMappingMatchingsTypes.add(indexerMappingMatchingsTypesItem);
    return this;
  }

   /**
   * Indexer mapping matchings.
   * @return indexerMappingMatchingsTypes
  **/
  @Schema(description = "Indexer mapping matchings.")
  public List<String> getIndexerMappingMatchingsTypes() {
    return indexerMappingMatchingsTypes;
  }

  public void setIndexerMappingMatchingsTypes(List<String> indexerMappingMatchingsTypes) {
    this.indexerMappingMatchingsTypes = indexerMappingMatchingsTypes;
  }

  public ResourceEnumsDto indexerMappingMatchingsTypesLabels(Map<String, String> indexerMappingMatchingsTypesLabels) {
    this.indexerMappingMatchingsTypesLabels = indexerMappingMatchingsTypesLabels;
    return this;
  }

  public ResourceEnumsDto putIndexerMappingMatchingsTypesLabelsItem(String key, String indexerMappingMatchingsTypesLabelsItem) {
    if (this.indexerMappingMatchingsTypesLabels == null) {
      this.indexerMappingMatchingsTypesLabels = new HashMap<String, String>();
    }
    this.indexerMappingMatchingsTypesLabels.put(key, indexerMappingMatchingsTypesLabelsItem);
    return this;
  }

   /**
   * Indexer mappings matchings and labels.
   * @return indexerMappingMatchingsTypesLabels
  **/
  @Schema(description = "Indexer mappings matchings and labels.")
  public Map<String, String> getIndexerMappingMatchingsTypesLabels() {
    return indexerMappingMatchingsTypesLabels;
  }

  public void setIndexerMappingMatchingsTypesLabels(Map<String, String> indexerMappingMatchingsTypesLabels) {
    this.indexerMappingMatchingsTypesLabels = indexerMappingMatchingsTypesLabels;
  }

  public ResourceEnumsDto bucketSorts(List<String> bucketSorts) {
    this.bucketSorts = bucketSorts;
    return this;
  }

  public ResourceEnumsDto addBucketSortsItem(String bucketSortsItem) {
    if (this.bucketSorts == null) {
      this.bucketSorts = new ArrayList<String>();
    }
    this.bucketSorts.add(bucketSortsItem);
    return this;
  }

   /**
   * Bucket sorts.
   * @return bucketSorts
  **/
  @Schema(description = "Bucket sorts.")
  public List<String> getBucketSorts() {
    return bucketSorts;
  }

  public void setBucketSorts(List<String> bucketSorts) {
    this.bucketSorts = bucketSorts;
  }

  public ResourceEnumsDto bucketSortsLabels(Map<String, String> bucketSortsLabels) {
    this.bucketSortsLabels = bucketSortsLabels;
    return this;
  }

  public ResourceEnumsDto putBucketSortsLabelsItem(String key, String bucketSortsLabelsItem) {
    if (this.bucketSortsLabels == null) {
      this.bucketSortsLabels = new HashMap<String, String>();
    }
    this.bucketSortsLabels.put(key, bucketSortsLabelsItem);
    return this;
  }

   /**
   * Bucket sorts and labels.
   * @return bucketSortsLabels
  **/
  @Schema(description = "Bucket sorts and labels.")
  public Map<String, String> getBucketSortsLabels() {
    return bucketSortsLabels;
  }

  public void setBucketSortsLabels(Map<String, String> bucketSortsLabels) {
    this.bucketSortsLabels = bucketSortsLabels;
  }

  public ResourceEnumsDto bucketClassifications(List<String> bucketClassifications) {
    this.bucketClassifications = bucketClassifications;
    return this;
  }

  public ResourceEnumsDto addBucketClassificationsItem(String bucketClassificationsItem) {
    if (this.bucketClassifications == null) {
      this.bucketClassifications = new ArrayList<String>();
    }
    this.bucketClassifications.add(bucketClassificationsItem);
    return this;
  }

   /**
   * Bucket classications.
   * @return bucketClassifications
  **/
  @Schema(description = "Bucket classications.")
  public List<String> getBucketClassifications() {
    return bucketClassifications;
  }

  public void setBucketClassifications(List<String> bucketClassifications) {
    this.bucketClassifications = bucketClassifications;
  }

  public ResourceEnumsDto bucketClassificationsLabels(Map<String, String> bucketClassificationsLabels) {
    this.bucketClassificationsLabels = bucketClassificationsLabels;
    return this;
  }

  public ResourceEnumsDto putBucketClassificationsLabelsItem(String key, String bucketClassificationsLabelsItem) {
    if (this.bucketClassificationsLabels == null) {
      this.bucketClassificationsLabels = new HashMap<String, String>();
    }
    this.bucketClassificationsLabels.put(key, bucketClassificationsLabelsItem);
    return this;
  }

   /**
   * Bucket classifications and labels.
   * @return bucketClassificationsLabels
  **/
  @Schema(description = "Bucket classifications and labels.")
  public Map<String, String> getBucketClassificationsLabels() {
    return bucketClassificationsLabels;
  }

  public void setBucketClassificationsLabels(Map<String, String> bucketClassificationsLabels) {
    this.bucketClassificationsLabels = bucketClassificationsLabels;
  }

  public ResourceEnumsDto columnErrorPolicies(List<String> columnErrorPolicies) {
    this.columnErrorPolicies = columnErrorPolicies;
    return this;
  }

  public ResourceEnumsDto addColumnErrorPoliciesItem(String columnErrorPoliciesItem) {
    if (this.columnErrorPolicies == null) {
      this.columnErrorPolicies = new ArrayList<String>();
    }
    this.columnErrorPolicies.add(columnErrorPoliciesItem);
    return this;
  }

   /**
   * Column error policies.
   * @return columnErrorPolicies
  **/
  @Schema(description = "Column error policies.")
  public List<String> getColumnErrorPolicies() {
    return columnErrorPolicies;
  }

  public void setColumnErrorPolicies(List<String> columnErrorPolicies) {
    this.columnErrorPolicies = columnErrorPolicies;
  }

  public ResourceEnumsDto columnErrorPoliciesLabels(Map<String, String> columnErrorPoliciesLabels) {
    this.columnErrorPoliciesLabels = columnErrorPoliciesLabels;
    return this;
  }

  public ResourceEnumsDto putColumnErrorPoliciesLabelsItem(String key, String columnErrorPoliciesLabelsItem) {
    if (this.columnErrorPoliciesLabels == null) {
      this.columnErrorPoliciesLabels = new HashMap<String, String>();
    }
    this.columnErrorPoliciesLabels.put(key, columnErrorPoliciesLabelsItem);
    return this;
  }

   /**
   * Column error policies and labels.
   * @return columnErrorPoliciesLabels
  **/
  @Schema(description = "Column error policies and labels.")
  public Map<String, String> getColumnErrorPoliciesLabels() {
    return columnErrorPoliciesLabels;
  }

  public void setColumnErrorPoliciesLabels(Map<String, String> columnErrorPoliciesLabels) {
    this.columnErrorPoliciesLabels = columnErrorPoliciesLabels;
  }

  public ResourceEnumsDto credentialTypes(List<String> credentialTypes) {
    this.credentialTypes = credentialTypes;
    return this;
  }

  public ResourceEnumsDto addCredentialTypesItem(String credentialTypesItem) {
    if (this.credentialTypes == null) {
      this.credentialTypes = new ArrayList<String>();
    }
    this.credentialTypes.add(credentialTypesItem);
    return this;
  }

   /**
   * Credential types.
   * @return credentialTypes
  **/
  @Schema(description = "Credential types.")
  public List<String> getCredentialTypes() {
    return credentialTypes;
  }

  public void setCredentialTypes(List<String> credentialTypes) {
    this.credentialTypes = credentialTypes;
  }

  public ResourceEnumsDto credentialTypesLabels(Map<String, String> credentialTypesLabels) {
    this.credentialTypesLabels = credentialTypesLabels;
    return this;
  }

  public ResourceEnumsDto putCredentialTypesLabelsItem(String key, String credentialTypesLabelsItem) {
    if (this.credentialTypesLabels == null) {
      this.credentialTypesLabels = new HashMap<String, String>();
    }
    this.credentialTypesLabels.put(key, credentialTypesLabelsItem);
    return this;
  }

   /**
   * Credential types labels.
   * @return credentialTypesLabels
  **/
  @Schema(description = "Credential types labels.")
  public Map<String, String> getCredentialTypesLabels() {
    return credentialTypesLabels;
  }

  public void setCredentialTypesLabels(Map<String, String> credentialTypesLabels) {
    this.credentialTypesLabels = credentialTypesLabels;
  }

  public ResourceEnumsDto transformationTypes(List<String> transformationTypes) {
    this.transformationTypes = transformationTypes;
    return this;
  }

  public ResourceEnumsDto addTransformationTypesItem(String transformationTypesItem) {
    if (this.transformationTypes == null) {
      this.transformationTypes = new ArrayList<String>();
    }
    this.transformationTypes.add(transformationTypesItem);
    return this;
  }

   /**
   * Transformation types.
   * @return transformationTypes
  **/
  @Schema(description = "Transformation types.")
  public List<String> getTransformationTypes() {
    return transformationTypes;
  }

  public void setTransformationTypes(List<String> transformationTypes) {
    this.transformationTypes = transformationTypes;
  }

  public ResourceEnumsDto transformationTypesLabels(Map<String, String> transformationTypesLabels) {
    this.transformationTypesLabels = transformationTypesLabels;
    return this;
  }

  public ResourceEnumsDto putTransformationTypesLabelsItem(String key, String transformationTypesLabelsItem) {
    if (this.transformationTypesLabels == null) {
      this.transformationTypesLabels = new HashMap<String, String>();
    }
    this.transformationTypesLabels.put(key, transformationTypesLabelsItem);
    return this;
  }

   /**
   * Transformation types labels.
   * @return transformationTypesLabels
  **/
  @Schema(description = "Transformation types labels.")
  public Map<String, String> getTransformationTypesLabels() {
    return transformationTypesLabels;
  }

  public void setTransformationTypesLabels(Map<String, String> transformationTypesLabels) {
    this.transformationTypesLabels = transformationTypesLabels;
  }

  public ResourceEnumsDto transformationMappingsTypes(List<String> transformationMappingsTypes) {
    this.transformationMappingsTypes = transformationMappingsTypes;
    return this;
  }

  public ResourceEnumsDto addTransformationMappingsTypesItem(String transformationMappingsTypesItem) {
    if (this.transformationMappingsTypes == null) {
      this.transformationMappingsTypes = new ArrayList<String>();
    }
    this.transformationMappingsTypes.add(transformationMappingsTypesItem);
    return this;
  }

   /**
   * Transformation mapping types.
   * @return transformationMappingsTypes
  **/
  @Schema(description = "Transformation mapping types.")
  public List<String> getTransformationMappingsTypes() {
    return transformationMappingsTypes;
  }

  public void setTransformationMappingsTypes(List<String> transformationMappingsTypes) {
    this.transformationMappingsTypes = transformationMappingsTypes;
  }

  public ResourceEnumsDto transformationMappingsTypesLabels(Map<String, String> transformationMappingsTypesLabels) {
    this.transformationMappingsTypesLabels = transformationMappingsTypesLabels;
    return this;
  }

  public ResourceEnumsDto putTransformationMappingsTypesLabelsItem(String key, String transformationMappingsTypesLabelsItem) {
    if (this.transformationMappingsTypesLabels == null) {
      this.transformationMappingsTypesLabels = new HashMap<String, String>();
    }
    this.transformationMappingsTypesLabels.put(key, transformationMappingsTypesLabelsItem);
    return this;
  }

   /**
   * Transformation mapping types labels.
   * @return transformationMappingsTypesLabels
  **/
  @Schema(description = "Transformation mapping types labels.")
  public Map<String, String> getTransformationMappingsTypesLabels() {
    return transformationMappingsTypesLabels;
  }

  public void setTransformationMappingsTypesLabels(Map<String, String> transformationMappingsTypesLabels) {
    this.transformationMappingsTypesLabels = transformationMappingsTypesLabels;
  }

  public ResourceEnumsDto resourceTestInputTypes(List<String> resourceTestInputTypes) {
    this.resourceTestInputTypes = resourceTestInputTypes;
    return this;
  }

  public ResourceEnumsDto addResourceTestInputTypesItem(String resourceTestInputTypesItem) {
    if (this.resourceTestInputTypes == null) {
      this.resourceTestInputTypes = new ArrayList<String>();
    }
    this.resourceTestInputTypes.add(resourceTestInputTypesItem);
    return this;
  }

   /**
   * Resource test input types.
   * @return resourceTestInputTypes
  **/
  @Schema(description = "Resource test input types.")
  public List<String> getResourceTestInputTypes() {
    return resourceTestInputTypes;
  }

  public void setResourceTestInputTypes(List<String> resourceTestInputTypes) {
    this.resourceTestInputTypes = resourceTestInputTypes;
  }

  public ResourceEnumsDto resourceTestInputTypesLabels(Map<String, String> resourceTestInputTypesLabels) {
    this.resourceTestInputTypesLabels = resourceTestInputTypesLabels;
    return this;
  }

  public ResourceEnumsDto putResourceTestInputTypesLabelsItem(String key, String resourceTestInputTypesLabelsItem) {
    if (this.resourceTestInputTypesLabels == null) {
      this.resourceTestInputTypesLabels = new HashMap<String, String>();
    }
    this.resourceTestInputTypesLabels.put(key, resourceTestInputTypesLabelsItem);
    return this;
  }

   /**
   * Resource test input types labels.
   * @return resourceTestInputTypesLabels
  **/
  @Schema(description = "Resource test input types labels.")
  public Map<String, String> getResourceTestInputTypesLabels() {
    return resourceTestInputTypesLabels;
  }

  public void setResourceTestInputTypesLabels(Map<String, String> resourceTestInputTypesLabels) {
    this.resourceTestInputTypesLabels = resourceTestInputTypesLabels;
  }

  public ResourceEnumsDto systemRoles(List<String> systemRoles) {
    this.systemRoles = systemRoles;
    return this;
  }

  public ResourceEnumsDto addSystemRolesItem(String systemRolesItem) {
    if (this.systemRoles == null) {
      this.systemRoles = new ArrayList<String>();
    }
    this.systemRoles.add(systemRolesItem);
    return this;
  }

   /**
   * System roles.
   * @return systemRoles
  **/
  @Schema(description = "System roles.")
  public List<String> getSystemRoles() {
    return systemRoles;
  }

  public void setSystemRoles(List<String> systemRoles) {
    this.systemRoles = systemRoles;
  }

  public ResourceEnumsDto systemRolesLabels(Map<String, String> systemRolesLabels) {
    this.systemRolesLabels = systemRolesLabels;
    return this;
  }

  public ResourceEnumsDto putSystemRolesLabelsItem(String key, String systemRolesLabelsItem) {
    if (this.systemRolesLabels == null) {
      this.systemRolesLabels = new HashMap<String, String>();
    }
    this.systemRolesLabels.put(key, systemRolesLabelsItem);
    return this;
  }

   /**
   * System roles labels.
   * @return systemRolesLabels
  **/
  @Schema(description = "System roles labels.")
  public Map<String, String> getSystemRolesLabels() {
    return systemRolesLabels;
  }

  public void setSystemRolesLabels(Map<String, String> systemRolesLabels) {
    this.systemRolesLabels = systemRolesLabels;
  }

  public ResourceEnumsDto allRoles(List<String> allRoles) {
    this.allRoles = allRoles;
    return this;
  }

  public ResourceEnumsDto addAllRolesItem(String allRolesItem) {
    if (this.allRoles == null) {
      this.allRoles = new ArrayList<String>();
    }
    this.allRoles.add(allRolesItem);
    return this;
  }

   /**
   * System and user roles.
   * @return allRoles
  **/
  @Schema(description = "System and user roles.")
  public List<String> getAllRoles() {
    return allRoles;
  }

  public void setAllRoles(List<String> allRoles) {
    this.allRoles = allRoles;
  }

  public ResourceEnumsDto allRolesLabels(Map<String, String> allRolesLabels) {
    this.allRolesLabels = allRolesLabels;
    return this;
  }

  public ResourceEnumsDto putAllRolesLabelsItem(String key, String allRolesLabelsItem) {
    if (this.allRolesLabels == null) {
      this.allRolesLabels = new HashMap<String, String>();
    }
    this.allRolesLabels.put(key, allRolesLabelsItem);
    return this;
  }

   /**
   * System and user roles labels.
   * @return allRolesLabels
  **/
  @Schema(description = "System and user roles labels.")
  public Map<String, String> getAllRolesLabels() {
    return allRolesLabels;
  }

  public void setAllRolesLabels(Map<String, String> allRolesLabels) {
    this.allRolesLabels = allRolesLabels;
  }

  public ResourceEnumsDto mergeTypes(List<String> mergeTypes) {
    this.mergeTypes = mergeTypes;
    return this;
  }

  public ResourceEnumsDto addMergeTypesItem(String mergeTypesItem) {
    if (this.mergeTypes == null) {
      this.mergeTypes = new ArrayList<String>();
    }
    this.mergeTypes.add(mergeTypesItem);
    return this;
  }

   /**
   * Merge types.
   * @return mergeTypes
  **/
  @Schema(description = "Merge types.")
  public List<String> getMergeTypes() {
    return mergeTypes;
  }

  public void setMergeTypes(List<String> mergeTypes) {
    this.mergeTypes = mergeTypes;
  }

  public ResourceEnumsDto mergeTypesLabels(Map<String, String> mergeTypesLabels) {
    this.mergeTypesLabels = mergeTypesLabels;
    return this;
  }

  public ResourceEnumsDto putMergeTypesLabelsItem(String key, String mergeTypesLabelsItem) {
    if (this.mergeTypesLabels == null) {
      this.mergeTypesLabels = new HashMap<String, String>();
    }
    this.mergeTypesLabels.put(key, mergeTypesLabelsItem);
    return this;
  }

   /**
   * Merge types labels.
   * @return mergeTypesLabels
  **/
  @Schema(description = "Merge types labels.")
  public Map<String, String> getMergeTypesLabels() {
    return mergeTypesLabels;
  }

  public void setMergeTypesLabels(Map<String, String> mergeTypesLabels) {
    this.mergeTypesLabels = mergeTypesLabels;
  }

  public ResourceEnumsDto mergeSorts(List<String> mergeSorts) {
    this.mergeSorts = mergeSorts;
    return this;
  }

  public ResourceEnumsDto addMergeSortsItem(String mergeSortsItem) {
    if (this.mergeSorts == null) {
      this.mergeSorts = new ArrayList<String>();
    }
    this.mergeSorts.add(mergeSortsItem);
    return this;
  }

   /**
   * Merge sorts.
   * @return mergeSorts
  **/
  @Schema(description = "Merge sorts.")
  public List<String> getMergeSorts() {
    return mergeSorts;
  }

  public void setMergeSorts(List<String> mergeSorts) {
    this.mergeSorts = mergeSorts;
  }

  public ResourceEnumsDto mergeSortsLabels(Map<String, String> mergeSortsLabels) {
    this.mergeSortsLabels = mergeSortsLabels;
    return this;
  }

  public ResourceEnumsDto putMergeSortsLabelsItem(String key, String mergeSortsLabelsItem) {
    if (this.mergeSortsLabels == null) {
      this.mergeSortsLabels = new HashMap<String, String>();
    }
    this.mergeSortsLabels.put(key, mergeSortsLabelsItem);
    return this;
  }

   /**
   * Merge sorts labels.
   * @return mergeSortsLabels
  **/
  @Schema(description = "Merge sorts labels.")
  public Map<String, String> getMergeSortsLabels() {
    return mergeSortsLabels;
  }

  public void setMergeSortsLabels(Map<String, String> mergeSortsLabels) {
    this.mergeSortsLabels = mergeSortsLabels;
  }

  public ResourceEnumsDto datasetColumns(Map<String, List<String>> datasetColumns) {
    this.datasetColumns = datasetColumns;
    return this;
  }

  public ResourceEnumsDto putDatasetColumnsItem(String key, List<String> datasetColumnsItem) {
    if (this.datasetColumns == null) {
      this.datasetColumns = new HashMap<String, List<String>>();
    }
    this.datasetColumns.put(key, datasetColumnsItem);
    return this;
  }

   /**
   * Datasets and columns.
   * @return datasetColumns
  **/
  @Schema(description = "Datasets and columns.")
  public Map<String, List<String>> getDatasetColumns() {
    return datasetColumns;
  }

  public void setDatasetColumns(Map<String, List<String>> datasetColumns) {
    this.datasetColumns = datasetColumns;
  }

  public ResourceEnumsDto datasetColumnsLabels(Map<String, Map<String, String>> datasetColumnsLabels) {
    this.datasetColumnsLabels = datasetColumnsLabels;
    return this;
  }

  public ResourceEnumsDto putDatasetColumnsLabelsItem(String key, Map<String, String> datasetColumnsLabelsItem) {
    if (this.datasetColumnsLabels == null) {
      this.datasetColumnsLabels = new HashMap<String, Map<String, String>>();
    }
    this.datasetColumnsLabels.put(key, datasetColumnsLabelsItem);
    return this;
  }

   /**
   * Datasets, columns and labels.
   * @return datasetColumnsLabels
  **/
  @Schema(description = "Datasets, columns and labels.")
  public Map<String, Map<String, String>> getDatasetColumnsLabels() {
    return datasetColumnsLabels;
  }

  public void setDatasetColumnsLabels(Map<String, Map<String, String>> datasetColumnsLabels) {
    this.datasetColumnsLabels = datasetColumnsLabels;
  }

  public ResourceEnumsDto indexerMappings(Map<String, List<String>> indexerMappings) {
    this.indexerMappings = indexerMappings;
    return this;
  }

  public ResourceEnumsDto putIndexerMappingsItem(String key, List<String> indexerMappingsItem) {
    if (this.indexerMappings == null) {
      this.indexerMappings = new HashMap<String, List<String>>();
    }
    this.indexerMappings.put(key, indexerMappingsItem);
    return this;
  }

   /**
   * Indexers and mappings.
   * @return indexerMappings
  **/
  @Schema(description = "Indexers and mappings.")
  public Map<String, List<String>> getIndexerMappings() {
    return indexerMappings;
  }

  public void setIndexerMappings(Map<String, List<String>> indexerMappings) {
    this.indexerMappings = indexerMappings;
  }

  public ResourceEnumsDto indexerMappingsLabels(Map<String, Map<String, String>> indexerMappingsLabels) {
    this.indexerMappingsLabels = indexerMappingsLabels;
    return this;
  }

  public ResourceEnumsDto putIndexerMappingsLabelsItem(String key, Map<String, String> indexerMappingsLabelsItem) {
    if (this.indexerMappingsLabels == null) {
      this.indexerMappingsLabels = new HashMap<String, Map<String, String>>();
    }
    this.indexerMappingsLabels.put(key, indexerMappingsLabelsItem);
    return this;
  }

   /**
   * Indexers, mappings and labels.
   * @return indexerMappingsLabels
  **/
  @Schema(description = "Indexers, mappings and labels.")
  public Map<String, Map<String, String>> getIndexerMappingsLabels() {
    return indexerMappingsLabels;
  }

  public void setIndexerMappingsLabels(Map<String, Map<String, String>> indexerMappingsLabels) {
    this.indexerMappingsLabels = indexerMappingsLabels;
  }

  public ResourceEnumsDto datasets(List<String> datasets) {
    this.datasets = datasets;
    return this;
  }

  public ResourceEnumsDto addDatasetsItem(String datasetsItem) {
    if (this.datasets == null) {
      this.datasets = new ArrayList<String>();
    }
    this.datasets.add(datasetsItem);
    return this;
  }

   /**
   * Datasets.
   * @return datasets
  **/
  @Schema(description = "Datasets.")
  public List<String> getDatasets() {
    return datasets;
  }

  public void setDatasets(List<String> datasets) {
    this.datasets = datasets;
  }

  public ResourceEnumsDto datasetsLabels(Map<String, String> datasetsLabels) {
    this.datasetsLabels = datasetsLabels;
    return this;
  }

  public ResourceEnumsDto putDatasetsLabelsItem(String key, String datasetsLabelsItem) {
    if (this.datasetsLabels == null) {
      this.datasetsLabels = new HashMap<String, String>();
    }
    this.datasetsLabels.put(key, datasetsLabelsItem);
    return this;
  }

   /**
   * Datasets and labels.
   * @return datasetsLabels
  **/
  @Schema(description = "Datasets and labels.")
  public Map<String, String> getDatasetsLabels() {
    return datasetsLabels;
  }

  public void setDatasetsLabels(Map<String, String> datasetsLabels) {
    this.datasetsLabels = datasetsLabels;
  }

  public ResourceEnumsDto credentials(List<String> credentials) {
    this.credentials = credentials;
    return this;
  }

  public ResourceEnumsDto addCredentialsItem(String credentialsItem) {
    if (this.credentials == null) {
      this.credentials = new ArrayList<String>();
    }
    this.credentials.add(credentialsItem);
    return this;
  }

   /**
   * Credentials.
   * @return credentials
  **/
  @Schema(description = "Credentials.")
  public List<String> getCredentials() {
    return credentials;
  }

  public void setCredentials(List<String> credentials) {
    this.credentials = credentials;
  }

  public ResourceEnumsDto credentialsLabels(Map<String, String> credentialsLabels) {
    this.credentialsLabels = credentialsLabels;
    return this;
  }

  public ResourceEnumsDto putCredentialsLabelsItem(String key, String credentialsLabelsItem) {
    if (this.credentialsLabels == null) {
      this.credentialsLabels = new HashMap<String, String>();
    }
    this.credentialsLabels.put(key, credentialsLabelsItem);
    return this;
  }

   /**
   * Credentials and labels.
   * @return credentialsLabels
  **/
  @Schema(description = "Credentials and labels.")
  public Map<String, String> getCredentialsLabels() {
    return credentialsLabels;
  }

  public void setCredentialsLabels(Map<String, String> credentialsLabels) {
    this.credentialsLabels = credentialsLabels;
  }

  public ResourceEnumsDto roles(List<String> roles) {
    this.roles = roles;
    return this;
  }

  public ResourceEnumsDto addRolesItem(String rolesItem) {
    if (this.roles == null) {
      this.roles = new ArrayList<String>();
    }
    this.roles.add(rolesItem);
    return this;
  }

   /**
   * Roles.
   * @return roles
  **/
  @Schema(description = "Roles.")
  public List<String> getRoles() {
    return roles;
  }

  public void setRoles(List<String> roles) {
    this.roles = roles;
  }

  public ResourceEnumsDto rolesLabels(Map<String, String> rolesLabels) {
    this.rolesLabels = rolesLabels;
    return this;
  }

  public ResourceEnumsDto putRolesLabelsItem(String key, String rolesLabelsItem) {
    if (this.rolesLabels == null) {
      this.rolesLabels = new HashMap<String, String>();
    }
    this.rolesLabels.put(key, rolesLabelsItem);
    return this;
  }

   /**
   * Roles and labels.
   * @return rolesLabels
  **/
  @Schema(description = "Roles and labels.")
  public Map<String, String> getRolesLabels() {
    return rolesLabels;
  }

  public void setRolesLabels(Map<String, String> rolesLabels) {
    this.rolesLabels = rolesLabels;
  }

  public ResourceEnumsDto tables(List<String> tables) {
    this.tables = tables;
    return this;
  }

  public ResourceEnumsDto addTablesItem(String tablesItem) {
    if (this.tables == null) {
      this.tables = new ArrayList<String>();
    }
    this.tables.add(tablesItem);
    return this;
  }

   /**
   * Tables.
   * @return tables
  **/
  @Schema(description = "Tables.")
  public List<String> getTables() {
    return tables;
  }

  public void setTables(List<String> tables) {
    this.tables = tables;
  }

  public ResourceEnumsDto tablesLabels(Map<String, String> tablesLabels) {
    this.tablesLabels = tablesLabels;
    return this;
  }

  public ResourceEnumsDto putTablesLabelsItem(String key, String tablesLabelsItem) {
    if (this.tablesLabels == null) {
      this.tablesLabels = new HashMap<String, String>();
    }
    this.tablesLabels.put(key, tablesLabelsItem);
    return this;
  }

   /**
   * Tables and labels.
   * @return tablesLabels
  **/
  @Schema(description = "Tables and labels.")
  public Map<String, String> getTablesLabels() {
    return tablesLabels;
  }

  public void setTablesLabels(Map<String, String> tablesLabels) {
    this.tablesLabels = tablesLabels;
  }

  public ResourceEnumsDto entities(List<String> entities) {
    this.entities = entities;
    return this;
  }

  public ResourceEnumsDto addEntitiesItem(String entitiesItem) {
    if (this.entities == null) {
      this.entities = new ArrayList<String>();
    }
    this.entities.add(entitiesItem);
    return this;
  }

   /**
   * Entities.
   * @return entities
  **/
  @Schema(description = "Entities.")
  public List<String> getEntities() {
    return entities;
  }

  public void setEntities(List<String> entities) {
    this.entities = entities;
  }

  public ResourceEnumsDto entitiesLabels(Map<String, String> entitiesLabels) {
    this.entitiesLabels = entitiesLabels;
    return this;
  }

  public ResourceEnumsDto putEntitiesLabelsItem(String key, String entitiesLabelsItem) {
    if (this.entitiesLabels == null) {
      this.entitiesLabels = new HashMap<String, String>();
    }
    this.entitiesLabels.put(key, entitiesLabelsItem);
    return this;
  }

   /**
   * Entities and labels.
   * @return entitiesLabels
  **/
  @Schema(description = "Entities and labels.")
  public Map<String, String> getEntitiesLabels() {
    return entitiesLabels;
  }

  public void setEntitiesLabels(Map<String, String> entitiesLabels) {
    this.entitiesLabels = entitiesLabels;
  }

  public ResourceEnumsDto sources(List<String> sources) {
    this.sources = sources;
    return this;
  }

  public ResourceEnumsDto addSourcesItem(String sourcesItem) {
    if (this.sources == null) {
      this.sources = new ArrayList<String>();
    }
    this.sources.add(sourcesItem);
    return this;
  }

   /**
   * Sources.
   * @return sources
  **/
  @Schema(description = "Sources.")
  public List<String> getSources() {
    return sources;
  }

  public void setSources(List<String> sources) {
    this.sources = sources;
  }

  public ResourceEnumsDto sourcesLabels(Map<String, String> sourcesLabels) {
    this.sourcesLabels = sourcesLabels;
    return this;
  }

  public ResourceEnumsDto putSourcesLabelsItem(String key, String sourcesLabelsItem) {
    if (this.sourcesLabels == null) {
      this.sourcesLabels = new HashMap<String, String>();
    }
    this.sourcesLabels.put(key, sourcesLabelsItem);
    return this;
  }

   /**
   * Sources and labels.
   * @return sourcesLabels
  **/
  @Schema(description = "Sources and labels.")
  public Map<String, String> getSourcesLabels() {
    return sourcesLabels;
  }

  public void setSourcesLabels(Map<String, String> sourcesLabels) {
    this.sourcesLabels = sourcesLabels;
  }

  public ResourceEnumsDto sinks(List<String> sinks) {
    this.sinks = sinks;
    return this;
  }

  public ResourceEnumsDto addSinksItem(String sinksItem) {
    if (this.sinks == null) {
      this.sinks = new ArrayList<String>();
    }
    this.sinks.add(sinksItem);
    return this;
  }

   /**
   * Sinks.
   * @return sinks
  **/
  @Schema(description = "Sinks.")
  public List<String> getSinks() {
    return sinks;
  }

  public void setSinks(List<String> sinks) {
    this.sinks = sinks;
  }

  public ResourceEnumsDto sinksLabels(Map<String, String> sinksLabels) {
    this.sinksLabels = sinksLabels;
    return this;
  }

  public ResourceEnumsDto putSinksLabelsItem(String key, String sinksLabelsItem) {
    if (this.sinksLabels == null) {
      this.sinksLabels = new HashMap<String, String>();
    }
    this.sinksLabels.put(key, sinksLabelsItem);
    return this;
  }

   /**
   * Sinks and labels.
   * @return sinksLabels
  **/
  @Schema(description = "Sinks and labels.")
  public Map<String, String> getSinksLabels() {
    return sinksLabels;
  }

  public void setSinksLabels(Map<String, String> sinksLabels) {
    this.sinksLabels = sinksLabels;
  }

  public ResourceEnumsDto indexers(List<String> indexers) {
    this.indexers = indexers;
    return this;
  }

  public ResourceEnumsDto addIndexersItem(String indexersItem) {
    if (this.indexers == null) {
      this.indexers = new ArrayList<String>();
    }
    this.indexers.add(indexersItem);
    return this;
  }

   /**
   * Indexers.
   * @return indexers
  **/
  @Schema(description = "Indexers.")
  public List<String> getIndexers() {
    return indexers;
  }

  public void setIndexers(List<String> indexers) {
    this.indexers = indexers;
  }

  public ResourceEnumsDto indexersLabels(Map<String, String> indexersLabels) {
    this.indexersLabels = indexersLabels;
    return this;
  }

  public ResourceEnumsDto putIndexersLabelsItem(String key, String indexersLabelsItem) {
    if (this.indexersLabels == null) {
      this.indexersLabels = new HashMap<String, String>();
    }
    this.indexersLabels.put(key, indexersLabelsItem);
    return this;
  }

   /**
   * Indexers and labels.
   * @return indexersLabels
  **/
  @Schema(description = "Indexers and labels.")
  public Map<String, String> getIndexersLabels() {
    return indexersLabels;
  }

  public void setIndexersLabels(Map<String, String> indexersLabels) {
    this.indexersLabels = indexersLabels;
  }

  public ResourceEnumsDto transformations(List<String> transformations) {
    this.transformations = transformations;
    return this;
  }

  public ResourceEnumsDto addTransformationsItem(String transformationsItem) {
    if (this.transformations == null) {
      this.transformations = new ArrayList<String>();
    }
    this.transformations.add(transformationsItem);
    return this;
  }

   /**
   * Transformations.
   * @return transformations
  **/
  @Schema(description = "Transformations.")
  public List<String> getTransformations() {
    return transformations;
  }

  public void setTransformations(List<String> transformations) {
    this.transformations = transformations;
  }

  public ResourceEnumsDto transformationsLabels(Map<String, String> transformationsLabels) {
    this.transformationsLabels = transformationsLabels;
    return this;
  }

  public ResourceEnumsDto putTransformationsLabelsItem(String key, String transformationsLabelsItem) {
    if (this.transformationsLabels == null) {
      this.transformationsLabels = new HashMap<String, String>();
    }
    this.transformationsLabels.put(key, transformationsLabelsItem);
    return this;
  }

   /**
   * Transformations and labels.
   * @return transformationsLabels
  **/
  @Schema(description = "Transformations and labels.")
  public Map<String, String> getTransformationsLabels() {
    return transformationsLabels;
  }

  public void setTransformationsLabels(Map<String, String> transformationsLabels) {
    this.transformationsLabels = transformationsLabels;
  }

  public ResourceEnumsDto pipelines(List<String> pipelines) {
    this.pipelines = pipelines;
    return this;
  }

  public ResourceEnumsDto addPipelinesItem(String pipelinesItem) {
    if (this.pipelines == null) {
      this.pipelines = new ArrayList<String>();
    }
    this.pipelines.add(pipelinesItem);
    return this;
  }

   /**
   * Pipelines.
   * @return pipelines
  **/
  @Schema(description = "Pipelines.")
  public List<String> getPipelines() {
    return pipelines;
  }

  public void setPipelines(List<String> pipelines) {
    this.pipelines = pipelines;
  }

  public ResourceEnumsDto pipelinesLabels(Map<String, String> pipelinesLabels) {
    this.pipelinesLabels = pipelinesLabels;
    return this;
  }

  public ResourceEnumsDto putPipelinesLabelsItem(String key, String pipelinesLabelsItem) {
    if (this.pipelinesLabels == null) {
      this.pipelinesLabels = new HashMap<String, String>();
    }
    this.pipelinesLabels.put(key, pipelinesLabelsItem);
    return this;
  }

   /**
   * Pipelines and labels.
   * @return pipelinesLabels
  **/
  @Schema(description = "Pipelines and labels.")
  public Map<String, String> getPipelinesLabels() {
    return pipelinesLabels;
  }

  public void setPipelinesLabels(Map<String, String> pipelinesLabels) {
    this.pipelinesLabels = pipelinesLabels;
  }

  public ResourceEnumsDto pipelineProcessors(List<String> pipelineProcessors) {
    this.pipelineProcessors = pipelineProcessors;
    return this;
  }

  public ResourceEnumsDto addPipelineProcessorsItem(String pipelineProcessorsItem) {
    if (this.pipelineProcessors == null) {
      this.pipelineProcessors = new ArrayList<String>();
    }
    this.pipelineProcessors.add(pipelineProcessorsItem);
    return this;
  }

   /**
   * Pipeline processors.
   * @return pipelineProcessors
  **/
  @Schema(description = "Pipeline processors.")
  public List<String> getPipelineProcessors() {
    return pipelineProcessors;
  }

  public void setPipelineProcessors(List<String> pipelineProcessors) {
    this.pipelineProcessors = pipelineProcessors;
  }

  public ResourceEnumsDto pipelineProcessorsLabels(Map<String, String> pipelineProcessorsLabels) {
    this.pipelineProcessorsLabels = pipelineProcessorsLabels;
    return this;
  }

  public ResourceEnumsDto putPipelineProcessorsLabelsItem(String key, String pipelineProcessorsLabelsItem) {
    if (this.pipelineProcessorsLabels == null) {
      this.pipelineProcessorsLabels = new HashMap<String, String>();
    }
    this.pipelineProcessorsLabels.put(key, pipelineProcessorsLabelsItem);
    return this;
  }

   /**
   * Pipeline processors and labels.
   * @return pipelineProcessorsLabels
  **/
  @Schema(description = "Pipeline processors and labels.")
  public Map<String, String> getPipelineProcessorsLabels() {
    return pipelineProcessorsLabels;
  }

  public void setPipelineProcessorsLabels(Map<String, String> pipelineProcessorsLabels) {
    this.pipelineProcessorsLabels = pipelineProcessorsLabels;
  }

  public ResourceEnumsDto classifiers(List<String> classifiers) {
    this.classifiers = classifiers;
    return this;
  }

  public ResourceEnumsDto addClassifiersItem(String classifiersItem) {
    if (this.classifiers == null) {
      this.classifiers = new ArrayList<String>();
    }
    this.classifiers.add(classifiersItem);
    return this;
  }

   /**
   * Classifiers.
   * @return classifiers
  **/
  @Schema(description = "Classifiers.")
  public List<String> getClassifiers() {
    return classifiers;
  }

  public void setClassifiers(List<String> classifiers) {
    this.classifiers = classifiers;
  }

  public ResourceEnumsDto classifiersLabels(Map<String, String> classifiersLabels) {
    this.classifiersLabels = classifiersLabels;
    return this;
  }

  public ResourceEnumsDto putClassifiersLabelsItem(String key, String classifiersLabelsItem) {
    if (this.classifiersLabels == null) {
      this.classifiersLabels = new HashMap<String, String>();
    }
    this.classifiersLabels.put(key, classifiersLabelsItem);
    return this;
  }

   /**
   * Classifiers and labels.
   * @return classifiersLabels
  **/
  @Schema(description = "Classifiers and labels.")
  public Map<String, String> getClassifiersLabels() {
    return classifiersLabels;
  }

  public void setClassifiersLabels(Map<String, String> classifiersLabels) {
    this.classifiersLabels = classifiersLabels;
  }

  public ResourceEnumsDto mergers(List<String> mergers) {
    this.mergers = mergers;
    return this;
  }

  public ResourceEnumsDto addMergersItem(String mergersItem) {
    if (this.mergers == null) {
      this.mergers = new ArrayList<String>();
    }
    this.mergers.add(mergersItem);
    return this;
  }

   /**
   * Mergers.
   * @return mergers
  **/
  @Schema(description = "Mergers.")
  public List<String> getMergers() {
    return mergers;
  }

  public void setMergers(List<String> mergers) {
    this.mergers = mergers;
  }

  public ResourceEnumsDto mergersLabels(Map<String, String> mergersLabels) {
    this.mergersLabels = mergersLabels;
    return this;
  }

  public ResourceEnumsDto putMergersLabelsItem(String key, String mergersLabelsItem) {
    if (this.mergersLabels == null) {
      this.mergersLabels = new HashMap<String, String>();
    }
    this.mergersLabels.put(key, mergersLabelsItem);
    return this;
  }

   /**
   * Mergers and labels.
   * @return mergersLabels
  **/
  @Schema(description = "Mergers and labels.")
  public Map<String, String> getMergersLabels() {
    return mergersLabels;
  }

  public void setMergersLabels(Map<String, String> mergersLabels) {
    this.mergersLabels = mergersLabels;
  }

  public ResourceEnumsDto stewards(List<String> stewards) {
    this.stewards = stewards;
    return this;
  }

  public ResourceEnumsDto addStewardsItem(String stewardsItem) {
    if (this.stewards == null) {
      this.stewards = new ArrayList<String>();
    }
    this.stewards.add(stewardsItem);
    return this;
  }

   /**
   * Stewards.
   * @return stewards
  **/
  @Schema(description = "Stewards.")
  public List<String> getStewards() {
    return stewards;
  }

  public void setStewards(List<String> stewards) {
    this.stewards = stewards;
  }

  public ResourceEnumsDto stewardsLabels(Map<String, String> stewardsLabels) {
    this.stewardsLabels = stewardsLabels;
    return this;
  }

  public ResourceEnumsDto putStewardsLabelsItem(String key, String stewardsLabelsItem) {
    if (this.stewardsLabels == null) {
      this.stewardsLabels = new HashMap<String, String>();
    }
    this.stewardsLabels.put(key, stewardsLabelsItem);
    return this;
  }

   /**
   * Stewards and labels.
   * @return stewardsLabels
  **/
  @Schema(description = "Stewards and labels.")
  public Map<String, String> getStewardsLabels() {
    return stewardsLabels;
  }

  public void setStewardsLabels(Map<String, String> stewardsLabels) {
    this.stewardsLabels = stewardsLabels;
  }

  public ResourceEnumsDto cronExpressions(List<String> cronExpressions) {
    this.cronExpressions = cronExpressions;
    return this;
  }

  public ResourceEnumsDto addCronExpressionsItem(String cronExpressionsItem) {
    if (this.cronExpressions == null) {
      this.cronExpressions = new ArrayList<String>();
    }
    this.cronExpressions.add(cronExpressionsItem);
    return this;
  }

   /**
   * Cron expressions.
   * @return cronExpressions
  **/
  @Schema(description = "Cron expressions.")
  public List<String> getCronExpressions() {
    return cronExpressions;
  }

  public void setCronExpressions(List<String> cronExpressions) {
    this.cronExpressions = cronExpressions;
  }

  public ResourceEnumsDto cronExpressionsLabels(Map<String, String> cronExpressionsLabels) {
    this.cronExpressionsLabels = cronExpressionsLabels;
    return this;
  }

  public ResourceEnumsDto putCronExpressionsLabelsItem(String key, String cronExpressionsLabelsItem) {
    if (this.cronExpressionsLabels == null) {
      this.cronExpressionsLabels = new HashMap<String, String>();
    }
    this.cronExpressionsLabels.put(key, cronExpressionsLabelsItem);
    return this;
  }

   /**
   * Cron expressions and labels.
   * @return cronExpressionsLabels
  **/
  @Schema(description = "Cron expressions and labels.")
  public Map<String, String> getCronExpressionsLabels() {
    return cronExpressionsLabels;
  }

  public void setCronExpressionsLabels(Map<String, String> cronExpressionsLabels) {
    this.cronExpressionsLabels = cronExpressionsLabels;
  }

  public ResourceEnumsDto tablesEntitiesResources(List<String> tablesEntitiesResources) {
    this.tablesEntitiesResources = tablesEntitiesResources;
    return this;
  }

  public ResourceEnumsDto addTablesEntitiesResourcesItem(String tablesEntitiesResourcesItem) {
    if (this.tablesEntitiesResources == null) {
      this.tablesEntitiesResources = new ArrayList<String>();
    }
    this.tablesEntitiesResources.add(tablesEntitiesResourcesItem);
    return this;
  }

   /**
   * Tables, entities and resources.
   * @return tablesEntitiesResources
  **/
  @Schema(description = "Tables, entities and resources.")
  public List<String> getTablesEntitiesResources() {
    return tablesEntitiesResources;
  }

  public void setTablesEntitiesResources(List<String> tablesEntitiesResources) {
    this.tablesEntitiesResources = tablesEntitiesResources;
  }

  public ResourceEnumsDto tablesEntitiesResourcesLabels(Map<String, String> tablesEntitiesResourcesLabels) {
    this.tablesEntitiesResourcesLabels = tablesEntitiesResourcesLabels;
    return this;
  }

  public ResourceEnumsDto putTablesEntitiesResourcesLabelsItem(String key, String tablesEntitiesResourcesLabelsItem) {
    if (this.tablesEntitiesResourcesLabels == null) {
      this.tablesEntitiesResourcesLabels = new HashMap<String, String>();
    }
    this.tablesEntitiesResourcesLabels.put(key, tablesEntitiesResourcesLabelsItem);
    return this;
  }

   /**
   * Tables, entities and resources, with labels.
   * @return tablesEntitiesResourcesLabels
  **/
  @Schema(description = "Tables, entities and resources, with labels.")
  public Map<String, String> getTablesEntitiesResourcesLabels() {
    return tablesEntitiesResourcesLabels;
  }

  public void setTablesEntitiesResourcesLabels(Map<String, String> tablesEntitiesResourcesLabels) {
    this.tablesEntitiesResourcesLabels = tablesEntitiesResourcesLabels;
  }

  public ResourceEnumsDto errors(List<String> errors) {
    this.errors = errors;
    return this;
  }

  public ResourceEnumsDto addErrorsItem(String errorsItem) {
    if (this.errors == null) {
      this.errors = new ArrayList<String>();
    }
    this.errors.add(errorsItem);
    return this;
  }

   /**
   * List of errors. If HTTP response represents an error (4xx or 5xx) this will contain a list of errors. Otherwise, not present.
   * @return errors
  **/
  @Schema(description = "List of errors. If HTTP response represents an error (4xx or 5xx) this will contain a list of errors. Otherwise, not present.")
  public List<String> getErrors() {
    return errors;
  }

  public void setErrors(List<String> errors) {
    this.errors = errors;
  }

  public ResourceEnumsDto messages(List<String> messages) {
    this.messages = messages;
    return this;
  }

  public ResourceEnumsDto addMessagesItem(String messagesItem) {
    if (this.messages == null) {
      this.messages = new ArrayList<String>();
    }
    this.messages.add(messagesItem);
    return this;
  }

   /**
   * Optional informational messages. If present, the request was successful and response code will be 2xx.
   * @return messages
  **/
  @Schema(description = "Optional informational messages. If present, the request was successful and response code will be 2xx.")
  public List<String> getMessages() {
    return messages;
  }

  public void setMessages(List<String> messages) {
    this.messages = messages;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResourceEnumsDto resourceEnumsDto = (ResourceEnumsDto) o;
    return Objects.equals(this.recordOperations, resourceEnumsDto.recordOperations) &&
        Objects.equals(this.recordOperationsLabels, resourceEnumsDto.recordOperationsLabels) &&
        Objects.equals(this.entityStatus, resourceEnumsDto.entityStatus) &&
        Objects.equals(this.entityStatusLabels, resourceEnumsDto.entityStatusLabels) &&
        Objects.equals(this.intervalTypes, resourceEnumsDto.intervalTypes) &&
        Objects.equals(this.intervalTypesLabels, resourceEnumsDto.intervalTypesLabels) &&
        Objects.equals(this.bucketActions, resourceEnumsDto.bucketActions) &&
        Objects.equals(this.bucketActionsLabels, resourceEnumsDto.bucketActionsLabels) &&
        Objects.equals(this.bucketConditionTypes, resourceEnumsDto.bucketConditionTypes) &&
        Objects.equals(this.bucketConditionTypesLabels, resourceEnumsDto.bucketConditionTypesLabels) &&
        Objects.equals(this.entityTypes, resourceEnumsDto.entityTypes) &&
        Objects.equals(this.entityTypesLabels, resourceEnumsDto.entityTypesLabels) &&
        Objects.equals(this.datasetIdentityTypes, resourceEnumsDto.datasetIdentityTypes) &&
        Objects.equals(this.datasetIdentityTypesLabels, resourceEnumsDto.datasetIdentityTypesLabels) &&
        Objects.equals(this.datasetDataTypes, resourceEnumsDto.datasetDataTypes) &&
        Objects.equals(this.datasetDataTypesLabels, resourceEnumsDto.datasetDataTypesLabels) &&
        Objects.equals(this.columnTypes, resourceEnumsDto.columnTypes) &&
        Objects.equals(this.columnTypesLabels, resourceEnumsDto.columnTypesLabels) &&
        Objects.equals(this.columnUIArrayEditors, resourceEnumsDto.columnUIArrayEditors) &&
        Objects.equals(this.columnUIArrayEditorsLabels, resourceEnumsDto.columnUIArrayEditorsLabels) &&
        Objects.equals(this.columnTokens, resourceEnumsDto.columnTokens) &&
        Objects.equals(this.columnTokensLabels, resourceEnumsDto.columnTokensLabels) &&
        Objects.equals(this.columnValidations, resourceEnumsDto.columnValidations) &&
        Objects.equals(this.columnValidationsLabels, resourceEnumsDto.columnValidationsLabels) &&
        Objects.equals(this.textOptions, resourceEnumsDto.textOptions) &&
        Objects.equals(this.textOptionsLabels, resourceEnumsDto.textOptionsLabels) &&
        Objects.equals(this.indexerMappingsTypes, resourceEnumsDto.indexerMappingsTypes) &&
        Objects.equals(this.indexerMappingsTypesLabels, resourceEnumsDto.indexerMappingsTypesLabels) &&
        Objects.equals(this.indexerMappingMatchingsTypes, resourceEnumsDto.indexerMappingMatchingsTypes) &&
        Objects.equals(this.indexerMappingMatchingsTypesLabels, resourceEnumsDto.indexerMappingMatchingsTypesLabels) &&
        Objects.equals(this.bucketSorts, resourceEnumsDto.bucketSorts) &&
        Objects.equals(this.bucketSortsLabels, resourceEnumsDto.bucketSortsLabels) &&
        Objects.equals(this.bucketClassifications, resourceEnumsDto.bucketClassifications) &&
        Objects.equals(this.bucketClassificationsLabels, resourceEnumsDto.bucketClassificationsLabels) &&
        Objects.equals(this.columnErrorPolicies, resourceEnumsDto.columnErrorPolicies) &&
        Objects.equals(this.columnErrorPoliciesLabels, resourceEnumsDto.columnErrorPoliciesLabels) &&
        Objects.equals(this.credentialTypes, resourceEnumsDto.credentialTypes) &&
        Objects.equals(this.credentialTypesLabels, resourceEnumsDto.credentialTypesLabels) &&
        Objects.equals(this.transformationTypes, resourceEnumsDto.transformationTypes) &&
        Objects.equals(this.transformationTypesLabels, resourceEnumsDto.transformationTypesLabels) &&
        Objects.equals(this.transformationMappingsTypes, resourceEnumsDto.transformationMappingsTypes) &&
        Objects.equals(this.transformationMappingsTypesLabels, resourceEnumsDto.transformationMappingsTypesLabels) &&
        Objects.equals(this.resourceTestInputTypes, resourceEnumsDto.resourceTestInputTypes) &&
        Objects.equals(this.resourceTestInputTypesLabels, resourceEnumsDto.resourceTestInputTypesLabels) &&
        Objects.equals(this.systemRoles, resourceEnumsDto.systemRoles) &&
        Objects.equals(this.systemRolesLabels, resourceEnumsDto.systemRolesLabels) &&
        Objects.equals(this.allRoles, resourceEnumsDto.allRoles) &&
        Objects.equals(this.allRolesLabels, resourceEnumsDto.allRolesLabels) &&
        Objects.equals(this.mergeTypes, resourceEnumsDto.mergeTypes) &&
        Objects.equals(this.mergeTypesLabels, resourceEnumsDto.mergeTypesLabels) &&
        Objects.equals(this.mergeSorts, resourceEnumsDto.mergeSorts) &&
        Objects.equals(this.mergeSortsLabels, resourceEnumsDto.mergeSortsLabels) &&
        Objects.equals(this.datasetColumns, resourceEnumsDto.datasetColumns) &&
        Objects.equals(this.datasetColumnsLabels, resourceEnumsDto.datasetColumnsLabels) &&
        Objects.equals(this.indexerMappings, resourceEnumsDto.indexerMappings) &&
        Objects.equals(this.indexerMappingsLabels, resourceEnumsDto.indexerMappingsLabels) &&
        Objects.equals(this.datasets, resourceEnumsDto.datasets) &&
        Objects.equals(this.datasetsLabels, resourceEnumsDto.datasetsLabels) &&
        Objects.equals(this.credentials, resourceEnumsDto.credentials) &&
        Objects.equals(this.credentialsLabels, resourceEnumsDto.credentialsLabels) &&
        Objects.equals(this.roles, resourceEnumsDto.roles) &&
        Objects.equals(this.rolesLabels, resourceEnumsDto.rolesLabels) &&
        Objects.equals(this.tables, resourceEnumsDto.tables) &&
        Objects.equals(this.tablesLabels, resourceEnumsDto.tablesLabels) &&
        Objects.equals(this.entities, resourceEnumsDto.entities) &&
        Objects.equals(this.entitiesLabels, resourceEnumsDto.entitiesLabels) &&
        Objects.equals(this.sources, resourceEnumsDto.sources) &&
        Objects.equals(this.sourcesLabels, resourceEnumsDto.sourcesLabels) &&
        Objects.equals(this.sinks, resourceEnumsDto.sinks) &&
        Objects.equals(this.sinksLabels, resourceEnumsDto.sinksLabels) &&
        Objects.equals(this.indexers, resourceEnumsDto.indexers) &&
        Objects.equals(this.indexersLabels, resourceEnumsDto.indexersLabels) &&
        Objects.equals(this.transformations, resourceEnumsDto.transformations) &&
        Objects.equals(this.transformationsLabels, resourceEnumsDto.transformationsLabels) &&
        Objects.equals(this.pipelines, resourceEnumsDto.pipelines) &&
        Objects.equals(this.pipelinesLabels, resourceEnumsDto.pipelinesLabels) &&
        Objects.equals(this.pipelineProcessors, resourceEnumsDto.pipelineProcessors) &&
        Objects.equals(this.pipelineProcessorsLabels, resourceEnumsDto.pipelineProcessorsLabels) &&
        Objects.equals(this.classifiers, resourceEnumsDto.classifiers) &&
        Objects.equals(this.classifiersLabels, resourceEnumsDto.classifiersLabels) &&
        Objects.equals(this.mergers, resourceEnumsDto.mergers) &&
        Objects.equals(this.mergersLabels, resourceEnumsDto.mergersLabels) &&
        Objects.equals(this.stewards, resourceEnumsDto.stewards) &&
        Objects.equals(this.stewardsLabels, resourceEnumsDto.stewardsLabels) &&
        Objects.equals(this.cronExpressions, resourceEnumsDto.cronExpressions) &&
        Objects.equals(this.cronExpressionsLabels, resourceEnumsDto.cronExpressionsLabels) &&
        Objects.equals(this.tablesEntitiesResources, resourceEnumsDto.tablesEntitiesResources) &&
        Objects.equals(this.tablesEntitiesResourcesLabels, resourceEnumsDto.tablesEntitiesResourcesLabels) &&
        Objects.equals(this.errors, resourceEnumsDto.errors) &&
        Objects.equals(this.messages, resourceEnumsDto.messages);
  }

  @Override
  public int hashCode() {
    return Objects.hash(recordOperations, recordOperationsLabels, entityStatus, entityStatusLabels, intervalTypes, intervalTypesLabels, bucketActions, bucketActionsLabels, bucketConditionTypes, bucketConditionTypesLabels, entityTypes, entityTypesLabels, datasetIdentityTypes, datasetIdentityTypesLabels, datasetDataTypes, datasetDataTypesLabels, columnTypes, columnTypesLabels, columnUIArrayEditors, columnUIArrayEditorsLabels, columnTokens, columnTokensLabels, columnValidations, columnValidationsLabels, textOptions, textOptionsLabels, indexerMappingsTypes, indexerMappingsTypesLabels, indexerMappingMatchingsTypes, indexerMappingMatchingsTypesLabels, bucketSorts, bucketSortsLabels, bucketClassifications, bucketClassificationsLabels, columnErrorPolicies, columnErrorPoliciesLabels, credentialTypes, credentialTypesLabels, transformationTypes, transformationTypesLabels, transformationMappingsTypes, transformationMappingsTypesLabels, resourceTestInputTypes, resourceTestInputTypesLabels, systemRoles, systemRolesLabels, allRoles, allRolesLabels, mergeTypes, mergeTypesLabels, mergeSorts, mergeSortsLabels, datasetColumns, datasetColumnsLabels, indexerMappings, indexerMappingsLabels, datasets, datasetsLabels, credentials, credentialsLabels, roles, rolesLabels, tables, tablesLabels, entities, entitiesLabels, sources, sourcesLabels, sinks, sinksLabels, indexers, indexersLabels, transformations, transformationsLabels, pipelines, pipelinesLabels, pipelineProcessors, pipelineProcessorsLabels, classifiers, classifiersLabels, mergers, mergersLabels, stewards, stewardsLabels, cronExpressions, cronExpressionsLabels, tablesEntitiesResources, tablesEntitiesResourcesLabels, errors, messages);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResourceEnumsDto {\n");
    
    sb.append("    recordOperations: ").append(toIndentedString(recordOperations)).append("\n");
    sb.append("    recordOperationsLabels: ").append(toIndentedString(recordOperationsLabels)).append("\n");
    sb.append("    entityStatus: ").append(toIndentedString(entityStatus)).append("\n");
    sb.append("    entityStatusLabels: ").append(toIndentedString(entityStatusLabels)).append("\n");
    sb.append("    intervalTypes: ").append(toIndentedString(intervalTypes)).append("\n");
    sb.append("    intervalTypesLabels: ").append(toIndentedString(intervalTypesLabels)).append("\n");
    sb.append("    bucketActions: ").append(toIndentedString(bucketActions)).append("\n");
    sb.append("    bucketActionsLabels: ").append(toIndentedString(bucketActionsLabels)).append("\n");
    sb.append("    bucketConditionTypes: ").append(toIndentedString(bucketConditionTypes)).append("\n");
    sb.append("    bucketConditionTypesLabels: ").append(toIndentedString(bucketConditionTypesLabels)).append("\n");
    sb.append("    entityTypes: ").append(toIndentedString(entityTypes)).append("\n");
    sb.append("    entityTypesLabels: ").append(toIndentedString(entityTypesLabels)).append("\n");
    sb.append("    datasetIdentityTypes: ").append(toIndentedString(datasetIdentityTypes)).append("\n");
    sb.append("    datasetIdentityTypesLabels: ").append(toIndentedString(datasetIdentityTypesLabels)).append("\n");
    sb.append("    datasetDataTypes: ").append(toIndentedString(datasetDataTypes)).append("\n");
    sb.append("    datasetDataTypesLabels: ").append(toIndentedString(datasetDataTypesLabels)).append("\n");
    sb.append("    columnTypes: ").append(toIndentedString(columnTypes)).append("\n");
    sb.append("    columnTypesLabels: ").append(toIndentedString(columnTypesLabels)).append("\n");
    sb.append("    columnUIArrayEditors: ").append(toIndentedString(columnUIArrayEditors)).append("\n");
    sb.append("    columnUIArrayEditorsLabels: ").append(toIndentedString(columnUIArrayEditorsLabels)).append("\n");
    sb.append("    columnTokens: ").append(toIndentedString(columnTokens)).append("\n");
    sb.append("    columnTokensLabels: ").append(toIndentedString(columnTokensLabels)).append("\n");
    sb.append("    columnValidations: ").append(toIndentedString(columnValidations)).append("\n");
    sb.append("    columnValidationsLabels: ").append(toIndentedString(columnValidationsLabels)).append("\n");
    sb.append("    textOptions: ").append(toIndentedString(textOptions)).append("\n");
    sb.append("    textOptionsLabels: ").append(toIndentedString(textOptionsLabels)).append("\n");
    sb.append("    indexerMappingsTypes: ").append(toIndentedString(indexerMappingsTypes)).append("\n");
    sb.append("    indexerMappingsTypesLabels: ").append(toIndentedString(indexerMappingsTypesLabels)).append("\n");
    sb.append("    indexerMappingMatchingsTypes: ").append(toIndentedString(indexerMappingMatchingsTypes)).append("\n");
    sb.append("    indexerMappingMatchingsTypesLabels: ").append(toIndentedString(indexerMappingMatchingsTypesLabels)).append("\n");
    sb.append("    bucketSorts: ").append(toIndentedString(bucketSorts)).append("\n");
    sb.append("    bucketSortsLabels: ").append(toIndentedString(bucketSortsLabels)).append("\n");
    sb.append("    bucketClassifications: ").append(toIndentedString(bucketClassifications)).append("\n");
    sb.append("    bucketClassificationsLabels: ").append(toIndentedString(bucketClassificationsLabels)).append("\n");
    sb.append("    columnErrorPolicies: ").append(toIndentedString(columnErrorPolicies)).append("\n");
    sb.append("    columnErrorPoliciesLabels: ").append(toIndentedString(columnErrorPoliciesLabels)).append("\n");
    sb.append("    credentialTypes: ").append(toIndentedString(credentialTypes)).append("\n");
    sb.append("    credentialTypesLabels: ").append(toIndentedString(credentialTypesLabels)).append("\n");
    sb.append("    transformationTypes: ").append(toIndentedString(transformationTypes)).append("\n");
    sb.append("    transformationTypesLabels: ").append(toIndentedString(transformationTypesLabels)).append("\n");
    sb.append("    transformationMappingsTypes: ").append(toIndentedString(transformationMappingsTypes)).append("\n");
    sb.append("    transformationMappingsTypesLabels: ").append(toIndentedString(transformationMappingsTypesLabels)).append("\n");
    sb.append("    resourceTestInputTypes: ").append(toIndentedString(resourceTestInputTypes)).append("\n");
    sb.append("    resourceTestInputTypesLabels: ").append(toIndentedString(resourceTestInputTypesLabels)).append("\n");
    sb.append("    systemRoles: ").append(toIndentedString(systemRoles)).append("\n");
    sb.append("    systemRolesLabels: ").append(toIndentedString(systemRolesLabels)).append("\n");
    sb.append("    allRoles: ").append(toIndentedString(allRoles)).append("\n");
    sb.append("    allRolesLabels: ").append(toIndentedString(allRolesLabels)).append("\n");
    sb.append("    mergeTypes: ").append(toIndentedString(mergeTypes)).append("\n");
    sb.append("    mergeTypesLabels: ").append(toIndentedString(mergeTypesLabels)).append("\n");
    sb.append("    mergeSorts: ").append(toIndentedString(mergeSorts)).append("\n");
    sb.append("    mergeSortsLabels: ").append(toIndentedString(mergeSortsLabels)).append("\n");
    sb.append("    datasetColumns: ").append(toIndentedString(datasetColumns)).append("\n");
    sb.append("    datasetColumnsLabels: ").append(toIndentedString(datasetColumnsLabels)).append("\n");
    sb.append("    indexerMappings: ").append(toIndentedString(indexerMappings)).append("\n");
    sb.append("    indexerMappingsLabels: ").append(toIndentedString(indexerMappingsLabels)).append("\n");
    sb.append("    datasets: ").append(toIndentedString(datasets)).append("\n");
    sb.append("    datasetsLabels: ").append(toIndentedString(datasetsLabels)).append("\n");
    sb.append("    credentials: ").append(toIndentedString(credentials)).append("\n");
    sb.append("    credentialsLabels: ").append(toIndentedString(credentialsLabels)).append("\n");
    sb.append("    roles: ").append(toIndentedString(roles)).append("\n");
    sb.append("    rolesLabels: ").append(toIndentedString(rolesLabels)).append("\n");
    sb.append("    tables: ").append(toIndentedString(tables)).append("\n");
    sb.append("    tablesLabels: ").append(toIndentedString(tablesLabels)).append("\n");
    sb.append("    entities: ").append(toIndentedString(entities)).append("\n");
    sb.append("    entitiesLabels: ").append(toIndentedString(entitiesLabels)).append("\n");
    sb.append("    sources: ").append(toIndentedString(sources)).append("\n");
    sb.append("    sourcesLabels: ").append(toIndentedString(sourcesLabels)).append("\n");
    sb.append("    sinks: ").append(toIndentedString(sinks)).append("\n");
    sb.append("    sinksLabels: ").append(toIndentedString(sinksLabels)).append("\n");
    sb.append("    indexers: ").append(toIndentedString(indexers)).append("\n");
    sb.append("    indexersLabels: ").append(toIndentedString(indexersLabels)).append("\n");
    sb.append("    transformations: ").append(toIndentedString(transformations)).append("\n");
    sb.append("    transformationsLabels: ").append(toIndentedString(transformationsLabels)).append("\n");
    sb.append("    pipelines: ").append(toIndentedString(pipelines)).append("\n");
    sb.append("    pipelinesLabels: ").append(toIndentedString(pipelinesLabels)).append("\n");
    sb.append("    pipelineProcessors: ").append(toIndentedString(pipelineProcessors)).append("\n");
    sb.append("    pipelineProcessorsLabels: ").append(toIndentedString(pipelineProcessorsLabels)).append("\n");
    sb.append("    classifiers: ").append(toIndentedString(classifiers)).append("\n");
    sb.append("    classifiersLabels: ").append(toIndentedString(classifiersLabels)).append("\n");
    sb.append("    mergers: ").append(toIndentedString(mergers)).append("\n");
    sb.append("    mergersLabels: ").append(toIndentedString(mergersLabels)).append("\n");
    sb.append("    stewards: ").append(toIndentedString(stewards)).append("\n");
    sb.append("    stewardsLabels: ").append(toIndentedString(stewardsLabels)).append("\n");
    sb.append("    cronExpressions: ").append(toIndentedString(cronExpressions)).append("\n");
    sb.append("    cronExpressionsLabels: ").append(toIndentedString(cronExpressionsLabels)).append("\n");
    sb.append("    tablesEntitiesResources: ").append(toIndentedString(tablesEntitiesResources)).append("\n");
    sb.append("    tablesEntitiesResourcesLabels: ").append(toIndentedString(tablesEntitiesResourcesLabels)).append("\n");
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("    messages: ").append(toIndentedString(messages)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
