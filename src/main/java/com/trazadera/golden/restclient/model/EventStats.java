/*
 * GOLDEN-API
 * Trazadera Golden API
 *
 * OpenAPI spec version: 16-SNAPSHOT
 * Contact: support@trazadera.com 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.trazadera.golden.restclient.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;
/**
 * Event statistics.
 */
@Schema(description = "Event statistics.")

public class EventStats {
  @SerializedName("sink")
  private String sink = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("stalled")
  private Boolean stalled = null;

  @SerializedName("nextCheck")
  private OffsetDateTime nextCheck = null;

  @SerializedName("eventsCount")
  private Long eventsCount = null;

  @SerializedName("validCount")
  private Long validCount = null;

  @SerializedName("invalidCount")
  private Long invalidCount = null;

  public EventStats sink(String sink) {
    this.sink = sink;
    return this;
  }

   /**
   * Sink identifier.
   * @return sink
  **/
  @Schema(description = "Sink identifier.")
  public String getSink() {
    return sink;
  }

  public void setSink(String sink) {
    this.sink = sink;
  }

  public EventStats description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Description of the sink.
   * @return description
  **/
  @Schema(description = "Description of the sink.")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public EventStats stalled(Boolean stalled) {
    this.stalled = stalled;
    return this;
  }

   /**
   * Flag to indicate if the sink is stalled.
   * @return stalled
  **/
  @Schema(description = "Flag to indicate if the sink is stalled.")
  public Boolean isStalled() {
    return stalled;
  }

  public void setStalled(Boolean stalled) {
    this.stalled = stalled;
  }

  public EventStats nextCheck(OffsetDateTime nextCheck) {
    this.nextCheck = nextCheck;
    return this;
  }

   /**
   * Timestamp in ISO 8601 format for the next check (if sink is stalled).
   * @return nextCheck
  **/
  @Schema(description = "Timestamp in ISO 8601 format for the next check (if sink is stalled).")
  public OffsetDateTime getNextCheck() {
    return nextCheck;
  }

  public void setNextCheck(OffsetDateTime nextCheck) {
    this.nextCheck = nextCheck;
  }

  public EventStats eventsCount(Long eventsCount) {
    this.eventsCount = eventsCount;
    return this;
  }

   /**
   * Total number of events pending to be sunk.
   * @return eventsCount
  **/
  @Schema(description = "Total number of events pending to be sunk.")
  public Long getEventsCount() {
    return eventsCount;
  }

  public void setEventsCount(Long eventsCount) {
    this.eventsCount = eventsCount;
  }

  public EventStats validCount(Long validCount) {
    this.validCount = validCount;
    return this;
  }

   /**
   * Total number of valid events.
   * @return validCount
  **/
  @Schema(description = "Total number of valid events.")
  public Long getValidCount() {
    return validCount;
  }

  public void setValidCount(Long validCount) {
    this.validCount = validCount;
  }

  public EventStats invalidCount(Long invalidCount) {
    this.invalidCount = invalidCount;
    return this;
  }

   /**
   * Total number of invalid events.
   * @return invalidCount
  **/
  @Schema(description = "Total number of invalid events.")
  public Long getInvalidCount() {
    return invalidCount;
  }

  public void setInvalidCount(Long invalidCount) {
    this.invalidCount = invalidCount;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventStats eventStats = (EventStats) o;
    return Objects.equals(this.sink, eventStats.sink) &&
        Objects.equals(this.description, eventStats.description) &&
        Objects.equals(this.stalled, eventStats.stalled) &&
        Objects.equals(this.nextCheck, eventStats.nextCheck) &&
        Objects.equals(this.eventsCount, eventStats.eventsCount) &&
        Objects.equals(this.validCount, eventStats.validCount) &&
        Objects.equals(this.invalidCount, eventStats.invalidCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sink, description, stalled, nextCheck, eventsCount, validCount, invalidCount);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventStats {\n");
    
    sb.append("    sink: ").append(toIndentedString(sink)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    stalled: ").append(toIndentedString(stalled)).append("\n");
    sb.append("    nextCheck: ").append(toIndentedString(nextCheck)).append("\n");
    sb.append("    eventsCount: ").append(toIndentedString(eventsCount)).append("\n");
    sb.append("    validCount: ").append(toIndentedString(validCount)).append("\n");
    sb.append("    invalidCount: ").append(toIndentedString(invalidCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
