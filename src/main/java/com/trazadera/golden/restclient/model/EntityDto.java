/*
 * GOLDEN-API
 * Trazadera Golden API
 *
 * OpenAPI spec version: 15
 * Contact: support@trazadera.com 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.trazadera.golden.restclient.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.trazadera.golden.restclient.model.Dependency;
import com.trazadera.golden.restclient.model.EntityResourceTransformationSinkDto;
import com.trazadera.golden.restclient.model.EntityResourceTransformationSourceDto;
import com.trazadera.golden.restclient.model.Validation;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;import java.util.Map;
import java.util.List;
import java.util.Map;
/**
 * Represents an entity.
 */
@Schema(description = "Represents an entity.")

public class EntityDto {
  @SerializedName("id")
  private String id = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("enabled")
  private Boolean enabled = null;

  @SerializedName("locked")
  private Boolean locked = null;

  @SerializedName("automatic")
  private Boolean automatic = null;

  /**
   * The status of an entity.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    @SerializedName("EMPTY")
    EMPTY("EMPTY"),
    @SerializedName("WORKING")
    WORKING("WORKING"),
    @SerializedName("READY")
    READY("READY"),
    @SerializedName("INCONSISTENT")
    INCONSISTENT("INCONSISTENT"),
    @SerializedName("ERROR")
    ERROR("ERROR");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StatusEnum fromValue(String input) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return StatusEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("status")
  private StatusEnum status = null;

  @SerializedName("dataset")
  private String dataset = null;

  @SerializedName("table")
  private String table = null;

  /**
   * The type of entity.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    @SerializedName("NONE")
    NONE("NONE"),
    @SerializedName("SEARCH")
    SEARCH("SEARCH"),
    @SerializedName("DUPLICATES")
    DUPLICATES("DUPLICATES"),
    @SerializedName("AUTO_DUPLICATES")
    AUTO_DUPLICATES("AUTO_DUPLICATES");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static TypeEnum fromValue(String input) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return TypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("type")
  private TypeEnum type = null;

  @SerializedName("searches")
  private Boolean searches = null;

  @SerializedName("duplicates")
  private Boolean duplicates = null;

  @SerializedName("stewarding")
  private Boolean stewarding = null;

  @SerializedName("indexer")
  private String indexer = null;

  @SerializedName("classifier")
  private String classifier = null;

  @SerializedName("merger")
  private String merger = null;

  @SerializedName("pipeline")
  private String pipeline = null;

  @SerializedName("steward")
  private String steward = null;

  /**
   * Steward cron scheduling type.
   */
  @JsonAdapter(StewardCronTypeEnum.Adapter.class)
  public enum StewardCronTypeEnum {
    @SerializedName("EVERY_5_MINUTES")
    EVERY_5_MINUTES("EVERY_5_MINUTES"),
    @SerializedName("EVERY_15_MINUTES")
    EVERY_15_MINUTES("EVERY_15_MINUTES"),
    @SerializedName("EVERY_30_MINUTES")
    EVERY_30_MINUTES("EVERY_30_MINUTES"),
    @SerializedName("EVERY_HOUR")
    EVERY_HOUR("EVERY_HOUR"),
    @SerializedName("EVERY_DAY_AT_2AM")
    EVERY_DAY_AT_2AM("EVERY_DAY_AT_2AM"),
    @SerializedName("EXPERT")
    EXPERT("EXPERT");

    private String value;

    StewardCronTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StewardCronTypeEnum fromValue(String input) {
      for (StewardCronTypeEnum b : StewardCronTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StewardCronTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StewardCronTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public StewardCronTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return StewardCronTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("stewardCronType")
  private StewardCronTypeEnum stewardCronType = null;

  @SerializedName("stewardCron")
  private String stewardCron = null;

  @SerializedName("recordCount")
  private Long recordCount = null;

  @SerializedName("bucketCount")
  private Long bucketCount = null;

  @SerializedName("duplicateBucketCount")
  private Long duplicateBucketCount = null;

  @SerializedName("indexDuplicateCounts")
  private Map<String, Long> indexDuplicateCounts = null;

  @SerializedName("indexLabels")
  private Map<String, String> indexLabels = null;

  @SerializedName("sources")
  private List<EntityResourceTransformationSourceDto> sources = null;

  @SerializedName("sinks")
  private List<EntityResourceTransformationSinkDto> sinks = null;

  @SerializedName("dependency")
  private Dependency dependency = null;

  @SerializedName("validation")
  private Validation validation = null;

  public EntityDto id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Entity identifier.
   * @return id
  **/
  @Schema(description = "Entity identifier.")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public EntityDto description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Entity description.
   * @return description
  **/
  @Schema(description = "Entity description.")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public EntityDto enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

   /**
   * Enabled flag.
   * @return enabled
  **/
  @Schema(description = "Enabled flag.")
  public Boolean isEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }

  public EntityDto locked(Boolean locked) {
    this.locked = locked;
    return this;
  }

   /**
   * Locked flag.
   * @return locked
  **/
  @Schema(description = "Locked flag.")
  public Boolean isLocked() {
    return locked;
  }

  public void setLocked(Boolean locked) {
    this.locked = locked;
  }

  public EntityDto automatic(Boolean automatic) {
    this.automatic = automatic;
    return this;
  }

   /**
   * Automatic synchronization flag.
   * @return automatic
  **/
  @Schema(description = "Automatic synchronization flag.")
  public Boolean isAutomatic() {
    return automatic;
  }

  public void setAutomatic(Boolean automatic) {
    this.automatic = automatic;
  }

  public EntityDto status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * The status of an entity.
   * @return status
  **/
  @Schema(description = "The status of an entity.")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  public EntityDto dataset(String dataset) {
    this.dataset = dataset;
    return this;
  }

   /**
   * Associated dataset.
   * @return dataset
  **/
  @Schema(description = "Associated dataset.")
  public String getDataset() {
    return dataset;
  }

  public void setDataset(String dataset) {
    this.dataset = dataset;
  }

  public EntityDto table(String table) {
    this.table = table;
    return this;
  }

   /**
   * Associated table.
   * @return table
  **/
  @Schema(description = "Associated table.")
  public String getTable() {
    return table;
  }

  public void setTable(String table) {
    this.table = table;
  }

  public EntityDto type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * The type of entity.
   * @return type
  **/
  @Schema(description = "The type of entity.")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public EntityDto searches(Boolean searches) {
    this.searches = searches;
    return this;
  }

   /**
   * Search supported flag.
   * @return searches
  **/
  @Schema(description = "Search supported flag.")
  public Boolean isSearches() {
    return searches;
  }

  public void setSearches(Boolean searches) {
    this.searches = searches;
  }

  public EntityDto duplicates(Boolean duplicates) {
    this.duplicates = duplicates;
    return this;
  }

   /**
   * Duplicates supported flag.
   * @return duplicates
  **/
  @Schema(description = "Duplicates supported flag.")
  public Boolean isDuplicates() {
    return duplicates;
  }

  public void setDuplicates(Boolean duplicates) {
    this.duplicates = duplicates;
  }

  public EntityDto stewarding(Boolean stewarding) {
    this.stewarding = stewarding;
    return this;
  }

   /**
   * Steward supported flag.
   * @return stewarding
  **/
  @Schema(description = "Steward supported flag.")
  public Boolean isStewarding() {
    return stewarding;
  }

  public void setStewarding(Boolean stewarding) {
    this.stewarding = stewarding;
  }

  public EntityDto indexer(String indexer) {
    this.indexer = indexer;
    return this;
  }

   /**
   * Associated indexer.
   * @return indexer
  **/
  @Schema(description = "Associated indexer.")
  public String getIndexer() {
    return indexer;
  }

  public void setIndexer(String indexer) {
    this.indexer = indexer;
  }

  public EntityDto classifier(String classifier) {
    this.classifier = classifier;
    return this;
  }

   /**
   * Associated classifier.
   * @return classifier
  **/
  @Schema(description = "Associated classifier.")
  public String getClassifier() {
    return classifier;
  }

  public void setClassifier(String classifier) {
    this.classifier = classifier;
  }

  public EntityDto merger(String merger) {
    this.merger = merger;
    return this;
  }

   /**
   * Associated merger.
   * @return merger
  **/
  @Schema(description = "Associated merger.")
  public String getMerger() {
    return merger;
  }

  public void setMerger(String merger) {
    this.merger = merger;
  }

  public EntityDto pipeline(String pipeline) {
    this.pipeline = pipeline;
    return this;
  }

   /**
   * Associated pipeline.
   * @return pipeline
  **/
  @Schema(description = "Associated pipeline.")
  public String getPipeline() {
    return pipeline;
  }

  public void setPipeline(String pipeline) {
    this.pipeline = pipeline;
  }

  public EntityDto steward(String steward) {
    this.steward = steward;
    return this;
  }

   /**
   * Associated steward.
   * @return steward
  **/
  @Schema(description = "Associated steward.")
  public String getSteward() {
    return steward;
  }

  public void setSteward(String steward) {
    this.steward = steward;
  }

  public EntityDto stewardCronType(StewardCronTypeEnum stewardCronType) {
    this.stewardCronType = stewardCronType;
    return this;
  }

   /**
   * Steward cron scheduling type.
   * @return stewardCronType
  **/
  @Schema(description = "Steward cron scheduling type.")
  public StewardCronTypeEnum getStewardCronType() {
    return stewardCronType;
  }

  public void setStewardCronType(StewardCronTypeEnum stewardCronType) {
    this.stewardCronType = stewardCronType;
  }

  public EntityDto stewardCron(String stewardCron) {
    this.stewardCron = stewardCron;
    return this;
  }

   /**
   * Steward cron scheduling expression.
   * @return stewardCron
  **/
  @Schema(description = "Steward cron scheduling expression.")
  public String getStewardCron() {
    return stewardCron;
  }

  public void setStewardCron(String stewardCron) {
    this.stewardCron = stewardCron;
  }

  public EntityDto recordCount(Long recordCount) {
    this.recordCount = recordCount;
    return this;
  }

   /**
   * Number of managed records.
   * @return recordCount
  **/
  @Schema(description = "Number of managed records.")
  public Long getRecordCount() {
    return recordCount;
  }

  public void setRecordCount(Long recordCount) {
    this.recordCount = recordCount;
  }

  public EntityDto bucketCount(Long bucketCount) {
    this.bucketCount = bucketCount;
    return this;
  }

   /**
   * Number of managed buckets.
   * @return bucketCount
  **/
  @Schema(description = "Number of managed buckets.")
  public Long getBucketCount() {
    return bucketCount;
  }

  public void setBucketCount(Long bucketCount) {
    this.bucketCount = bucketCount;
  }

  public EntityDto duplicateBucketCount(Long duplicateBucketCount) {
    this.duplicateBucketCount = duplicateBucketCount;
    return this;
  }

   /**
   * Total number of potential duplicate buckets.
   * @return duplicateBucketCount
  **/
  @Schema(description = "Total number of potential duplicate buckets.")
  public Long getDuplicateBucketCount() {
    return duplicateBucketCount;
  }

  public void setDuplicateBucketCount(Long duplicateBucketCount) {
    this.duplicateBucketCount = duplicateBucketCount;
  }

  public EntityDto indexDuplicateCounts(Map<String, Long> indexDuplicateCounts) {
    this.indexDuplicateCounts = indexDuplicateCounts;
    return this;
  }

  public EntityDto putIndexDuplicateCountsItem(String key, Long indexDuplicateCountsItem) {
    if (this.indexDuplicateCounts == null) {
      this.indexDuplicateCounts = new HashMap<String, Long>();
    }
    this.indexDuplicateCounts.put(key, indexDuplicateCountsItem);
    return this;
  }

   /**
   * Map of indexes and number of potential duplicate buckets per index.
   * @return indexDuplicateCounts
  **/
  @Schema(description = "Map of indexes and number of potential duplicate buckets per index.")
  public Map<String, Long> getIndexDuplicateCounts() {
    return indexDuplicateCounts;
  }

  public void setIndexDuplicateCounts(Map<String, Long> indexDuplicateCounts) {
    this.indexDuplicateCounts = indexDuplicateCounts;
  }

  public EntityDto indexLabels(Map<String, String> indexLabels) {
    this.indexLabels = indexLabels;
    return this;
  }

  public EntityDto putIndexLabelsItem(String key, String indexLabelsItem) {
    if (this.indexLabels == null) {
      this.indexLabels = new HashMap<String, String>();
    }
    this.indexLabels.put(key, indexLabelsItem);
    return this;
  }

   /**
   * Index description.
   * @return indexLabels
  **/
  @Schema(description = "Index description.")
  public Map<String, String> getIndexLabels() {
    return indexLabels;
  }

  public void setIndexLabels(Map<String, String> indexLabels) {
    this.indexLabels = indexLabels;
  }

  public EntityDto sources(List<EntityResourceTransformationSourceDto> sources) {
    this.sources = sources;
    return this;
  }

  public EntityDto addSourcesItem(EntityResourceTransformationSourceDto sourcesItem) {
    if (this.sources == null) {
      this.sources = new ArrayList<EntityResourceTransformationSourceDto>();
    }
    this.sources.add(sourcesItem);
    return this;
  }

   /**
   * Sources.
   * @return sources
  **/
  @Schema(description = "Sources.")
  public List<EntityResourceTransformationSourceDto> getSources() {
    return sources;
  }

  public void setSources(List<EntityResourceTransformationSourceDto> sources) {
    this.sources = sources;
  }

  public EntityDto sinks(List<EntityResourceTransformationSinkDto> sinks) {
    this.sinks = sinks;
    return this;
  }

  public EntityDto addSinksItem(EntityResourceTransformationSinkDto sinksItem) {
    if (this.sinks == null) {
      this.sinks = new ArrayList<EntityResourceTransformationSinkDto>();
    }
    this.sinks.add(sinksItem);
    return this;
  }

   /**
   * Sinks.
   * @return sinks
  **/
  @Schema(description = "Sinks.")
  public List<EntityResourceTransformationSinkDto> getSinks() {
    return sinks;
  }

  public void setSinks(List<EntityResourceTransformationSinkDto> sinks) {
    this.sinks = sinks;
  }

  public EntityDto dependency(Dependency dependency) {
    this.dependency = dependency;
    return this;
  }

   /**
   * Get dependency
   * @return dependency
  **/
  @Schema(description = "")
  public Dependency getDependency() {
    return dependency;
  }

  public void setDependency(Dependency dependency) {
    this.dependency = dependency;
  }

  public EntityDto validation(Validation validation) {
    this.validation = validation;
    return this;
  }

   /**
   * Get validation
   * @return validation
  **/
  @Schema(description = "")
  public Validation getValidation() {
    return validation;
  }

  public void setValidation(Validation validation) {
    this.validation = validation;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EntityDto entityDto = (EntityDto) o;
    return Objects.equals(this.id, entityDto.id) &&
        Objects.equals(this.description, entityDto.description) &&
        Objects.equals(this.enabled, entityDto.enabled) &&
        Objects.equals(this.locked, entityDto.locked) &&
        Objects.equals(this.automatic, entityDto.automatic) &&
        Objects.equals(this.status, entityDto.status) &&
        Objects.equals(this.dataset, entityDto.dataset) &&
        Objects.equals(this.table, entityDto.table) &&
        Objects.equals(this.type, entityDto.type) &&
        Objects.equals(this.searches, entityDto.searches) &&
        Objects.equals(this.duplicates, entityDto.duplicates) &&
        Objects.equals(this.stewarding, entityDto.stewarding) &&
        Objects.equals(this.indexer, entityDto.indexer) &&
        Objects.equals(this.classifier, entityDto.classifier) &&
        Objects.equals(this.merger, entityDto.merger) &&
        Objects.equals(this.pipeline, entityDto.pipeline) &&
        Objects.equals(this.steward, entityDto.steward) &&
        Objects.equals(this.stewardCronType, entityDto.stewardCronType) &&
        Objects.equals(this.stewardCron, entityDto.stewardCron) &&
        Objects.equals(this.recordCount, entityDto.recordCount) &&
        Objects.equals(this.bucketCount, entityDto.bucketCount) &&
        Objects.equals(this.duplicateBucketCount, entityDto.duplicateBucketCount) &&
        Objects.equals(this.indexDuplicateCounts, entityDto.indexDuplicateCounts) &&
        Objects.equals(this.indexLabels, entityDto.indexLabels) &&
        Objects.equals(this.sources, entityDto.sources) &&
        Objects.equals(this.sinks, entityDto.sinks) &&
        Objects.equals(this.dependency, entityDto.dependency) &&
        Objects.equals(this.validation, entityDto.validation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, description, enabled, locked, automatic, status, dataset, table, type, searches, duplicates, stewarding, indexer, classifier, merger, pipeline, steward, stewardCronType, stewardCron, recordCount, bucketCount, duplicateBucketCount, indexDuplicateCounts, indexLabels, sources, sinks, dependency, validation);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EntityDto {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    locked: ").append(toIndentedString(locked)).append("\n");
    sb.append("    automatic: ").append(toIndentedString(automatic)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    dataset: ").append(toIndentedString(dataset)).append("\n");
    sb.append("    table: ").append(toIndentedString(table)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    searches: ").append(toIndentedString(searches)).append("\n");
    sb.append("    duplicates: ").append(toIndentedString(duplicates)).append("\n");
    sb.append("    stewarding: ").append(toIndentedString(stewarding)).append("\n");
    sb.append("    indexer: ").append(toIndentedString(indexer)).append("\n");
    sb.append("    classifier: ").append(toIndentedString(classifier)).append("\n");
    sb.append("    merger: ").append(toIndentedString(merger)).append("\n");
    sb.append("    pipeline: ").append(toIndentedString(pipeline)).append("\n");
    sb.append("    steward: ").append(toIndentedString(steward)).append("\n");
    sb.append("    stewardCronType: ").append(toIndentedString(stewardCronType)).append("\n");
    sb.append("    stewardCron: ").append(toIndentedString(stewardCron)).append("\n");
    sb.append("    recordCount: ").append(toIndentedString(recordCount)).append("\n");
    sb.append("    bucketCount: ").append(toIndentedString(bucketCount)).append("\n");
    sb.append("    duplicateBucketCount: ").append(toIndentedString(duplicateBucketCount)).append("\n");
    sb.append("    indexDuplicateCounts: ").append(toIndentedString(indexDuplicateCounts)).append("\n");
    sb.append("    indexLabels: ").append(toIndentedString(indexLabels)).append("\n");
    sb.append("    sources: ").append(toIndentedString(sources)).append("\n");
    sb.append("    sinks: ").append(toIndentedString(sinks)).append("\n");
    sb.append("    dependency: ").append(toIndentedString(dependency)).append("\n");
    sb.append("    validation: ").append(toIndentedString(validation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
