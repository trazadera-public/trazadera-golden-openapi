/*
 * GOLDEN-API
 * Trazadera Golden API
 *
 * OpenAPI spec version: 15
 * Contact: support@trazadera.com 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.trazadera.golden.restclient.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;
/**
 * Represents an entity source.
 */
@Schema(description = "Represents an entity source.")

public class EntityResourceTransformationSourceDto {
  @SerializedName("resource")
  private String resource = null;

  @SerializedName("transformation")
  private String transformation = null;

  /**
   * Cron scheduling type.
   */
  @JsonAdapter(CronTypeEnum.Adapter.class)
  public enum CronTypeEnum {
    @SerializedName("EVERY_5_MINUTES")
    EVERY_5_MINUTES("EVERY_5_MINUTES"),
    @SerializedName("EVERY_15_MINUTES")
    EVERY_15_MINUTES("EVERY_15_MINUTES"),
    @SerializedName("EVERY_30_MINUTES")
    EVERY_30_MINUTES("EVERY_30_MINUTES"),
    @SerializedName("EVERY_HOUR")
    EVERY_HOUR("EVERY_HOUR"),
    @SerializedName("EVERY_DAY_AT_2AM")
    EVERY_DAY_AT_2AM("EVERY_DAY_AT_2AM"),
    @SerializedName("EXPERT")
    EXPERT("EXPERT");

    private String value;

    CronTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static CronTypeEnum fromValue(String input) {
      for (CronTypeEnum b : CronTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<CronTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CronTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public CronTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return CronTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("cronType")
  private CronTypeEnum cronType = null;

  @SerializedName("cron")
  private String cron = null;

  @SerializedName("incremental")
  private Boolean incremental = null;

  @SerializedName("lastExecution")
  private OffsetDateTime lastExecution = null;

  public EntityResourceTransformationSourceDto resource(String resource) {
    this.resource = resource;
    return this;
  }

   /**
   * Resource identifier.
   * @return resource
  **/
  @Schema(description = "Resource identifier.")
  public String getResource() {
    return resource;
  }

  public void setResource(String resource) {
    this.resource = resource;
  }

  public EntityResourceTransformationSourceDto transformation(String transformation) {
    this.transformation = transformation;
    return this;
  }

   /**
   * Optional transformation identifier.
   * @return transformation
  **/
  @Schema(description = "Optional transformation identifier.")
  public String getTransformation() {
    return transformation;
  }

  public void setTransformation(String transformation) {
    this.transformation = transformation;
  }

  public EntityResourceTransformationSourceDto cronType(CronTypeEnum cronType) {
    this.cronType = cronType;
    return this;
  }

   /**
   * Cron scheduling type.
   * @return cronType
  **/
  @Schema(description = "Cron scheduling type.")
  public CronTypeEnum getCronType() {
    return cronType;
  }

  public void setCronType(CronTypeEnum cronType) {
    this.cronType = cronType;
  }

  public EntityResourceTransformationSourceDto cron(String cron) {
    this.cron = cron;
    return this;
  }

   /**
   * Cron scheduling expression.
   * @return cron
  **/
  @Schema(description = "Cron scheduling expression.")
  public String getCron() {
    return cron;
  }

  public void setCron(String cron) {
    this.cron = cron;
  }

  public EntityResourceTransformationSourceDto incremental(Boolean incremental) {
    this.incremental = incremental;
    return this;
  }

   /**
   * Source incremental loading.
   * @return incremental
  **/
  @Schema(description = "Source incremental loading.")
  public Boolean isIncremental() {
    return incremental;
  }

  public void setIncremental(Boolean incremental) {
    this.incremental = incremental;
  }

  public EntityResourceTransformationSourceDto lastExecution(OffsetDateTime lastExecution) {
    this.lastExecution = lastExecution;
    return this;
  }

   /**
   * Source last execution.
   * @return lastExecution
  **/
  @Schema(description = "Source last execution.")
  public OffsetDateTime getLastExecution() {
    return lastExecution;
  }

  public void setLastExecution(OffsetDateTime lastExecution) {
    this.lastExecution = lastExecution;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EntityResourceTransformationSourceDto entityResourceTransformationSourceDto = (EntityResourceTransformationSourceDto) o;
    return Objects.equals(this.resource, entityResourceTransformationSourceDto.resource) &&
        Objects.equals(this.transformation, entityResourceTransformationSourceDto.transformation) &&
        Objects.equals(this.cronType, entityResourceTransformationSourceDto.cronType) &&
        Objects.equals(this.cron, entityResourceTransformationSourceDto.cron) &&
        Objects.equals(this.incremental, entityResourceTransformationSourceDto.incremental) &&
        Objects.equals(this.lastExecution, entityResourceTransformationSourceDto.lastExecution);
  }

  @Override
  public int hashCode() {
    return Objects.hash(resource, transformation, cronType, cron, incremental, lastExecution);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EntityResourceTransformationSourceDto {\n");
    
    sb.append("    resource: ").append(toIndentedString(resource)).append("\n");
    sb.append("    transformation: ").append(toIndentedString(transformation)).append("\n");
    sb.append("    cronType: ").append(toIndentedString(cronType)).append("\n");
    sb.append("    cron: ").append(toIndentedString(cron)).append("\n");
    sb.append("    incremental: ").append(toIndentedString(incremental)).append("\n");
    sb.append("    lastExecution: ").append(toIndentedString(lastExecution)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
