/*
 * GOLDEN-API
 * Trazadera Golden API
 *
 * OpenAPI spec version: 15
 * Contact: support@trazadera.com 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.trazadera.golden.restclient.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Column UI guidelines. Used when creating the administration interface.
 */
@Schema(description = "Column UI guidelines. Used when creating the administration interface.")

public class ColumnUI {
  @SerializedName("gridColumns")
  private Integer gridColumns = 4;

  @SerializedName("newline")
  private Boolean newline = false;

  /**
   * Visualization style for arrays.
   */
  @JsonAdapter(ArrayEditorEnum.Adapter.class)
  public enum ArrayEditorEnum {
    @SerializedName("DEFAULT")
    DEFAULT("DEFAULT"),
    @SerializedName("TABLE")
    TABLE("TABLE"),
    @SerializedName("TABS")
    TABS("TABS"),
    @SerializedName("TABS_TOP")
    TABS_TOP("TABS_TOP"),
    @SerializedName("GRID")
    GRID("GRID");

    private String value;

    ArrayEditorEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ArrayEditorEnum fromValue(String input) {
      for (ArrayEditorEnum b : ArrayEditorEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ArrayEditorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ArrayEditorEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public ArrayEditorEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return ArrayEditorEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("arrayEditor")
  private ArrayEditorEnum arrayEditor = ArrayEditorEnum.DEFAULT;

  public ColumnUI gridColumns(Integer gridColumns) {
    this.gridColumns = gridColumns;
    return this;
  }

   /**
   * Number of grids columns (out of 12) to use for this editor
   * @return gridColumns
  **/
  @Schema(description = "Number of grids columns (out of 12) to use for this editor")
  public Integer getGridColumns() {
    return gridColumns;
  }

  public void setGridColumns(Integer gridColumns) {
    this.gridColumns = gridColumns;
  }

  public ColumnUI newline(Boolean newline) {
    this.newline = newline;
    return this;
  }

   /**
   * Insert a new line after this editor
   * @return newline
  **/
  @Schema(description = "Insert a new line after this editor")
  public Boolean isNewline() {
    return newline;
  }

  public void setNewline(Boolean newline) {
    this.newline = newline;
  }

  public ColumnUI arrayEditor(ArrayEditorEnum arrayEditor) {
    this.arrayEditor = arrayEditor;
    return this;
  }

   /**
   * Visualization style for arrays.
   * @return arrayEditor
  **/
  @Schema(description = "Visualization style for arrays.")
  public ArrayEditorEnum getArrayEditor() {
    return arrayEditor;
  }

  public void setArrayEditor(ArrayEditorEnum arrayEditor) {
    this.arrayEditor = arrayEditor;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ColumnUI columnUI = (ColumnUI) o;
    return Objects.equals(this.gridColumns, columnUI.gridColumns) &&
        Objects.equals(this.newline, columnUI.newline) &&
        Objects.equals(this.arrayEditor, columnUI.arrayEditor);
  }

  @Override
  public int hashCode() {
    return Objects.hash(gridColumns, newline, arrayEditor);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ColumnUI {\n");
    
    sb.append("    gridColumns: ").append(toIndentedString(gridColumns)).append("\n");
    sb.append("    newline: ").append(toIndentedString(newline)).append("\n");
    sb.append("    arrayEditor: ").append(toIndentedString(arrayEditor)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
