/*
 * GOLDEN-API
 * Trazadera Golden API
 *
 * OpenAPI spec version: v1
 * Contact: support@trazadera.com 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.trazadera.golden.restclient.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.Map;
/**
 * Represents a record search request
 */
@Schema(description = "Represents a record search request")

public class GoldenSearchRequestDto {
  @SerializedName("transformation")
  private String transformation = null;

  @SerializedName("record")
  private Map record = null;

  @SerializedName("pageNumber")
  private Integer pageNumber = null;

  @SerializedName("pageSize")
  private Integer pageSize = null;

  public GoldenSearchRequestDto transformation(String transformation) {
    this.transformation = transformation;
    return this;
  }

   /**
   * Optional transformation name. If indicated, the transformation must exist and will be applied to the search record before searching.
   * @return transformation
  **/
  @Schema(description = "Optional transformation name. If indicated, the transformation must exist and will be applied to the search record before searching.")
  public String getTransformation() {
    return transformation;
  }

  public void setTransformation(String transformation) {
    this.transformation = transformation;
  }

  public GoldenSearchRequestDto record(Map record) {
    this.record = record;
    return this;
  }

   /**
   * Get record
   * @return record
  **/
  @Schema(required = true, description = "")
  public Map getRecord() {
    return record;
  }

  public void setRecord(Map record) {
    this.record = record;
  }

  public GoldenSearchRequestDto pageNumber(Integer pageNumber) {
    this.pageNumber = pageNumber;
    return this;
  }

   /**
   * Optional page number for multiple results. Default is 0.
   * @return pageNumber
  **/
  @Schema(description = "Optional page number for multiple results. Default is 0.")
  public Integer getPageNumber() {
    return pageNumber;
  }

  public void setPageNumber(Integer pageNumber) {
    this.pageNumber = pageNumber;
  }

  public GoldenSearchRequestDto pageSize(Integer pageSize) {
    this.pageSize = pageSize;
    return this;
  }

   /**
   * Optional page size for multiple results. Default is 10.
   * @return pageSize
  **/
  @Schema(description = "Optional page size for multiple results. Default is 10.")
  public Integer getPageSize() {
    return pageSize;
  }

  public void setPageSize(Integer pageSize) {
    this.pageSize = pageSize;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoldenSearchRequestDto goldenSearchRequestDto = (GoldenSearchRequestDto) o;
    return Objects.equals(this.transformation, goldenSearchRequestDto.transformation) &&
        Objects.equals(this.record, goldenSearchRequestDto.record) &&
        Objects.equals(this.pageNumber, goldenSearchRequestDto.pageNumber) &&
        Objects.equals(this.pageSize, goldenSearchRequestDto.pageSize);
  }

  @Override
  public int hashCode() {
    return Objects.hash(transformation, record, pageNumber, pageSize);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoldenSearchRequestDto {\n");
    
    sb.append("    transformation: ").append(toIndentedString(transformation)).append("\n");
    sb.append("    record: ").append(toIndentedString(record)).append("\n");
    sb.append("    pageNumber: ").append(toIndentedString(pageNumber)).append("\n");
    sb.append("    pageSize: ").append(toIndentedString(pageSize)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
