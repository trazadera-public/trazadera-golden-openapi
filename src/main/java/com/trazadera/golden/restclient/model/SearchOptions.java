/*
 * GOLDEN-API
 * Trazadera Golden API
 *
 * OpenAPI spec version: 15
 * Contact: support@trazadera.com 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.trazadera.golden.restclient.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.trazadera.golden.restclient.model.SearchOptionsMaximumDuration;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Search options
 */
@Schema(description = "Search options")

public class SearchOptions {
  @SerializedName("identity")
  private Boolean identity = null;

  /**
   * Types of exact search.
   */
  @JsonAdapter(ExactEnum.Adapter.class)
  public enum ExactEnum {
    @SerializedName("EXACT")
    EXACT("EXACT"),
    @SerializedName("PREFIX")
    PREFIX("PREFIX"),
    @SerializedName("SUFFIX")
    SUFFIX("SUFFIX"),
    @SerializedName("INFIX")
    INFIX("INFIX");

    private String value;

    ExactEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ExactEnum fromValue(String input) {
      for (ExactEnum b : ExactEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ExactEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ExactEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public ExactEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return ExactEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("exact")
  private ExactEnum exact = null;

  @SerializedName("fuzzy")
  private Boolean fuzzy = null;

  @SerializedName("fuzzyMaximumTypos")
  private Integer fuzzyMaximumTypos = null;

  @SerializedName("maximumResults")
  private Integer maximumResults = null;

  @SerializedName("maximumDuration")
  private SearchOptionsMaximumDuration maximumDuration = null;

  @SerializedName("exhaustive")
  private Boolean exhaustive = null;

  public SearchOptions identity(Boolean identity) {
    this.identity = identity;
    return this;
  }

   /**
   * Search by identity flag. If true and record identity is available, the search is done by identity. If false, the search is done by using indexes. Default is true.
   * @return identity
  **/
  @Schema(description = "Search by identity flag. If true and record identity is available, the search is done by identity. If false, the search is done by using indexes. Default is true.")
  public Boolean isIdentity() {
    return identity;
  }

  public void setIdentity(Boolean identity) {
    this.identity = identity;
  }

  public SearchOptions exact(ExactEnum exact) {
    this.exact = exact;
    return this;
  }

   /**
   * Types of exact search.
   * @return exact
  **/
  @Schema(description = "Types of exact search.")
  public ExactEnum getExact() {
    return exact;
  }

  public void setExact(ExactEnum exact) {
    this.exact = exact;
  }

  public SearchOptions fuzzy(Boolean fuzzy) {
    this.fuzzy = fuzzy;
    return this;
  }

   /**
   * Fuzzy search flag. If true, the search is done using fuzzy search. If false, exact search is done using indicated type. Default is true.
   * @return fuzzy
  **/
  @Schema(description = "Fuzzy search flag. If true, the search is done using fuzzy search. If false, exact search is done using indicated type. Default is true.")
  public Boolean isFuzzy() {
    return fuzzy;
  }

  public void setFuzzy(Boolean fuzzy) {
    this.fuzzy = fuzzy;
  }

  public SearchOptions fuzzyMaximumTypos(Integer fuzzyMaximumTypos) {
    this.fuzzyMaximumTypos = fuzzyMaximumTypos;
    return this;
  }

   /**
   * Fuzzy search maximum number of typographical errors considered during the search. Default is 2.
   * @return fuzzyMaximumTypos
  **/
  @Schema(description = "Fuzzy search maximum number of typographical errors considered during the search. Default is 2.")
  public Integer getFuzzyMaximumTypos() {
    return fuzzyMaximumTypos;
  }

  public void setFuzzyMaximumTypos(Integer fuzzyMaximumTypos) {
    this.fuzzyMaximumTypos = fuzzyMaximumTypos;
  }

  public SearchOptions maximumResults(Integer maximumResults) {
    this.maximumResults = maximumResults;
    return this;
  }

   /**
   * Maximum number of search results. Default is -1 (no limits).
   * @return maximumResults
  **/
  @Schema(description = "Maximum number of search results. Default is -1 (no limits).")
  public Integer getMaximumResults() {
    return maximumResults;
  }

  public void setMaximumResults(Integer maximumResults) {
    this.maximumResults = maximumResults;
  }

  public SearchOptions maximumDuration(SearchOptionsMaximumDuration maximumDuration) {
    this.maximumDuration = maximumDuration;
    return this;
  }

   /**
   * Get maximumDuration
   * @return maximumDuration
  **/
  @Schema(description = "")
  public SearchOptionsMaximumDuration getMaximumDuration() {
    return maximumDuration;
  }

  public void setMaximumDuration(SearchOptionsMaximumDuration maximumDuration) {
    this.maximumDuration = maximumDuration;
  }

  public SearchOptions exhaustive(Boolean exhaustive) {
    this.exhaustive = exhaustive;
    return this;
  }

   /**
   * Whether to conduct exhaustive search or not. If false, the first high-quality result is returned. Default is true.
   * @return exhaustive
  **/
  @Schema(description = "Whether to conduct exhaustive search or not. If false, the first high-quality result is returned. Default is true.")
  public Boolean isExhaustive() {
    return exhaustive;
  }

  public void setExhaustive(Boolean exhaustive) {
    this.exhaustive = exhaustive;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SearchOptions searchOptions = (SearchOptions) o;
    return Objects.equals(this.identity, searchOptions.identity) &&
        Objects.equals(this.exact, searchOptions.exact) &&
        Objects.equals(this.fuzzy, searchOptions.fuzzy) &&
        Objects.equals(this.fuzzyMaximumTypos, searchOptions.fuzzyMaximumTypos) &&
        Objects.equals(this.maximumResults, searchOptions.maximumResults) &&
        Objects.equals(this.maximumDuration, searchOptions.maximumDuration) &&
        Objects.equals(this.exhaustive, searchOptions.exhaustive);
  }

  @Override
  public int hashCode() {
    return Objects.hash(identity, exact, fuzzy, fuzzyMaximumTypos, maximumResults, maximumDuration, exhaustive);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SearchOptions {\n");
    
    sb.append("    identity: ").append(toIndentedString(identity)).append("\n");
    sb.append("    exact: ").append(toIndentedString(exact)).append("\n");
    sb.append("    fuzzy: ").append(toIndentedString(fuzzy)).append("\n");
    sb.append("    fuzzyMaximumTypos: ").append(toIndentedString(fuzzyMaximumTypos)).append("\n");
    sb.append("    maximumResults: ").append(toIndentedString(maximumResults)).append("\n");
    sb.append("    maximumDuration: ").append(toIndentedString(maximumDuration)).append("\n");
    sb.append("    exhaustive: ").append(toIndentedString(exhaustive)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
