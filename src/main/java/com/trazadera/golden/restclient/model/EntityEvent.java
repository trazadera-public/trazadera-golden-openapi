/*
 * GOLDEN-API
 * Trazadera Golden API
 *
 * OpenAPI spec version: 1.9.0
 * Contact: support@trazadera.com 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.trazadera.golden.restclient.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.trazadera.golden.restclient.model.Record;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.OffsetDateTime;
/**
 * Event to notify changes in an entity.
 */
@Schema(description = "Event to notify changes in an entity.")

public class EntityEvent {
  @SerializedName("id")
  private String id = null;

  /**
   * Event type.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    @SerializedName("RECORD_DELETE")
    DELETE("RECORD_DELETE"),
    @SerializedName("RECORD_UPDATE")
    UPDATE("RECORD_UPDATE"),
    @SerializedName("RECORD_INSERT")
    INSERT("RECORD_INSERT");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static TypeEnum fromValue(String input) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return TypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("type")
  private TypeEnum type = null;

  @SerializedName("timestamp")
  private OffsetDateTime timestamp = null;

  @SerializedName("entity")
  private String entity = null;

  @SerializedName("records")
  private List<Record> records = null;

  public EntityEvent id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Event unique identifier.
   * @return id
  **/
  @Schema(description = "Event unique identifier.")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public EntityEvent type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Event type.
   * @return type
  **/
  @Schema(description = "Event type.")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public EntityEvent timestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
    return this;
  }

   /**
   * Event timestamp.
   * @return timestamp
  **/
  @Schema(description = "Event timestamp.")
  public OffsetDateTime getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
  }

  public EntityEvent entity(String entity) {
    this.entity = entity;
    return this;
  }

   /**
   * Entity identifier.
   * @return entity
  **/
  @Schema(description = "Entity identifier.")
  public String getEntity() {
    return entity;
  }

  public void setEntity(String entity) {
    this.entity = entity;
  }

  public EntityEvent records(List<Record> records) {
    this.records = records;
    return this;
  }

  public EntityEvent addRecordsItem(Record recordsItem) {
    if (this.records == null) {
      this.records = new ArrayList<Record>();
    }
    this.records.add(recordsItem);
    return this;
  }

   /**
   * Associated records.
   * @return records
  **/
  @Schema(description = "Associated records.")
  public List<Record> getRecords() {
    return records;
  }

  public void setRecords(List<Record> records) {
    this.records = records;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EntityEvent entityEvent = (EntityEvent) o;
    return Objects.equals(this.id, entityEvent.id) &&
        Objects.equals(this.type, entityEvent.type) &&
        Objects.equals(this.timestamp, entityEvent.timestamp) &&
        Objects.equals(this.entity, entityEvent.entity) &&
        Objects.equals(this.records, entityEvent.records);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, type, timestamp, entity, records);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EntityEvent {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    entity: ").append(toIndentedString(entity)).append("\n");
    sb.append("    records: ").append(toIndentedString(records)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
