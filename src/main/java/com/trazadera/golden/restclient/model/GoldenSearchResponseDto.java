/*
 * GOLDEN-API
 * Trazadera Golden API
 *
 * OpenAPI spec version: v1
 * Contact: support@trazadera.com 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.trazadera.golden.restclient.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.trazadera.golden.restclient.model.EntityDto;
import com.trazadera.golden.restclient.model.PageDto;
import com.trazadera.golden.restclient.model.Record;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
/**
 * Represents found records
 */
@Schema(description = "Represents found records")

public class GoldenSearchResponseDto {
  @SerializedName("entity")
  private EntityDto entity = null;

  @SerializedName("search")
  private Map<String, Object> search = null;

  @SerializedName("result")
  private List<Record> result = null;

  @SerializedName("count")
  private Integer count = null;

  @SerializedName("page")
  private PageDto page = null;

  @SerializedName("errors")
  private List<String> errors = null;

  @SerializedName("messages")
  private List<String> messages = null;

  public GoldenSearchResponseDto entity(EntityDto entity) {
    this.entity = entity;
    return this;
  }

   /**
   * Get entity
   * @return entity
  **/
  @Schema(description = "")
  public EntityDto getEntity() {
    return entity;
  }

  public void setEntity(EntityDto entity) {
    this.entity = entity;
  }

  public GoldenSearchResponseDto search(Map<String, Object> search) {
    this.search = search;
    return this;
  }

  public GoldenSearchResponseDto putSearchItem(String key, Object searchItem) {
    if (this.search == null) {
      this.search = new HashMap<String, Object>();
    }
    this.search.put(key, searchItem);
    return this;
  }

   /**
   * A record is a document with a unique identifier that is used as the core of Golden and represents a data record.
   * @return search
  **/
  @Schema(description = "A record is a document with a unique identifier that is used as the core of Golden and represents a data record.")
  public Map<String, Object> getSearch() {
    return search;
  }

  public void setSearch(Map<String, Object> search) {
    this.search = search;
  }

  public GoldenSearchResponseDto result(List<Record> result) {
    this.result = result;
    return this;
  }

  public GoldenSearchResponseDto addResultItem(Record resultItem) {
    if (this.result == null) {
      this.result = new ArrayList<Record>();
    }
    this.result.add(resultItem);
    return this;
  }

   /**
   * List of found records. If no records are found, this list will be empty.
   * @return result
  **/
  @Schema(description = "List of found records. If no records are found, this list will be empty.")
  public List<Record> getResult() {
    return result;
  }

  public void setResult(List<Record> result) {
    this.result = result;
  }

  public GoldenSearchResponseDto count(Integer count) {
    this.count = count;
    return this;
  }

   /**
   * Number of records found.
   * @return count
  **/
  @Schema(description = "Number of records found.")
  public Integer getCount() {
    return count;
  }

  public void setCount(Integer count) {
    this.count = count;
  }

  public GoldenSearchResponseDto page(PageDto page) {
    this.page = page;
    return this;
  }

   /**
   * Get page
   * @return page
  **/
  @Schema(description = "")
  public PageDto getPage() {
    return page;
  }

  public void setPage(PageDto page) {
    this.page = page;
  }

  public GoldenSearchResponseDto errors(List<String> errors) {
    this.errors = errors;
    return this;
  }

  public GoldenSearchResponseDto addErrorsItem(String errorsItem) {
    if (this.errors == null) {
      this.errors = new ArrayList<String>();
    }
    this.errors.add(errorsItem);
    return this;
  }

   /**
   * List of errors. If HTTP response represents an error (4xx or 5xx) this will contain a list of errors.
   * @return errors
  **/
  @Schema(description = "List of errors. If HTTP response represents an error (4xx or 5xx) this will contain a list of errors.")
  public List<String> getErrors() {
    return errors;
  }

  public void setErrors(List<String> errors) {
    this.errors = errors;
  }

  public GoldenSearchResponseDto messages(List<String> messages) {
    this.messages = messages;
    return this;
  }

  public GoldenSearchResponseDto addMessagesItem(String messagesItem) {
    if (this.messages == null) {
      this.messages = new ArrayList<String>();
    }
    this.messages.add(messagesItem);
    return this;
  }

   /**
   * Optional success messages. If present, the request was successful and response code will be 2xx.
   * @return messages
  **/
  @Schema(description = "Optional success messages. If present, the request was successful and response code will be 2xx.")
  public List<String> getMessages() {
    return messages;
  }

  public void setMessages(List<String> messages) {
    this.messages = messages;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoldenSearchResponseDto goldenSearchResponseDto = (GoldenSearchResponseDto) o;
    return Objects.equals(this.entity, goldenSearchResponseDto.entity) &&
        Objects.equals(this.search, goldenSearchResponseDto.search) &&
        Objects.equals(this.result, goldenSearchResponseDto.result) &&
        Objects.equals(this.count, goldenSearchResponseDto.count) &&
        Objects.equals(this.page, goldenSearchResponseDto.page) &&
        Objects.equals(this.errors, goldenSearchResponseDto.errors) &&
        Objects.equals(this.messages, goldenSearchResponseDto.messages);
  }

  @Override
  public int hashCode() {
    return Objects.hash(entity, search, result, count, page, errors, messages);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoldenSearchResponseDto {\n");
    
    sb.append("    entity: ").append(toIndentedString(entity)).append("\n");
    sb.append("    search: ").append(toIndentedString(search)).append("\n");
    sb.append("    result: ").append(toIndentedString(result)).append("\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    page: ").append(toIndentedString(page)).append("\n");
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("    messages: ").append(toIndentedString(messages)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
