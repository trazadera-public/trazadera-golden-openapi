/*
 * GOLDEN-API
 * Trazadera Golden API
 *
 * OpenAPI spec version: 16-SNAPSHOT
 * Contact: support@trazadera.com 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.trazadera.golden.restclient.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * A steward condition to apply to the buckets.
 */
@Schema(description = "A steward condition to apply to the buckets.")

public class StewardCondition {
  /**
   * Bucket condition.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    @SerializedName("RECORD_COUNT")
    RECORD_COUNT("RECORD_COUNT"),
    @SerializedName("SCORE")
    SCORE("SCORE"),
    @SerializedName("DEVIATION")
    DEVIATION("DEVIATION");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static TypeEnum fromValue(String input) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return TypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("type")
  private TypeEnum type = null;

  /**
   * An interval used to check the condition.
   */
  @JsonAdapter(IntervalEnum.Adapter.class)
  public enum IntervalEnum {
    @SerializedName("MINIMUM")
    MINIMUM("MINIMUM"),
    @SerializedName("MAXIMUM")
    MAXIMUM("MAXIMUM"),
    @SerializedName("INTERVAL")
    INTERVAL("INTERVAL");

    private String value;

    IntervalEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static IntervalEnum fromValue(String input) {
      for (IntervalEnum b : IntervalEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<IntervalEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IntervalEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public IntervalEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return IntervalEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("interval")
  private IntervalEnum interval = null;

  @SerializedName("min")
  private Double min = null;

  @SerializedName("max")
  private Double max = null;

  public StewardCondition type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Bucket condition.
   * @return type
  **/
  @Schema(description = "Bucket condition.")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public StewardCondition interval(IntervalEnum interval) {
    this.interval = interval;
    return this;
  }

   /**
   * An interval used to check the condition.
   * @return interval
  **/
  @Schema(description = "An interval used to check the condition.")
  public IntervalEnum getInterval() {
    return interval;
  }

  public void setInterval(IntervalEnum interval) {
    this.interval = interval;
  }

  public StewardCondition min(Double min) {
    this.min = min;
    return this;
  }

   /**
   * The minimum value of the interval. Must be greater than or equal to 0. Default is -1 (no limit).
   * @return min
  **/
  @Schema(required = true, description = "The minimum value of the interval. Must be greater than or equal to 0. Default is -1 (no limit).")
  public Double getMin() {
    return min;
  }

  public void setMin(Double min) {
    this.min = min;
  }

  public StewardCondition max(Double max) {
    this.max = max;
    return this;
  }

   /**
   * The maximum value of the interval. Must be greater than or equal to 0 and eventually greater than min. Default is -1 (no limit).
   * @return max
  **/
  @Schema(required = true, description = "The maximum value of the interval. Must be greater than or equal to 0 and eventually greater than min. Default is -1 (no limit).")
  public Double getMax() {
    return max;
  }

  public void setMax(Double max) {
    this.max = max;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StewardCondition stewardCondition = (StewardCondition) o;
    return Objects.equals(this.type, stewardCondition.type) &&
        Objects.equals(this.interval, stewardCondition.interval) &&
        Objects.equals(this.min, stewardCondition.min) &&
        Objects.equals(this.max, stewardCondition.max);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, interval, min, max);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StewardCondition {\n");
    
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    interval: ").append(toIndentedString(interval)).append("\n");
    sb.append("    min: ").append(toIndentedString(min)).append("\n");
    sb.append("    max: ").append(toIndentedString(max)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
