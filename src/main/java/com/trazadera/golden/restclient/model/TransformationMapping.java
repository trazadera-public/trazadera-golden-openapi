/*
 * GOLDEN-API
 * Trazadera Golden API
 *
 * OpenAPI spec version: 15
 * Contact: support@trazadera.com 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.trazadera.golden.restclient.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * A transformation mapping is a mapping between columns of two datasets.
 */
@Schema(description = "A transformation mapping is a mapping between columns of two datasets.")

public class TransformationMapping {
  @SerializedName("id")
  private String id = null;

  @SerializedName("description")
  private String description = null;

  /**
   * The type of transformation mapping. Not used for script transformations.
   */
  @JsonAdapter(MappingTypeEnum.Adapter.class)
  public enum MappingTypeEnum {
    @SerializedName("COLUMN (Column to column)")
    COLUMN_COLUMN_TO_COLUMN_("COLUMN (Column to column)"),
    @SerializedName("CONSTANT (Constant value)")
    CONSTANT_CONSTANT_VALUE_("CONSTANT (Constant value)");

    private String value;

    MappingTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static MappingTypeEnum fromValue(String input) {
      for (MappingTypeEnum b : MappingTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<MappingTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MappingTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public MappingTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return MappingTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("mappingType")
  private MappingTypeEnum mappingType = null;

  @SerializedName("source")
  private List<String> source = null;

  @SerializedName("target")
  private List<String> target = null;

  @SerializedName("delimiter")
  private String delimiter = null;

  @SerializedName("constant")
  private String constant = null;

  public TransformationMapping id(String id) {
    this.id = id;
    return this;
  }

   /**
   * The identifier of the transformation mapping.
   * @return id
  **/
  @Schema(description = "The identifier of the transformation mapping.")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public TransformationMapping description(String description) {
    this.description = description;
    return this;
  }

   /**
   * The description of the transformation mapping.
   * @return description
  **/
  @Schema(description = "The description of the transformation mapping.")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public TransformationMapping mappingType(MappingTypeEnum mappingType) {
    this.mappingType = mappingType;
    return this;
  }

   /**
   * The type of transformation mapping. Not used for script transformations.
   * @return mappingType
  **/
  @Schema(description = "The type of transformation mapping. Not used for script transformations.")
  public MappingTypeEnum getMappingType() {
    return mappingType;
  }

  public void setMappingType(MappingTypeEnum mappingType) {
    this.mappingType = mappingType;
  }

  public TransformationMapping source(List<String> source) {
    this.source = source;
    return this;
  }

  public TransformationMapping addSourceItem(String sourceItem) {
    if (this.source == null) {
      this.source = new ArrayList<String>();
    }
    this.source.add(sourceItem);
    return this;
  }

   /**
   * The source columns of the transformation mapping.
   * @return source
  **/
  @Schema(description = "The source columns of the transformation mapping.")
  public List<String> getSource() {
    return source;
  }

  public void setSource(List<String> source) {
    this.source = source;
  }

  public TransformationMapping target(List<String> target) {
    this.target = target;
    return this;
  }

  public TransformationMapping addTargetItem(String targetItem) {
    if (this.target == null) {
      this.target = new ArrayList<String>();
    }
    this.target.add(targetItem);
    return this;
  }

   /**
   * The target columns of the transformation mapping.
   * @return target
  **/
  @Schema(description = "The target columns of the transformation mapping.")
  public List<String> getTarget() {
    return target;
  }

  public void setTarget(List<String> target) {
    this.target = target;
  }

  public TransformationMapping delimiter(String delimiter) {
    this.delimiter = delimiter;
    return this;
  }

   /**
   * The delimiter used to concatenate source columns. By default, a space.
   * @return delimiter
  **/
  @Schema(description = "The delimiter used to concatenate source columns. By default, a space.")
  public String getDelimiter() {
    return delimiter;
  }

  public void setDelimiter(String delimiter) {
    this.delimiter = delimiter;
  }

  public TransformationMapping constant(String constant) {
    this.constant = constant;
    return this;
  }

   /**
   * The constant value used as source.
   * @return constant
  **/
  @Schema(description = "The constant value used as source.")
  public String getConstant() {
    return constant;
  }

  public void setConstant(String constant) {
    this.constant = constant;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransformationMapping transformationMapping = (TransformationMapping) o;
    return Objects.equals(this.id, transformationMapping.id) &&
        Objects.equals(this.description, transformationMapping.description) &&
        Objects.equals(this.mappingType, transformationMapping.mappingType) &&
        Objects.equals(this.source, transformationMapping.source) &&
        Objects.equals(this.target, transformationMapping.target) &&
        Objects.equals(this.delimiter, transformationMapping.delimiter) &&
        Objects.equals(this.constant, transformationMapping.constant);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, description, mappingType, source, target, delimiter, constant);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransformationMapping {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    mappingType: ").append(toIndentedString(mappingType)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("    delimiter: ").append(toIndentedString(delimiter)).append("\n");
    sb.append("    constant: ").append(toIndentedString(constant)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
