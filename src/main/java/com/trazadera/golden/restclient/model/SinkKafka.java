/*
 * GOLDEN-API
 * Trazadera Golden API
 *
 * OpenAPI spec version: 16-SNAPSHOT
 * Contact: support@trazadera.com 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.trazadera.golden.restclient.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.trazadera.golden.restclient.model.Dependency;
import com.trazadera.golden.restclient.model.Option;
import com.trazadera.golden.restclient.model.Resource;
import com.trazadera.golden.restclient.model.Validation;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.OffsetDateTime;
/**
 * A Kafka sink is a resource that writes records to an external Kafka.
 */
@Schema(description = "A Kafka sink is a resource that writes records to an external Kafka.")

public class SinkKafka extends Resource implements OneOfResourceExchangeDtoResourcesItems, OneOfResourceListResponseDtoResourcesItems, OneOfResourceResponseDtoResource {
  @SerializedName("dataset")
  private String dataset = null;

  @SerializedName("timeoutMs")
  private Integer timeoutMs = null;

  @SerializedName("credentials")
  private String credentials = null;

  @SerializedName("topicName")
  private String topicName = null;

  @SerializedName("bootstrapServers")
  private String bootstrapServers = null;

  @SerializedName("properties")
  private List<Option> properties = null;

  public SinkKafka dataset(String dataset) {
    this.dataset = dataset;
    return this;
  }

   /**
   * The dataset to use.
   * @return dataset
  **/
  @Schema(description = "The dataset to use.")
  public String getDataset() {
    return dataset;
  }

  public void setDataset(String dataset) {
    this.dataset = dataset;
  }

  public SinkKafka timeoutMs(Integer timeoutMs) {
    this.timeoutMs = timeoutMs;
    return this;
  }

   /**
   * The timeout in milliseconds for writing a record.
   * @return timeoutMs
  **/
  @Schema(required = true, description = "The timeout in milliseconds for writing a record.")
  public Integer getTimeoutMs() {
    return timeoutMs;
  }

  public void setTimeoutMs(Integer timeoutMs) {
    this.timeoutMs = timeoutMs;
  }

  public SinkKafka credentials(String credentials) {
    this.credentials = credentials;
    return this;
  }

   /**
   * The credentials to use for the Kafka producer.
   * @return credentials
  **/
  @Schema(required = true, description = "The credentials to use for the Kafka producer.")
  public String getCredentials() {
    return credentials;
  }

  public void setCredentials(String credentials) {
    this.credentials = credentials;
  }

  public SinkKafka topicName(String topicName) {
    this.topicName = topicName;
    return this;
  }

   /**
   * The name of the topic in the Kafka broker.
   * @return topicName
  **/
  @Schema(required = true, description = "The name of the topic in the Kafka broker.")
  public String getTopicName() {
    return topicName;
  }

  public void setTopicName(String topicName) {
    this.topicName = topicName;
  }

  public SinkKafka bootstrapServers(String bootstrapServers) {
    this.bootstrapServers = bootstrapServers;
    return this;
  }

   /**
   * The list of Kafka brokers to connect to.
   * @return bootstrapServers
  **/
  @Schema(required = true, description = "The list of Kafka brokers to connect to.")
  public String getBootstrapServers() {
    return bootstrapServers;
  }

  public void setBootstrapServers(String bootstrapServers) {
    this.bootstrapServers = bootstrapServers;
  }

  public SinkKafka properties(List<Option> properties) {
    this.properties = properties;
    return this;
  }

  public SinkKafka addPropertiesItem(Option propertiesItem) {
    if (this.properties == null) {
      this.properties = new ArrayList<Option>();
    }
    this.properties.add(propertiesItem);
    return this;
  }

   /**
   * The properties to use for the Kafka producer.
   * @return properties
  **/
  @Schema(description = "The properties to use for the Kafka producer.")
  public List<Option> getProperties() {
    return properties;
  }

  public void setProperties(List<Option> properties) {
    this.properties = properties;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SinkKafka sinkKafka = (SinkKafka) o;
    return Objects.equals(this.dataset, sinkKafka.dataset) &&
        Objects.equals(this.timeoutMs, sinkKafka.timeoutMs) &&
        Objects.equals(this.credentials, sinkKafka.credentials) &&
        Objects.equals(this.topicName, sinkKafka.topicName) &&
        Objects.equals(this.bootstrapServers, sinkKafka.bootstrapServers) &&
        Objects.equals(this.properties, sinkKafka.properties) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataset, timeoutMs, credentials, topicName, bootstrapServers, properties, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SinkKafka {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    dataset: ").append(toIndentedString(dataset)).append("\n");
    sb.append("    timeoutMs: ").append(toIndentedString(timeoutMs)).append("\n");
    sb.append("    credentials: ").append(toIndentedString(credentials)).append("\n");
    sb.append("    topicName: ").append(toIndentedString(topicName)).append("\n");
    sb.append("    bootstrapServers: ").append(toIndentedString(bootstrapServers)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
