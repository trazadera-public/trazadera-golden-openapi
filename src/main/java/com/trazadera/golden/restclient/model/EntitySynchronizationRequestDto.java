/*
 * GOLDEN-API
 * Trazadera Golden API
 *
 * OpenAPI spec version: 16-SNAPSHOT
 * Contact: support@trazadera.com 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.trazadera.golden.restclient.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;
/**
 * Entity save object
 */
@Schema(description = "Entity save object")

public class EntitySynchronizationRequestDto {
  @SerializedName("id")
  private String id = null;

  /**
   * Entity synchronization mask represents what kind of synchronization is required.
   */
  @JsonAdapter(LoadMaskEnum.Adapter.class)
  public enum LoadMaskEnum {
    @SerializedName("FULL")
    FULL("FULL"),
    @SerializedName("INCREMENTAL")
    INCREMENTAL("INCREMENTAL"),
    @SerializedName("CUSTOM")
    CUSTOM("CUSTOM"),
    @SerializedName("CHANGES")
    CHANGES("CHANGES"),
    @SerializedName("NONE")
    NONE("NONE");

    private String value;

    LoadMaskEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static LoadMaskEnum fromValue(String input) {
      for (LoadMaskEnum b : LoadMaskEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<LoadMaskEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LoadMaskEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public LoadMaskEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return LoadMaskEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("loadMask")
  private LoadMaskEnum loadMask = null;

  @SerializedName("loadFrom")
  private OffsetDateTime loadFrom = null;

  @SerializedName("loadTo")
  private OffsetDateTime loadTo = null;

  /**
   * Entity synchronization mask represents what kind of synchronization is required.
   */
  @JsonAdapter(IndexClassificationMaskEnum.Adapter.class)
  public enum IndexClassificationMaskEnum {
    @SerializedName("FULL")
    FULL("FULL"),
    @SerializedName("INCREMENTAL")
    INCREMENTAL("INCREMENTAL"),
    @SerializedName("CUSTOM")
    CUSTOM("CUSTOM"),
    @SerializedName("CHANGES")
    CHANGES("CHANGES"),
    @SerializedName("NONE")
    NONE("NONE");

    private String value;

    IndexClassificationMaskEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static IndexClassificationMaskEnum fromValue(String input) {
      for (IndexClassificationMaskEnum b : IndexClassificationMaskEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<IndexClassificationMaskEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IndexClassificationMaskEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public IndexClassificationMaskEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return IndexClassificationMaskEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("indexClassificationMask")
  private IndexClassificationMaskEnum indexClassificationMask = null;

  /**
   * Entity synchronization mask represents what kind of synchronization is required.
   */
  @JsonAdapter(SinkMaskEnum.Adapter.class)
  public enum SinkMaskEnum {
    @SerializedName("FULL")
    FULL("FULL"),
    @SerializedName("INCREMENTAL")
    INCREMENTAL("INCREMENTAL"),
    @SerializedName("CUSTOM")
    CUSTOM("CUSTOM"),
    @SerializedName("CHANGES")
    CHANGES("CHANGES"),
    @SerializedName("NONE")
    NONE("NONE");

    private String value;

    SinkMaskEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static SinkMaskEnum fromValue(String input) {
      for (SinkMaskEnum b : SinkMaskEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<SinkMaskEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SinkMaskEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public SinkMaskEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return SinkMaskEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("sinkMask")
  private SinkMaskEnum sinkMask = null;

  public EntitySynchronizationRequestDto id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Entity identifier
   * @return id
  **/
  @Schema(required = true, description = "Entity identifier")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public EntitySynchronizationRequestDto loadMask(LoadMaskEnum loadMask) {
    this.loadMask = loadMask;
    return this;
  }

   /**
   * Entity synchronization mask represents what kind of synchronization is required.
   * @return loadMask
  **/
  @Schema(required = true, description = "Entity synchronization mask represents what kind of synchronization is required.")
  public LoadMaskEnum getLoadMask() {
    return loadMask;
  }

  public void setLoadMask(LoadMaskEnum loadMask) {
    this.loadMask = loadMask;
  }

  public EntitySynchronizationRequestDto loadFrom(OffsetDateTime loadFrom) {
    this.loadFrom = loadFrom;
    return this;
  }

   /**
   * Represents an instant ISO 8601 timestamp, used as a filter to load data from this timestamp
   * @return loadFrom
  **/
  @Schema(description = "Represents an instant ISO 8601 timestamp, used as a filter to load data from this timestamp")
  public OffsetDateTime getLoadFrom() {
    return loadFrom;
  }

  public void setLoadFrom(OffsetDateTime loadFrom) {
    this.loadFrom = loadFrom;
  }

  public EntitySynchronizationRequestDto loadTo(OffsetDateTime loadTo) {
    this.loadTo = loadTo;
    return this;
  }

   /**
   * Represents an instant ISO 8601 timestamp, used as a filter to load data until this timestamp
   * @return loadTo
  **/
  @Schema(description = "Represents an instant ISO 8601 timestamp, used as a filter to load data until this timestamp")
  public OffsetDateTime getLoadTo() {
    return loadTo;
  }

  public void setLoadTo(OffsetDateTime loadTo) {
    this.loadTo = loadTo;
  }

  public EntitySynchronizationRequestDto indexClassificationMask(IndexClassificationMaskEnum indexClassificationMask) {
    this.indexClassificationMask = indexClassificationMask;
    return this;
  }

   /**
   * Entity synchronization mask represents what kind of synchronization is required.
   * @return indexClassificationMask
  **/
  @Schema(required = true, description = "Entity synchronization mask represents what kind of synchronization is required.")
  public IndexClassificationMaskEnum getIndexClassificationMask() {
    return indexClassificationMask;
  }

  public void setIndexClassificationMask(IndexClassificationMaskEnum indexClassificationMask) {
    this.indexClassificationMask = indexClassificationMask;
  }

  public EntitySynchronizationRequestDto sinkMask(SinkMaskEnum sinkMask) {
    this.sinkMask = sinkMask;
    return this;
  }

   /**
   * Entity synchronization mask represents what kind of synchronization is required.
   * @return sinkMask
  **/
  @Schema(required = true, description = "Entity synchronization mask represents what kind of synchronization is required.")
  public SinkMaskEnum getSinkMask() {
    return sinkMask;
  }

  public void setSinkMask(SinkMaskEnum sinkMask) {
    this.sinkMask = sinkMask;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EntitySynchronizationRequestDto entitySynchronizationRequestDto = (EntitySynchronizationRequestDto) o;
    return Objects.equals(this.id, entitySynchronizationRequestDto.id) &&
        Objects.equals(this.loadMask, entitySynchronizationRequestDto.loadMask) &&
        Objects.equals(this.loadFrom, entitySynchronizationRequestDto.loadFrom) &&
        Objects.equals(this.loadTo, entitySynchronizationRequestDto.loadTo) &&
        Objects.equals(this.indexClassificationMask, entitySynchronizationRequestDto.indexClassificationMask) &&
        Objects.equals(this.sinkMask, entitySynchronizationRequestDto.sinkMask);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, loadMask, loadFrom, loadTo, indexClassificationMask, sinkMask);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EntitySynchronizationRequestDto {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    loadMask: ").append(toIndentedString(loadMask)).append("\n");
    sb.append("    loadFrom: ").append(toIndentedString(loadFrom)).append("\n");
    sb.append("    loadTo: ").append(toIndentedString(loadTo)).append("\n");
    sb.append("    indexClassificationMask: ").append(toIndentedString(indexClassificationMask)).append("\n");
    sb.append("    sinkMask: ").append(toIndentedString(sinkMask)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
