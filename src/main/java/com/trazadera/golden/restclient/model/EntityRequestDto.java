/*
 * GOLDEN-API
 * Trazadera Golden API
 *
 * OpenAPI spec version: 1.9.0
 * Contact: support@trazadera.com 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.trazadera.golden.restclient.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Entity request
 */
@Schema(description = "Entity request")

public class EntityRequestDto {
  @SerializedName("create")
  private Boolean create = null;

  @SerializedName("entity")
  private String entity = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("table")
  private String table = null;

  /**
   * Entity type.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    @SerializedName("NONE")
    NONE("NONE"),
    @SerializedName("SEARCH")
    SEARCH("SEARCH"),
    @SerializedName("DUPLICATES")
    DUPLICATES("DUPLICATES"),
    @SerializedName("AUTO_DUPLICATES")
    AUTO_DUPLICATES("AUTO_DUPLICATES");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static TypeEnum fromValue(String input) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return TypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("type")
  private TypeEnum type = null;

  @SerializedName("indexer")
  private String indexer = null;

  @SerializedName("classifier")
  private String classifier = null;

  @SerializedName("merger")
  private String merger = null;

  @SerializedName("steward")
  private String steward = null;

  @SerializedName("pipeline")
  private String pipeline = null;

  @SerializedName("events")
  private Boolean events = null;

  @SerializedName("eventSink")
  private String eventSink = null;

  public EntityRequestDto create(Boolean create) {
    this.create = create;
    return this;
  }

   /**
   * Create entity flag. Default is true. If not set, the entity is meant to be updated.
   * @return create
  **/
  @Schema(description = "Create entity flag. Default is true. If not set, the entity is meant to be updated.")
  public Boolean isCreate() {
    return create;
  }

  public void setCreate(Boolean create) {
    this.create = create;
  }

  public EntityRequestDto entity(String entity) {
    this.entity = entity;
    return this;
  }

   /**
   * Entity name
   * @return entity
  **/
  @Schema(required = true, description = "Entity name")
  public String getEntity() {
    return entity;
  }

  public void setEntity(String entity) {
    this.entity = entity;
  }

  public EntityRequestDto description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Entity description
   * @return description
  **/
  @Schema(description = "Entity description")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public EntityRequestDto table(String table) {
    this.table = table;
    return this;
  }

   /**
   * Table name - to persist data
   * @return table
  **/
  @Schema(required = true, description = "Table name - to persist data")
  public String getTable() {
    return table;
  }

  public void setTable(String table) {
    this.table = table;
  }

  public EntityRequestDto type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Entity type.
   * @return type
  **/
  @Schema(description = "Entity type.")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public EntityRequestDto indexer(String indexer) {
    this.indexer = indexer;
    return this;
  }

   /**
   * Indexer name - to define buckets
   * @return indexer
  **/
  @Schema(description = "Indexer name - to define buckets")
  public String getIndexer() {
    return indexer;
  }

  public void setIndexer(String indexer) {
    this.indexer = indexer;
  }

  public EntityRequestDto classifier(String classifier) {
    this.classifier = classifier;
    return this;
  }

   /**
   * Classifier name - to classify buckets
   * @return classifier
  **/
  @Schema(description = "Classifier name - to classify buckets")
  public String getClassifier() {
    return classifier;
  }

  public void setClassifier(String classifier) {
    this.classifier = classifier;
  }

  public EntityRequestDto merger(String merger) {
    this.merger = merger;
    return this;
  }

   /**
   * Merger name - to merge matching records
   * @return merger
  **/
  @Schema(description = "Merger name - to merge matching records")
  public String getMerger() {
    return merger;
  }

  public void setMerger(String merger) {
    this.merger = merger;
  }

  public EntityRequestDto steward(String steward) {
    this.steward = steward;
    return this;
  }

   /**
   * Steward name - automated operations
   * @return steward
  **/
  @Schema(description = "Steward name - automated operations")
  public String getSteward() {
    return steward;
  }

  public void setSteward(String steward) {
    this.steward = steward;
  }

  public EntityRequestDto pipeline(String pipeline) {
    this.pipeline = pipeline;
    return this;
  }

   /**
   * Pipeline name - to process records before upserting
   * @return pipeline
  **/
  @Schema(description = "Pipeline name - to process records before upserting")
  public String getPipeline() {
    return pipeline;
  }

  public void setPipeline(String pipeline) {
    this.pipeline = pipeline;
  }

  public EntityRequestDto events(Boolean events) {
    this.events = events;
    return this;
  }

   /**
   * Events supported
   * @return events
  **/
  @Schema(description = "Events supported")
  public Boolean isEvents() {
    return events;
  }

  public void setEvents(Boolean events) {
    this.events = events;
  }

  public EntityRequestDto eventSink(String eventSink) {
    this.eventSink = eventSink;
    return this;
  }

   /**
   * Event sink name
   * @return eventSink
  **/
  @Schema(description = "Event sink name")
  public String getEventSink() {
    return eventSink;
  }

  public void setEventSink(String eventSink) {
    this.eventSink = eventSink;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EntityRequestDto entityRequestDto = (EntityRequestDto) o;
    return Objects.equals(this.create, entityRequestDto.create) &&
        Objects.equals(this.entity, entityRequestDto.entity) &&
        Objects.equals(this.description, entityRequestDto.description) &&
        Objects.equals(this.table, entityRequestDto.table) &&
        Objects.equals(this.type, entityRequestDto.type) &&
        Objects.equals(this.indexer, entityRequestDto.indexer) &&
        Objects.equals(this.classifier, entityRequestDto.classifier) &&
        Objects.equals(this.merger, entityRequestDto.merger) &&
        Objects.equals(this.steward, entityRequestDto.steward) &&
        Objects.equals(this.pipeline, entityRequestDto.pipeline) &&
        Objects.equals(this.events, entityRequestDto.events) &&
        Objects.equals(this.eventSink, entityRequestDto.eventSink);
  }

  @Override
  public int hashCode() {
    return Objects.hash(create, entity, description, table, type, indexer, classifier, merger, steward, pipeline, events, eventSink);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EntityRequestDto {\n");
    
    sb.append("    create: ").append(toIndentedString(create)).append("\n");
    sb.append("    entity: ").append(toIndentedString(entity)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    table: ").append(toIndentedString(table)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    indexer: ").append(toIndentedString(indexer)).append("\n");
    sb.append("    classifier: ").append(toIndentedString(classifier)).append("\n");
    sb.append("    merger: ").append(toIndentedString(merger)).append("\n");
    sb.append("    steward: ").append(toIndentedString(steward)).append("\n");
    sb.append("    pipeline: ").append(toIndentedString(pipeline)).append("\n");
    sb.append("    events: ").append(toIndentedString(events)).append("\n");
    sb.append("    eventSink: ").append(toIndentedString(eventSink)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
