/*
 * GOLDEN-API
 * Trazadera Golden API
 *
 * OpenAPI spec version: 15
 * Contact: support@trazadera.com 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.trazadera.golden.restclient.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.trazadera.golden.restclient.model.Dependency;
import com.trazadera.golden.restclient.model.Resource;
import com.trazadera.golden.restclient.model.Validation;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;
/**
 * A weight merger is a resource aimed at merging records by calculating a weight for each record and then merging the values of each column, considering that the higher the weight, the more important the record/column.
 */
@Schema(description = "A weight merger is a resource aimed at merging records by calculating a weight for each record and then merging the values of each column, considering that the higher the weight, the more important the record/column.")

public class MergerWeight extends Resource implements OneOfResourceExchangeDtoResourcesItems, OneOfResourceListResponseDtoResourcesItems, OneOfResourceResponseDtoResource {
  @SerializedName("dataset")
  private String dataset = null;

  @SerializedName("key")
  private String key = null;

  @SerializedName("constant")
  private String constant = null;

  @SerializedName("script")
  private String script = null;

  /**
   * The type of merge to perform.
   */
  @JsonAdapter(MergeTypeEnum.Adapter.class)
  public enum MergeTypeEnum {
    @SerializedName("RANDOM")
    RANDOM("RANDOM"),
    @SerializedName("CONSTANT")
    CONSTANT("CONSTANT"),
    @SerializedName("DATE")
    DATE("DATE"),
    @SerializedName("NUMBER")
    NUMBER("NUMBER"),
    @SerializedName("SCRIPT")
    SCRIPT("SCRIPT");

    private String value;

    MergeTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static MergeTypeEnum fromValue(String input) {
      for (MergeTypeEnum b : MergeTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<MergeTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MergeTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public MergeTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return MergeTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("mergeType")
  private MergeTypeEnum mergeType = null;

  /**
   * The sort of merge to perform. Indicates whether the highest or lowest weight wins.
   */
  @JsonAdapter(MergeSortEnum.Adapter.class)
  public enum MergeSortEnum {
    @SerializedName("HIGHEST_WEIGHT")
    HIGHEST_WEIGHT("HIGHEST_WEIGHT"),
    @SerializedName("LOWEST_WEIGHT")
    LOWEST_WEIGHT("LOWEST_WEIGHT");

    private String value;

    MergeSortEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static MergeSortEnum fromValue(String input) {
      for (MergeSortEnum b : MergeSortEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<MergeSortEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MergeSortEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public MergeSortEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return MergeSortEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("mergeSort")
  private MergeSortEnum mergeSort = null;

  public MergerWeight dataset(String dataset) {
    this.dataset = dataset;
    return this;
  }

   /**
   * The dataset to use.
   * @return dataset
  **/
  @Schema(description = "The dataset to use.")
  public String getDataset() {
    return dataset;
  }

  public void setDataset(String dataset) {
    this.dataset = dataset;
  }

  public MergerWeight key(String key) {
    this.key = key;
    return this;
  }

   /**
   * The key of the column to be used for the merge. By default, the first column of the dataset.
   * @return key
  **/
  @Schema(description = "The key of the column to be used for the merge. By default, the first column of the dataset.")
  public String getKey() {
    return key;
  }

  public void setKey(String key) {
    this.key = key;
  }

  public MergerWeight constant(String constant) {
    this.constant = constant;
    return this;
  }

   /**
   * Get constant
   * @return constant
  **/
  @Schema(description = "")
  public String getConstant() {
    return constant;
  }

  public void setConstant(String constant) {
    this.constant = constant;
  }

  public MergerWeight script(String script) {
    this.script = script;
    return this;
  }

   /**
   * Get script
   * @return script
  **/
  @Schema(description = "")
  public String getScript() {
    return script;
  }

  public void setScript(String script) {
    this.script = script;
  }

  public MergerWeight mergeType(MergeTypeEnum mergeType) {
    this.mergeType = mergeType;
    return this;
  }

   /**
   * The type of merge to perform.
   * @return mergeType
  **/
  @Schema(required = true, description = "The type of merge to perform.")
  public MergeTypeEnum getMergeType() {
    return mergeType;
  }

  public void setMergeType(MergeTypeEnum mergeType) {
    this.mergeType = mergeType;
  }

  public MergerWeight mergeSort(MergeSortEnum mergeSort) {
    this.mergeSort = mergeSort;
    return this;
  }

   /**
   * The sort of merge to perform. Indicates whether the highest or lowest weight wins.
   * @return mergeSort
  **/
  @Schema(description = "The sort of merge to perform. Indicates whether the highest or lowest weight wins.")
  public MergeSortEnum getMergeSort() {
    return mergeSort;
  }

  public void setMergeSort(MergeSortEnum mergeSort) {
    this.mergeSort = mergeSort;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MergerWeight mergerWeight = (MergerWeight) o;
    return Objects.equals(this.dataset, mergerWeight.dataset) &&
        Objects.equals(this.key, mergerWeight.key) &&
        Objects.equals(this.constant, mergerWeight.constant) &&
        Objects.equals(this.script, mergerWeight.script) &&
        Objects.equals(this.mergeType, mergerWeight.mergeType) &&
        Objects.equals(this.mergeSort, mergerWeight.mergeSort) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataset, key, constant, script, mergeType, mergeSort, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MergerWeight {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    dataset: ").append(toIndentedString(dataset)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    constant: ").append(toIndentedString(constant)).append("\n");
    sb.append("    script: ").append(toIndentedString(script)).append("\n");
    sb.append("    mergeType: ").append(toIndentedString(mergeType)).append("\n");
    sb.append("    mergeSort: ").append(toIndentedString(mergeSort)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
