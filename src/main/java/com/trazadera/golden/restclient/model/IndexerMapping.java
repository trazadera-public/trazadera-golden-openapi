/*
 * GOLDEN-API
 * Trazadera Golden API
 *
 * OpenAPI spec version: 16-SNAPSHOT
 * Contact: support@trazadera.com 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.trazadera.golden.restclient.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * Mappings to calculate indexes.
 */
@Schema(description = "Mappings to calculate indexes.")

public class IndexerMapping {
  @SerializedName("id")
  private String id = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("duplicates")
  private Boolean duplicates = null;

  /**
   * The type of matching used by the indexer mapping.
   */
  @JsonAdapter(MatchingEnum.Adapter.class)
  public enum MatchingEnum {
    @SerializedName("EXACT")
    EXACT("EXACT"),
    @SerializedName("FUZZY")
    FUZZY("FUZZY");

    private String value;

    MatchingEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static MatchingEnum fromValue(String input) {
      for (MatchingEnum b : MatchingEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<MatchingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MatchingEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public MatchingEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return MatchingEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("matching")
  private MatchingEnum matching = null;

  /**
   * The type of mapping used by the indexer.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    @SerializedName("COLUMNS")
    COLUMNS("COLUMNS"),
    @SerializedName("SCRIPT")
    SCRIPT("SCRIPT");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static TypeEnum fromValue(String input) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return TypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("type")
  private TypeEnum type = null;

  /**
   * A text option is a transformation that can be applied to a text to normalize it.
   */
  @JsonAdapter(KeyOptionsEnum.Adapter.class)
  public enum KeyOptionsEnum {
    @SerializedName("NONE")
    NONE("NONE"),
    @SerializedName("IGNORE_CASE")
    IGNORE_CASE("IGNORE_CASE"),
    @SerializedName("IGNORE_SPACES")
    IGNORE_SPACES("IGNORE_SPACES"),
    @SerializedName("ONLY_ALPHANUMERIC")
    ONLY_ALPHANUMERIC("ONLY_ALPHANUMERIC"),
    @SerializedName("IGNORE_ACCENTS")
    IGNORE_ACCENTS("IGNORE_ACCENTS"),
    @SerializedName("AGGRESSIVE")
    AGGRESSIVE("AGGRESSIVE");

    private String value;

    KeyOptionsEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static KeyOptionsEnum fromValue(String input) {
      for (KeyOptionsEnum b : KeyOptionsEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<KeyOptionsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final KeyOptionsEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public KeyOptionsEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return KeyOptionsEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("keyOptions")
  private List<KeyOptionsEnum> keyOptions = null;

  @SerializedName("combine")
  private Boolean combine = null;

  @SerializedName("keys")
  private List<String> keys = new ArrayList<String>();

  @SerializedName("script")
  private String script = null;

  public IndexerMapping id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(required = true, description = "")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public IndexerMapping description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @Schema(required = true, description = "")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public IndexerMapping duplicates(Boolean duplicates) {
    this.duplicates = duplicates;
    return this;
  }

   /**
   * Get duplicates
   * @return duplicates
  **/
  @Schema(description = "")
  public Boolean isDuplicates() {
    return duplicates;
  }

  public void setDuplicates(Boolean duplicates) {
    this.duplicates = duplicates;
  }

  public IndexerMapping matching(MatchingEnum matching) {
    this.matching = matching;
    return this;
  }

   /**
   * The type of matching used by the indexer mapping.
   * @return matching
  **/
  @Schema(description = "The type of matching used by the indexer mapping.")
  public MatchingEnum getMatching() {
    return matching;
  }

  public void setMatching(MatchingEnum matching) {
    this.matching = matching;
  }

  public IndexerMapping type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * The type of mapping used by the indexer.
   * @return type
  **/
  @Schema(description = "The type of mapping used by the indexer.")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public IndexerMapping keyOptions(List<KeyOptionsEnum> keyOptions) {
    this.keyOptions = keyOptions;
    return this;
  }

  public IndexerMapping addKeyOptionsItem(KeyOptionsEnum keyOptionsItem) {
    if (this.keyOptions == null) {
      this.keyOptions = new ArrayList<KeyOptionsEnum>();
    }
    this.keyOptions.add(keyOptionsItem);
    return this;
  }

   /**
   * Get keyOptions
   * @return keyOptions
  **/
  @Schema(description = "")
  public List<KeyOptionsEnum> getKeyOptions() {
    return keyOptions;
  }

  public void setKeyOptions(List<KeyOptionsEnum> keyOptions) {
    this.keyOptions = keyOptions;
  }

  public IndexerMapping combine(Boolean combine) {
    this.combine = combine;
    return this;
  }

   /**
   * Get combine
   * @return combine
  **/
  @Schema(required = true, description = "")
  public Boolean isCombine() {
    return combine;
  }

  public void setCombine(Boolean combine) {
    this.combine = combine;
  }

  public IndexerMapping keys(List<String> keys) {
    this.keys = keys;
    return this;
  }

  public IndexerMapping addKeysItem(String keysItem) {
    this.keys.add(keysItem);
    return this;
  }

   /**
   * Get keys
   * @return keys
  **/
  @Schema(required = true, description = "")
  public List<String> getKeys() {
    return keys;
  }

  public void setKeys(List<String> keys) {
    this.keys = keys;
  }

  public IndexerMapping script(String script) {
    this.script = script;
    return this;
  }

   /**
   * Get script
   * @return script
  **/
  @Schema(description = "")
  public String getScript() {
    return script;
  }

  public void setScript(String script) {
    this.script = script;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IndexerMapping indexerMapping = (IndexerMapping) o;
    return Objects.equals(this.id, indexerMapping.id) &&
        Objects.equals(this.description, indexerMapping.description) &&
        Objects.equals(this.duplicates, indexerMapping.duplicates) &&
        Objects.equals(this.matching, indexerMapping.matching) &&
        Objects.equals(this.type, indexerMapping.type) &&
        Objects.equals(this.keyOptions, indexerMapping.keyOptions) &&
        Objects.equals(this.combine, indexerMapping.combine) &&
        Objects.equals(this.keys, indexerMapping.keys) &&
        Objects.equals(this.script, indexerMapping.script);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, description, duplicates, matching, type, keyOptions, combine, keys, script);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IndexerMapping {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    duplicates: ").append(toIndentedString(duplicates)).append("\n");
    sb.append("    matching: ").append(toIndentedString(matching)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    keyOptions: ").append(toIndentedString(keyOptions)).append("\n");
    sb.append("    combine: ").append(toIndentedString(combine)).append("\n");
    sb.append("    keys: ").append(toIndentedString(keys)).append("\n");
    sb.append("    script: ").append(toIndentedString(script)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
