/*
 * GOLDEN-API
 * Trazadera Golden API
 *
 * OpenAPI spec version: 15
 * Contact: support@trazadera.com 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.trazadera.golden.restclient.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Record search metadata.
 */
@Schema(description = "Record search metadata.")

public class RecordSearch {
  /**
   * Search type.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    @SerializedName("ID")
    ID("ID"),
    @SerializedName("EXACT")
    EXACT("EXACT"),
    @SerializedName("PREFIX")
    PREFIX("PREFIX"),
    @SerializedName("SUFFIX")
    SUFFIX("SUFFIX"),
    @SerializedName("INFIX")
    INFIX("INFIX"),
    @SerializedName("FUZZY")
    FUZZY("FUZZY"),
    @SerializedName("NONE")
    NONE("NONE");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static TypeEnum fromValue(String input) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return TypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("type")
  private TypeEnum type = null;

  @SerializedName("count")
  private Integer count = null;

  @SerializedName("index")
  private String index = null;

  @SerializedName("rank")
  private Double rank = null;

  @SerializedName("match")
  private String match = null;

  public RecordSearch type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Search type.
   * @return type
  **/
  @Schema(description = "Search type.")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public RecordSearch count(Integer count) {
    this.count = count;
    return this;
  }

   /**
   * Found count.
   * @return count
  **/
  @Schema(description = "Found count.")
  public Integer getCount() {
    return count;
  }

  public void setCount(Integer count) {
    this.count = count;
  }

  public RecordSearch index(String index) {
    this.index = index;
    return this;
  }

   /**
   * Index that found this search result.
   * @return index
  **/
  @Schema(description = "Index that found this search result.")
  public String getIndex() {
    return index;
  }

  public void setIndex(String index) {
    this.index = index;
  }

  public RecordSearch rank(Double rank) {
    this.rank = rank;
    return this;
  }

   /**
   * Search rank.
   * @return rank
  **/
  @Schema(description = "Search rank.")
  public Double getRank() {
    return rank;
  }

  public void setRank(Double rank) {
    this.rank = rank;
  }

  public RecordSearch match(String match) {
    this.match = match;
    return this;
  }

   /**
   * Matched text.
   * @return match
  **/
  @Schema(description = "Matched text.")
  public String getMatch() {
    return match;
  }

  public void setMatch(String match) {
    this.match = match;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RecordSearch recordSearch = (RecordSearch) o;
    return Objects.equals(this.type, recordSearch.type) &&
        Objects.equals(this.count, recordSearch.count) &&
        Objects.equals(this.index, recordSearch.index) &&
        Objects.equals(this.rank, recordSearch.rank) &&
        Objects.equals(this.match, recordSearch.match);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, count, index, rank, match);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RecordSearch {\n");
    
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("    rank: ").append(toIndentedString(rank)).append("\n");
    sb.append("    match: ").append(toIndentedString(match)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
