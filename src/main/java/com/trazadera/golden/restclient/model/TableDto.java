/*
 * GOLDEN-API
 * Trazadera Golden API
 *
 * OpenAPI spec version: 1.9.0
 * Contact: support@trazadera.com 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.trazadera.golden.restclient.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.trazadera.golden.restclient.model.Dependency;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Represents a data table.
 */
@Schema(description = "Represents a data table.")

public class TableDto {
  @SerializedName("id")
  private String id = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("dataset")
  private String dataset = null;

  @SerializedName("history")
  private Boolean history = null;

  @SerializedName("audit")
  private Boolean audit = null;

  @SerializedName("created")
  private String created = null;

  @SerializedName("size")
  private Long size = null;

  /**
   * Table type.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    @SerializedName("TABLE")
    TABLE("TABLE"),
    @SerializedName("HISTORY")
    HISTORY("HISTORY");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static TypeEnum fromValue(String input) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return TypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("type")
  private TypeEnum type = null;

  @SerializedName("dependency")
  private Dependency dependency = null;

  @SerializedName("locked")
  private Boolean locked = null;

  public TableDto id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Table identifier.
   * @return id
  **/
  @Schema(description = "Table identifier.")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public TableDto description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Table description.
   * @return description
  **/
  @Schema(description = "Table description.")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public TableDto dataset(String dataset) {
    this.dataset = dataset;
    return this;
  }

   /**
   * Table dataset.
   * @return dataset
  **/
  @Schema(description = "Table dataset.")
  public String getDataset() {
    return dataset;
  }

  public void setDataset(String dataset) {
    this.dataset = dataset;
  }

  public TableDto history(Boolean history) {
    this.history = history;
    return this;
  }

   /**
   * Table history flag.
   * @return history
  **/
  @Schema(description = "Table history flag.")
  public Boolean isHistory() {
    return history;
  }

  public void setHistory(Boolean history) {
    this.history = history;
  }

  public TableDto audit(Boolean audit) {
    this.audit = audit;
    return this;
  }

   /**
   * Table audit flag.
   * @return audit
  **/
  @Schema(description = "Table audit flag.")
  public Boolean isAudit() {
    return audit;
  }

  public void setAudit(Boolean audit) {
    this.audit = audit;
  }

  public TableDto created(String created) {
    this.created = created;
    return this;
  }

   /**
   * Table creation instant.
   * @return created
  **/
  @Schema(description = "Table creation instant.")
  public String getCreated() {
    return created;
  }

  public void setCreated(String created) {
    this.created = created;
  }

  public TableDto size(Long size) {
    this.size = size;
    return this;
  }

   /**
   * Number of records.
   * @return size
  **/
  @Schema(description = "Number of records.")
  public Long getSize() {
    return size;
  }

  public void setSize(Long size) {
    this.size = size;
  }

  public TableDto type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Table type.
   * @return type
  **/
  @Schema(description = "Table type.")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public TableDto dependency(Dependency dependency) {
    this.dependency = dependency;
    return this;
  }

   /**
   * Get dependency
   * @return dependency
  **/
  @Schema(description = "")
  public Dependency getDependency() {
    return dependency;
  }

  public void setDependency(Dependency dependency) {
    this.dependency = dependency;
  }

  public TableDto locked(Boolean locked) {
    this.locked = locked;
    return this;
  }

   /**
   * Table locked flag.
   * @return locked
  **/
  @Schema(description = "Table locked flag.")
  public Boolean isLocked() {
    return locked;
  }

  public void setLocked(Boolean locked) {
    this.locked = locked;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TableDto tableDto = (TableDto) o;
    return Objects.equals(this.id, tableDto.id) &&
        Objects.equals(this.description, tableDto.description) &&
        Objects.equals(this.dataset, tableDto.dataset) &&
        Objects.equals(this.history, tableDto.history) &&
        Objects.equals(this.audit, tableDto.audit) &&
        Objects.equals(this.created, tableDto.created) &&
        Objects.equals(this.size, tableDto.size) &&
        Objects.equals(this.type, tableDto.type) &&
        Objects.equals(this.dependency, tableDto.dependency) &&
        Objects.equals(this.locked, tableDto.locked);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, description, dataset, history, audit, created, size, type, dependency, locked);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TableDto {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    dataset: ").append(toIndentedString(dataset)).append("\n");
    sb.append("    history: ").append(toIndentedString(history)).append("\n");
    sb.append("    audit: ").append(toIndentedString(audit)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    dependency: ").append(toIndentedString(dependency)).append("\n");
    sb.append("    locked: ").append(toIndentedString(locked)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
