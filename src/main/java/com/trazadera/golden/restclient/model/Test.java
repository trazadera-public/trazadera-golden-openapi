/*
 * GOLDEN-API
 * Trazadera Golden API
 *
 * OpenAPI spec version: 16-SNAPSHOT
 * Contact: support@trazadera.com 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.trazadera.golden.restclient.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.trazadera.golden.restclient.model.TestDuration;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.Map;
import org.threeten.bp.OffsetDateTime;
/**
 * Test helper object to store (eventually formatted) messages and errors.
 */
@Schema(description = "Test helper object to store (eventually formatted) messages and errors.")

public class Test {
  @SerializedName("options")
  private Map options = null;

  @SerializedName("errorCount")
  private Integer errorCount = null;

  @SerializedName("warningCount")
  private Integer warningCount = null;

  @SerializedName("timeStart")
  private OffsetDateTime timeStart = null;

  @SerializedName("timeEnd")
  private OffsetDateTime timeEnd = null;

  /**
   * Test result.
   */
  @JsonAdapter(ResultEnum.Adapter.class)
  public enum ResultEnum {
    @SerializedName("OK")
    OK("OK"),
    @SerializedName("ERROR")
    ERROR("ERROR"),
    @SerializedName("WARNING")
    WARNING("WARNING"),
    @SerializedName("NOT_SUPPORTED")
    NOT_SUPPORTED("NOT_SUPPORTED");

    private String value;

    ResultEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ResultEnum fromValue(String input) {
      for (ResultEnum b : ResultEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ResultEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ResultEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public ResultEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return ResultEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("result")
  private ResultEnum result = null;

  @SerializedName("payload")
  private String payload = null;

  /**
   * Test payload format. Indicates the format of the payload.
   */
  @JsonAdapter(FormatEnum.Adapter.class)
  public enum FormatEnum {
    @SerializedName("PLAIN")
    PLAIN("PLAIN"),
    @SerializedName("HTML")
    HTML("HTML");

    private String value;

    FormatEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static FormatEnum fromValue(String input) {
      for (FormatEnum b : FormatEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<FormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FormatEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public FormatEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return FormatEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("format")
  private FormatEnum format = null;

  @SerializedName("duration")
  private TestDuration duration = null;

  public Test options(Map options) {
    this.options = options;
    return this;
  }

   /**
   * Get options
   * @return options
  **/
  @Schema(description = "")
  public Map getOptions() {
    return options;
  }

  public void setOptions(Map options) {
    this.options = options;
  }

  public Test errorCount(Integer errorCount) {
    this.errorCount = errorCount;
    return this;
  }

   /**
   * Test error count. Contains the number of errors in the test.
   * @return errorCount
  **/
  @Schema(description = "Test error count. Contains the number of errors in the test.")
  public Integer getErrorCount() {
    return errorCount;
  }

  public void setErrorCount(Integer errorCount) {
    this.errorCount = errorCount;
  }

  public Test warningCount(Integer warningCount) {
    this.warningCount = warningCount;
    return this;
  }

   /**
   * Test warning count. Contains the number of warnings in the test.
   * @return warningCount
  **/
  @Schema(description = "Test warning count. Contains the number of warnings in the test.")
  public Integer getWarningCount() {
    return warningCount;
  }

  public void setWarningCount(Integer warningCount) {
    this.warningCount = warningCount;
  }

  public Test timeStart(OffsetDateTime timeStart) {
    this.timeStart = timeStart;
    return this;
  }

   /**
   * Test start time. Contains the start time of the test as ISO 8601 string.
   * @return timeStart
  **/
  @Schema(description = "Test start time. Contains the start time of the test as ISO 8601 string.")
  public OffsetDateTime getTimeStart() {
    return timeStart;
  }

  public void setTimeStart(OffsetDateTime timeStart) {
    this.timeStart = timeStart;
  }

  public Test timeEnd(OffsetDateTime timeEnd) {
    this.timeEnd = timeEnd;
    return this;
  }

   /**
   * Test end time. Contains the end time of the test as ISO 8601 string.
   * @return timeEnd
  **/
  @Schema(description = "Test end time. Contains the end time of the test as ISO 8601 string.")
  public OffsetDateTime getTimeEnd() {
    return timeEnd;
  }

  public void setTimeEnd(OffsetDateTime timeEnd) {
    this.timeEnd = timeEnd;
  }

  public Test result(ResultEnum result) {
    this.result = result;
    return this;
  }

   /**
   * Test result.
   * @return result
  **/
  @Schema(description = "Test result.")
  public ResultEnum getResult() {
    return result;
  }

  public void setResult(ResultEnum result) {
    this.result = result;
  }

  public Test payload(String payload) {
    this.payload = payload;
    return this;
  }

   /**
   * Test payload. Contains the formatted messages and errors.
   * @return payload
  **/
  @Schema(description = "Test payload. Contains the formatted messages and errors.")
  public String getPayload() {
    return payload;
  }

  public void setPayload(String payload) {
    this.payload = payload;
  }

  public Test format(FormatEnum format) {
    this.format = format;
    return this;
  }

   /**
   * Test payload format. Indicates the format of the payload.
   * @return format
  **/
  @Schema(description = "Test payload format. Indicates the format of the payload.")
  public FormatEnum getFormat() {
    return format;
  }

  public void setFormat(FormatEnum format) {
    this.format = format;
  }

  public Test duration(TestDuration duration) {
    this.duration = duration;
    return this;
  }

   /**
   * Get duration
   * @return duration
  **/
  @Schema(description = "")
  public TestDuration getDuration() {
    return duration;
  }

  public void setDuration(TestDuration duration) {
    this.duration = duration;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Test test = (Test) o;
    return Objects.equals(this.options, test.options) &&
        Objects.equals(this.errorCount, test.errorCount) &&
        Objects.equals(this.warningCount, test.warningCount) &&
        Objects.equals(this.timeStart, test.timeStart) &&
        Objects.equals(this.timeEnd, test.timeEnd) &&
        Objects.equals(this.result, test.result) &&
        Objects.equals(this.payload, test.payload) &&
        Objects.equals(this.format, test.format) &&
        Objects.equals(this.duration, test.duration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(options, errorCount, warningCount, timeStart, timeEnd, result, payload, format, duration);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Test {\n");
    
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    errorCount: ").append(toIndentedString(errorCount)).append("\n");
    sb.append("    warningCount: ").append(toIndentedString(warningCount)).append("\n");
    sb.append("    timeStart: ").append(toIndentedString(timeStart)).append("\n");
    sb.append("    timeEnd: ").append(toIndentedString(timeEnd)).append("\n");
    sb.append("    result: ").append(toIndentedString(result)).append("\n");
    sb.append("    payload: ").append(toIndentedString(payload)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
