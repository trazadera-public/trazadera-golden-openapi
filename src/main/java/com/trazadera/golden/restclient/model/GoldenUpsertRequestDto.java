/*
 * GOLDEN-API
 * Trazadera Golden API
 *
 * OpenAPI spec version: 16-SNAPSHOT
 * Contact: support@trazadera.com 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.trazadera.golden.restclient.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.trazadera.golden.restclient.model.SearchOptions;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.Map;
/**
 * Represents a record upsert (update or insert) request
 */
@Schema(description = "Represents a record upsert (update or insert) request")

public class GoldenUpsertRequestDto {
  @SerializedName("audit")
  private Boolean audit = null;

  @SerializedName("insert")
  private Boolean insert = null;

  @SerializedName("update")
  private Boolean update = null;

  @SerializedName("options")
  private SearchOptions options = null;

  @SerializedName("transformation")
  private String transformation = null;

  @SerializedName("record")
  private Map record = null;

  public GoldenUpsertRequestDto audit(Boolean audit) {
    this.audit = audit;
    return this;
  }

   /**
   * Flag to return audit information. By default is false.
   * @return audit
  **/
  @Schema(required = true, description = "Flag to return audit information. By default is false.")
  public Boolean isAudit() {
    return audit;
  }

  public void setAudit(Boolean audit) {
    this.audit = audit;
  }

  public GoldenUpsertRequestDto insert(Boolean insert) {
    this.insert = insert;
    return this;
  }

   /**
   * Optional forced insert flag. Default is false. If enabled, the record will always be inserted.
   * @return insert
  **/
  @Schema(description = "Optional forced insert flag. Default is false. If enabled, the record will always be inserted.")
  public Boolean isInsert() {
    return insert;
  }

  public void setInsert(Boolean insert) {
    this.insert = insert;
  }

  public GoldenUpsertRequestDto update(Boolean update) {
    this.update = update;
    return this;
  }

   /**
   * Optional forced update flag. Default is false. If enabled, the record will always be updated; if not found, an error is returned.
   * @return update
  **/
  @Schema(description = "Optional forced update flag. Default is false. If enabled, the record will always be updated; if not found, an error is returned.")
  public Boolean isUpdate() {
    return update;
  }

  public void setUpdate(Boolean update) {
    this.update = update;
  }

  public GoldenUpsertRequestDto options(SearchOptions options) {
    this.options = options;
    return this;
  }

   /**
   * Get options
   * @return options
  **/
  @Schema(description = "")
  public SearchOptions getOptions() {
    return options;
  }

  public void setOptions(SearchOptions options) {
    this.options = options;
  }

  public GoldenUpsertRequestDto transformation(String transformation) {
    this.transformation = transformation;
    return this;
  }

   /**
   * Optional transformation name. If indicated, the transformation must exist and will be applied to the search record before searching.
   * @return transformation
  **/
  @Schema(description = "Optional transformation name. If indicated, the transformation must exist and will be applied to the search record before searching.")
  public String getTransformation() {
    return transformation;
  }

  public void setTransformation(String transformation) {
    this.transformation = transformation;
  }

  public GoldenUpsertRequestDto record(Map record) {
    this.record = record;
    return this;
  }

   /**
   * Get record
   * @return record
  **/
  @Schema(required = true, description = "")
  public Map getRecord() {
    return record;
  }

  public void setRecord(Map record) {
    this.record = record;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoldenUpsertRequestDto goldenUpsertRequestDto = (GoldenUpsertRequestDto) o;
    return Objects.equals(this.audit, goldenUpsertRequestDto.audit) &&
        Objects.equals(this.insert, goldenUpsertRequestDto.insert) &&
        Objects.equals(this.update, goldenUpsertRequestDto.update) &&
        Objects.equals(this.options, goldenUpsertRequestDto.options) &&
        Objects.equals(this.transformation, goldenUpsertRequestDto.transformation) &&
        Objects.equals(this.record, goldenUpsertRequestDto.record);
  }

  @Override
  public int hashCode() {
    return Objects.hash(audit, insert, update, options, transformation, record);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoldenUpsertRequestDto {\n");
    
    sb.append("    audit: ").append(toIndentedString(audit)).append("\n");
    sb.append("    insert: ").append(toIndentedString(insert)).append("\n");
    sb.append("    update: ").append(toIndentedString(update)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    transformation: ").append(toIndentedString(transformation)).append("\n");
    sb.append("    record: ").append(toIndentedString(record)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
