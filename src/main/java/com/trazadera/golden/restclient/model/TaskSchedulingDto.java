/*
 * GOLDEN-API
 * Trazadera Golden API
 *
 * OpenAPI spec version: 16-SNAPSHOT
 * Contact: support@trazadera.com 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.trazadera.golden.restclient.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.trazadera.golden.restclient.model.TaskNotification;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;import java.util.Map;
import java.util.List;
import java.util.Map;
import org.threeten.bp.OffsetDateTime;
/**
 * Task scheduling.
 */
@Schema(description = "Task scheduling.")

public class TaskSchedulingDto {
  @SerializedName("id")
  private String id = null;

  @SerializedName("description")
  private String description = null;

  /**
   * Scheduling type.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    @SerializedName("ONE_OFF")
    ONE_OFF("ONE_OFF"),
    @SerializedName("CRON")
    CRON("CRON");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static TypeEnum fromValue(String input) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return TypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("type")
  private TypeEnum type = null;

  @SerializedName("clazz")
  private String clazz = null;

  /**
   * Task scope.
   */
  @JsonAdapter(ScopeEnum.Adapter.class)
  public enum ScopeEnum {
    @SerializedName("INTERNAL")
    INTERNAL("INTERNAL"),
    @SerializedName("USER")
    USER("USER");

    private String value;

    ScopeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ScopeEnum fromValue(String input) {
      for (ScopeEnum b : ScopeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ScopeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ScopeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public ScopeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return ScopeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("scope")
  private ScopeEnum scope = null;

  @SerializedName("parameters")
  private Map<String, String> parameters = null;

  @SerializedName("notification")
  private TaskNotification notification = null;

  @SerializedName("cron")
  private String cron = null;

  @SerializedName("cronDescription")
  private String cronDescription = null;

  @SerializedName("lastExecution")
  private OffsetDateTime lastExecution = null;

  @SerializedName("nextExecution")
  private OffsetDateTime nextExecution = null;

  @SerializedName("upcomingExecutions")
  private List<OffsetDateTime> upcomingExecutions = null;

  @SerializedName("enabled")
  private Boolean enabled = null;

  public TaskSchedulingDto id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Scheduling identifier.
   * @return id
  **/
  @Schema(description = "Scheduling identifier.")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public TaskSchedulingDto description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Scheduling description.
   * @return description
  **/
  @Schema(description = "Scheduling description.")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public TaskSchedulingDto type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Scheduling type.
   * @return type
  **/
  @Schema(description = "Scheduling type.")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public TaskSchedulingDto clazz(String clazz) {
    this.clazz = clazz;
    return this;
  }

   /**
   * Task implementation full class name.
   * @return clazz
  **/
  @Schema(description = "Task implementation full class name.")
  public String getClazz() {
    return clazz;
  }

  public void setClazz(String clazz) {
    this.clazz = clazz;
  }

  public TaskSchedulingDto scope(ScopeEnum scope) {
    this.scope = scope;
    return this;
  }

   /**
   * Task scope.
   * @return scope
  **/
  @Schema(description = "Task scope.")
  public ScopeEnum getScope() {
    return scope;
  }

  public void setScope(ScopeEnum scope) {
    this.scope = scope;
  }

  public TaskSchedulingDto parameters(Map<String, String> parameters) {
    this.parameters = parameters;
    return this;
  }

  public TaskSchedulingDto putParametersItem(String key, String parametersItem) {
    if (this.parameters == null) {
      this.parameters = new HashMap<String, String>();
    }
    this.parameters.put(key, parametersItem);
    return this;
  }

   /**
   * Map of task parameters. Specific to the task.
   * @return parameters
  **/
  @Schema(description = "Map of task parameters. Specific to the task.")
  public Map<String, String> getParameters() {
    return parameters;
  }

  public void setParameters(Map<String, String> parameters) {
    this.parameters = parameters;
  }

  public TaskSchedulingDto notification(TaskNotification notification) {
    this.notification = notification;
    return this;
  }

   /**
   * Get notification
   * @return notification
  **/
  @Schema(description = "")
  public TaskNotification getNotification() {
    return notification;
  }

  public void setNotification(TaskNotification notification) {
    this.notification = notification;
  }

  public TaskSchedulingDto cron(String cron) {
    this.cron = cron;
    return this;
  }

   /**
   * Cron expression.
   * @return cron
  **/
  @Schema(description = "Cron expression.")
  public String getCron() {
    return cron;
  }

  public void setCron(String cron) {
    this.cron = cron;
  }

  public TaskSchedulingDto cronDescription(String cronDescription) {
    this.cronDescription = cronDescription;
    return this;
  }

   /**
   * Cron expression human description.
   * @return cronDescription
  **/
  @Schema(description = "Cron expression human description.")
  public String getCronDescription() {
    return cronDescription;
  }

  public void setCronDescription(String cronDescription) {
    this.cronDescription = cronDescription;
  }

  public TaskSchedulingDto lastExecution(OffsetDateTime lastExecution) {
    this.lastExecution = lastExecution;
    return this;
  }

   /**
   * Last execution instant.
   * @return lastExecution
  **/
  @Schema(description = "Last execution instant.")
  public OffsetDateTime getLastExecution() {
    return lastExecution;
  }

  public void setLastExecution(OffsetDateTime lastExecution) {
    this.lastExecution = lastExecution;
  }

  public TaskSchedulingDto nextExecution(OffsetDateTime nextExecution) {
    this.nextExecution = nextExecution;
    return this;
  }

   /**
   * Next execution instant.
   * @return nextExecution
  **/
  @Schema(description = "Next execution instant.")
  public OffsetDateTime getNextExecution() {
    return nextExecution;
  }

  public void setNextExecution(OffsetDateTime nextExecution) {
    this.nextExecution = nextExecution;
  }

  public TaskSchedulingDto upcomingExecutions(List<OffsetDateTime> upcomingExecutions) {
    this.upcomingExecutions = upcomingExecutions;
    return this;
  }

  public TaskSchedulingDto addUpcomingExecutionsItem(OffsetDateTime upcomingExecutionsItem) {
    if (this.upcomingExecutions == null) {
      this.upcomingExecutions = new ArrayList<OffsetDateTime>();
    }
    this.upcomingExecutions.add(upcomingExecutionsItem);
    return this;
  }

   /**
   * Upcoming execution instants.
   * @return upcomingExecutions
  **/
  @Schema(description = "Upcoming execution instants.")
  public List<OffsetDateTime> getUpcomingExecutions() {
    return upcomingExecutions;
  }

  public void setUpcomingExecutions(List<OffsetDateTime> upcomingExecutions) {
    this.upcomingExecutions = upcomingExecutions;
  }

  public TaskSchedulingDto enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

   /**
   * Enabled flag.
   * @return enabled
  **/
  @Schema(description = "Enabled flag.")
  public Boolean isEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TaskSchedulingDto taskSchedulingDto = (TaskSchedulingDto) o;
    return Objects.equals(this.id, taskSchedulingDto.id) &&
        Objects.equals(this.description, taskSchedulingDto.description) &&
        Objects.equals(this.type, taskSchedulingDto.type) &&
        Objects.equals(this.clazz, taskSchedulingDto.clazz) &&
        Objects.equals(this.scope, taskSchedulingDto.scope) &&
        Objects.equals(this.parameters, taskSchedulingDto.parameters) &&
        Objects.equals(this.notification, taskSchedulingDto.notification) &&
        Objects.equals(this.cron, taskSchedulingDto.cron) &&
        Objects.equals(this.cronDescription, taskSchedulingDto.cronDescription) &&
        Objects.equals(this.lastExecution, taskSchedulingDto.lastExecution) &&
        Objects.equals(this.nextExecution, taskSchedulingDto.nextExecution) &&
        Objects.equals(this.upcomingExecutions, taskSchedulingDto.upcomingExecutions) &&
        Objects.equals(this.enabled, taskSchedulingDto.enabled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, description, type, clazz, scope, parameters, notification, cron, cronDescription, lastExecution, nextExecution, upcomingExecutions, enabled);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TaskSchedulingDto {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    clazz: ").append(toIndentedString(clazz)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    notification: ").append(toIndentedString(notification)).append("\n");
    sb.append("    cron: ").append(toIndentedString(cron)).append("\n");
    sb.append("    cronDescription: ").append(toIndentedString(cronDescription)).append("\n");
    sb.append("    lastExecution: ").append(toIndentedString(lastExecution)).append("\n");
    sb.append("    nextExecution: ").append(toIndentedString(nextExecution)).append("\n");
    sb.append("    upcomingExecutions: ").append(toIndentedString(upcomingExecutions)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
