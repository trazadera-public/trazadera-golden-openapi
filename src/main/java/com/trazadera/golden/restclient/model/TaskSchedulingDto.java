/*
 * GOLDEN-API
 * Trazadera Golden API
 *
 * OpenAPI spec version: 1.9.0
 * Contact: support@trazadera.com 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.trazadera.golden.restclient.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Task scheduling.
 */
@Schema(description = "Task scheduling.")

public class TaskSchedulingDto {
  @SerializedName("id")
  private String id = null;

  @SerializedName("description")
  private String description = null;

  /**
   * Scheduling type.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    @SerializedName("ONE_OFF")
    ONE_OFF("ONE_OFF"),
    @SerializedName("CRON")
    CRON("CRON");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static TypeEnum fromValue(String input) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return TypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("type")
  private TypeEnum type = null;

  @SerializedName("clazz")
  private String clazz = null;

  /**
   * Task scope.
   */
  @JsonAdapter(ScopeEnum.Adapter.class)
  public enum ScopeEnum {
    @SerializedName("INTERNAL")
    INTERNAL("INTERNAL"),
    @SerializedName("USER")
    USER("USER");

    private String value;

    ScopeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ScopeEnum fromValue(String input) {
      for (ScopeEnum b : ScopeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ScopeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ScopeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public ScopeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return ScopeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("scope")
  private ScopeEnum scope = null;

  /**
   * Task clustering behavior.
   */
  @JsonAdapter(ClusterEnum.Adapter.class)
  public enum ClusterEnum {
    @SerializedName("ONE_NODE")
    ONE_NODE("ONE_NODE"),
    @SerializedName("ALL_NODES")
    ALL_NODES("ALL_NODES");

    private String value;

    ClusterEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ClusterEnum fromValue(String input) {
      for (ClusterEnum b : ClusterEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ClusterEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ClusterEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public ClusterEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return ClusterEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("cluster")
  private ClusterEnum cluster = null;

  public TaskSchedulingDto id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Scheduling unique identifier.
   * @return id
  **/
  @Schema(description = "Scheduling unique identifier.")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public TaskSchedulingDto description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Scheduling description.
   * @return description
  **/
  @Schema(description = "Scheduling description.")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public TaskSchedulingDto type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Scheduling type.
   * @return type
  **/
  @Schema(description = "Scheduling type.")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public TaskSchedulingDto clazz(String clazz) {
    this.clazz = clazz;
    return this;
  }

   /**
   * Task implementation full class name.
   * @return clazz
  **/
  @Schema(description = "Task implementation full class name.")
  public String getClazz() {
    return clazz;
  }

  public void setClazz(String clazz) {
    this.clazz = clazz;
  }

  public TaskSchedulingDto scope(ScopeEnum scope) {
    this.scope = scope;
    return this;
  }

   /**
   * Task scope.
   * @return scope
  **/
  @Schema(description = "Task scope.")
  public ScopeEnum getScope() {
    return scope;
  }

  public void setScope(ScopeEnum scope) {
    this.scope = scope;
  }

  public TaskSchedulingDto cluster(ClusterEnum cluster) {
    this.cluster = cluster;
    return this;
  }

   /**
   * Task clustering behavior.
   * @return cluster
  **/
  @Schema(description = "Task clustering behavior.")
  public ClusterEnum getCluster() {
    return cluster;
  }

  public void setCluster(ClusterEnum cluster) {
    this.cluster = cluster;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TaskSchedulingDto taskSchedulingDto = (TaskSchedulingDto) o;
    return Objects.equals(this.id, taskSchedulingDto.id) &&
        Objects.equals(this.description, taskSchedulingDto.description) &&
        Objects.equals(this.type, taskSchedulingDto.type) &&
        Objects.equals(this.clazz, taskSchedulingDto.clazz) &&
        Objects.equals(this.scope, taskSchedulingDto.scope) &&
        Objects.equals(this.cluster, taskSchedulingDto.cluster);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, description, type, clazz, scope, cluster);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TaskSchedulingDto {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    clazz: ").append(toIndentedString(clazz)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    cluster: ").append(toIndentedString(cluster)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
