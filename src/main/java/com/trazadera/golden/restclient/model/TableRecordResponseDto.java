/*
 * GOLDEN-API
 * Trazadera Golden API
 *
 * OpenAPI spec version: 16-SNAPSHOT
 * Contact: support@trazadera.com 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.trazadera.golden.restclient.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.trazadera.golden.restclient.model.Column;
import com.trazadera.golden.restclient.model.Dataset;
import com.trazadera.golden.restclient.model.Principal;
import com.trazadera.golden.restclient.model.Record;
import com.trazadera.golden.restclient.model.TableDto;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;import java.util.Map;
import java.util.List;
/**
 * Represents one record and optional expanded data.
 */
@Schema(description = "Represents one record and optional expanded data.")

public class TableRecordResponseDto {
  @SerializedName("table")
  private TableDto table = null;

  @SerializedName("record")
  private Map record = null;

  @SerializedName("columns")
  private List<String> columns = null;

  @SerializedName("merged")
  private List<Record> merged = null;

  @SerializedName("columnMap")
  private java.util.Map columnMap = null;

  @SerializedName("datasets")
  private java.util.Map datasets = null;

  @SerializedName("principals")
  private java.util.Map principals = null;

  @SerializedName("errors")
  private List<String> errors = null;

  @SerializedName("messages")
  private List<String> messages = null;

  public TableRecordResponseDto table(TableDto table) {
    this.table = table;
    return this;
  }

   /**
   * Get table
   * @return table
  **/
  @Schema(description = "")
  public TableDto getTable() {
    return table;
  }

  public void setTable(TableDto table) {
    this.table = table;
  }

  public TableRecordResponseDto record(Map record) {
    this.record = record;
    return this;
  }

   /**
   * Get record
   * @return record
  **/
  @Schema(description = "")
  public Map getRecord() {
    return record;
  }

  public void setRecord(Map record) {
    this.record = record;
  }

  public TableRecordResponseDto columns(List<String> columns) {
    this.columns = columns;
    return this;
  }

  public TableRecordResponseDto addColumnsItem(String columnsItem) {
    if (this.columns == null) {
      this.columns = new ArrayList<String>();
    }
    this.columns.add(columnsItem);
    return this;
  }

   /**
   * Basic columns for this record.
   * @return columns
  **/
  @Schema(description = "Basic columns for this record.")
  public List<String> getColumns() {
    return columns;
  }

  public void setColumns(List<String> columns) {
    this.columns = columns;
  }

  public TableRecordResponseDto merged(List<Record> merged) {
    this.merged = merged;
    return this;
  }

  public TableRecordResponseDto addMergedItem(Record mergedItem) {
    if (this.merged == null) {
      this.merged = new ArrayList<Record>();
    }
    this.merged.add(mergedItem);
    return this;
  }

   /**
   * If this record is the result of a merge, these are the original records.
   * @return merged
  **/
  @Schema(description = "If this record is the result of a merge, these are the original records.")
  public List<Record> getMerged() {
    return merged;
  }

  public void setMerged(List<Record> merged) {
    this.merged = merged;
  }

  public TableRecordResponseDto columnMap(java.util.Map columnMap) {
    this.columnMap = columnMap;
    return this;
  }

  public TableRecordResponseDto putColumnMapItem(String key, Column columnMapItem) {
    if (this.columnMap == null) {
      this.columnMap = new HashMap<String, Column>();
    }
    this.columnMap.put(key, columnMapItem);
    return this;
  }

   /**
   * Map of columns with detailed information.
   * @return columnMap
  **/
  @Schema(description = "Map of columns with detailed information.")
  public java.util.Map getColumnMap() {
    return columnMap;
  }

  public void setColumnMap(java.util.Map columnMap) {
    this.columnMap = columnMap;
  }

  public TableRecordResponseDto datasets(java.util.Map datasets) {
    this.datasets = datasets;
    return this;
  }

  public TableRecordResponseDto putDatasetsItem(String key, Dataset datasetsItem) {
    if (this.datasets == null) {
      this.datasets = new HashMap<String, Dataset>();
    }
    this.datasets.put(key, datasetsItem);
    return this;
  }

   /**
   * Map of datasets.
   * @return datasets
  **/
  @Schema(description = "Map of datasets.")
  public java.util.Map getDatasets() {
    return datasets;
  }

  public void setDatasets(java.util.Map datasets) {
    this.datasets = datasets;
  }

  public TableRecordResponseDto principals(java.util.Map principals) {
    this.principals = principals;
    return this;
  }

  public TableRecordResponseDto putPrincipalsItem(String key, Principal principalsItem) {
    if (this.principals == null) {
      this.principals = new HashMap<String, Principal>();
    }
    this.principals.put(key, principalsItem);
    return this;
  }

   /**
   * Map of golden principals. To decorate the audit information.
   * @return principals
  **/
  @Schema(description = "Map of golden principals. To decorate the audit information.")
  public java.util.Map getPrincipals() {
    return principals;
  }

  public void setPrincipals(java.util.Map principals) {
    this.principals = principals;
  }

  public TableRecordResponseDto errors(List<String> errors) {
    this.errors = errors;
    return this;
  }

  public TableRecordResponseDto addErrorsItem(String errorsItem) {
    if (this.errors == null) {
      this.errors = new ArrayList<String>();
    }
    this.errors.add(errorsItem);
    return this;
  }

   /**
   * List of errors. If HTTP response represents an error (4xx or 5xx) this will contain a list of errors. Otherwise, not present.
   * @return errors
  **/
  @Schema(description = "List of errors. If HTTP response represents an error (4xx or 5xx) this will contain a list of errors. Otherwise, not present.")
  public List<String> getErrors() {
    return errors;
  }

  public void setErrors(List<String> errors) {
    this.errors = errors;
  }

  public TableRecordResponseDto messages(List<String> messages) {
    this.messages = messages;
    return this;
  }

  public TableRecordResponseDto addMessagesItem(String messagesItem) {
    if (this.messages == null) {
      this.messages = new ArrayList<String>();
    }
    this.messages.add(messagesItem);
    return this;
  }

   /**
   * Optional informational messages. If present, the request was successful and response code will be 2xx.
   * @return messages
  **/
  @Schema(description = "Optional informational messages. If present, the request was successful and response code will be 2xx.")
  public List<String> getMessages() {
    return messages;
  }

  public void setMessages(List<String> messages) {
    this.messages = messages;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TableRecordResponseDto tableRecordResponseDto = (TableRecordResponseDto) o;
    return Objects.equals(this.table, tableRecordResponseDto.table) &&
        Objects.equals(this.record, tableRecordResponseDto.record) &&
        Objects.equals(this.columns, tableRecordResponseDto.columns) &&
        Objects.equals(this.merged, tableRecordResponseDto.merged) &&
        Objects.equals(this.columnMap, tableRecordResponseDto.columnMap) &&
        Objects.equals(this.datasets, tableRecordResponseDto.datasets) &&
        Objects.equals(this.principals, tableRecordResponseDto.principals) &&
        Objects.equals(this.errors, tableRecordResponseDto.errors) &&
        Objects.equals(this.messages, tableRecordResponseDto.messages);
  }

  @Override
  public int hashCode() {
    return Objects.hash(table, record, columns, merged, columnMap, datasets, principals, errors, messages);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TableRecordResponseDto {\n");
    
    sb.append("    table: ").append(toIndentedString(table)).append("\n");
    sb.append("    record: ").append(toIndentedString(record)).append("\n");
    sb.append("    columns: ").append(toIndentedString(columns)).append("\n");
    sb.append("    merged: ").append(toIndentedString(merged)).append("\n");
    sb.append("    columnMap: ").append(toIndentedString(columnMap)).append("\n");
    sb.append("    datasets: ").append(toIndentedString(datasets)).append("\n");
    sb.append("    principals: ").append(toIndentedString(principals)).append("\n");
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("    messages: ").append(toIndentedString(messages)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
