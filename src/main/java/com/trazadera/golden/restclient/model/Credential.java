/*
 * GOLDEN-API
 * Trazadera Golden API
 *
 * OpenAPI spec version: 16-SNAPSHOT
 * Contact: support@trazadera.com 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.trazadera.golden.restclient.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.trazadera.golden.restclient.model.Dependency;
import com.trazadera.golden.restclient.model.Resource;
import com.trazadera.golden.restclient.model.Validation;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;
/**
 * Credentials to authenticate resources.
 */
@Schema(description = "Credentials to authenticate resources.")

public class Credential extends Resource implements OneOfResourceExchangeDtoResourcesItems, OneOfResourceListResponseDtoResourcesItems, OneOfResourceResponseDtoResource {
  /**
   * Type of credential. Please note that NONE is also a valid type.
   */
  @JsonAdapter(CredentialTypeEnum.Adapter.class)
  public enum CredentialTypeEnum {
    @SerializedName("NONE")
    NONE("NONE"),
    @SerializedName("PASSWORD")
    PASSWORD("PASSWORD"),
    @SerializedName("SSH")
    SSH("SSH"),
    @SerializedName("TOKEN")
    TOKEN("TOKEN");

    private String value;

    CredentialTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static CredentialTypeEnum fromValue(String input) {
      for (CredentialTypeEnum b : CredentialTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<CredentialTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CredentialTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public CredentialTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return CredentialTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("credentialType")
  private CredentialTypeEnum credentialType = null;

  @SerializedName("user")
  private String user = null;

  @SerializedName("password")
  private String password = null;

  @SerializedName("sshPublicCertificate")
  private String sshPublicCertificate = null;

  @SerializedName("sshPrivateCertificate")
  private String sshPrivateCertificate = null;

  @SerializedName("token")
  private String token = null;

  public Credential credentialType(CredentialTypeEnum credentialType) {
    this.credentialType = credentialType;
    return this;
  }

   /**
   * Type of credential. Please note that NONE is also a valid type.
   * @return credentialType
  **/
  @Schema(required = true, description = "Type of credential. Please note that NONE is also a valid type.")
  public CredentialTypeEnum getCredentialType() {
    return credentialType;
  }

  public void setCredentialType(CredentialTypeEnum credentialType) {
    this.credentialType = credentialType;
  }

  public Credential user(String user) {
    this.user = user;
    return this;
  }

   /**
   * User name.
   * @return user
  **/
  @Schema(description = "User name.")
  public String getUser() {
    return user;
  }

  public void setUser(String user) {
    this.user = user;
  }

  public Credential password(String password) {
    this.password = password;
    return this;
  }

   /**
   * Password.
   * @return password
  **/
  @Schema(description = "Password.")
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }

  public Credential sshPublicCertificate(String sshPublicCertificate) {
    this.sshPublicCertificate = sshPublicCertificate;
    return this;
  }

   /**
   * Public SSH certificate.
   * @return sshPublicCertificate
  **/
  @Schema(description = "Public SSH certificate.")
  public String getSshPublicCertificate() {
    return sshPublicCertificate;
  }

  public void setSshPublicCertificate(String sshPublicCertificate) {
    this.sshPublicCertificate = sshPublicCertificate;
  }

  public Credential sshPrivateCertificate(String sshPrivateCertificate) {
    this.sshPrivateCertificate = sshPrivateCertificate;
    return this;
  }

   /**
   * Private SSH certificate.
   * @return sshPrivateCertificate
  **/
  @Schema(description = "Private SSH certificate.")
  public String getSshPrivateCertificate() {
    return sshPrivateCertificate;
  }

  public void setSshPrivateCertificate(String sshPrivateCertificate) {
    this.sshPrivateCertificate = sshPrivateCertificate;
  }

  public Credential token(String token) {
    this.token = token;
    return this;
  }

   /**
   * Token.
   * @return token
  **/
  @Schema(description = "Token.")
  public String getToken() {
    return token;
  }

  public void setToken(String token) {
    this.token = token;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Credential credential = (Credential) o;
    return Objects.equals(this.credentialType, credential.credentialType) &&
        Objects.equals(this.user, credential.user) &&
        Objects.equals(this.password, credential.password) &&
        Objects.equals(this.sshPublicCertificate, credential.sshPublicCertificate) &&
        Objects.equals(this.sshPrivateCertificate, credential.sshPrivateCertificate) &&
        Objects.equals(this.token, credential.token) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(credentialType, user, password, sshPublicCertificate, sshPrivateCertificate, token, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Credential {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    credentialType: ").append(toIndentedString(credentialType)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    sshPublicCertificate: ").append(toIndentedString(sshPublicCertificate)).append("\n");
    sb.append("    sshPrivateCertificate: ").append(toIndentedString(sshPrivateCertificate)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
