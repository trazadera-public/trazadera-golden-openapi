/*
 * GOLDEN-API
 * Trazadera Golden API
 *
 * OpenAPI spec version: 16-SNAPSHOT
 * Contact: support@trazadera.com 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.trazadera.golden.restclient.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.trazadera.golden.restclient.model.Dependency;
import com.trazadera.golden.restclient.model.IndexerMapping;
import com.trazadera.golden.restclient.model.Resource;
import com.trazadera.golden.restclient.model.Validation;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.OffsetDateTime;
/**
 * An indexer is used to calculate indexes for records.
 */
@Schema(description = "An indexer is used to calculate indexes for records.")

public class Indexer extends Resource implements OneOfResourceExchangeDtoResourcesItems, OneOfResourceListResponseDtoResourcesItems, OneOfResourceResponseDtoResource {
  @SerializedName("dataset")
  private String dataset = null;

  /**
   * A text option is a transformation that can be applied to a text to normalize it.
   */
  @JsonAdapter(DefaultKeyOptionsEnum.Adapter.class)
  public enum DefaultKeyOptionsEnum {
    @SerializedName("NONE")
    NONE("NONE"),
    @SerializedName("IGNORE_CASE")
    IGNORE_CASE("IGNORE_CASE"),
    @SerializedName("IGNORE_SPACES")
    IGNORE_SPACES("IGNORE_SPACES"),
    @SerializedName("ONLY_ALPHANUMERIC")
    ONLY_ALPHANUMERIC("ONLY_ALPHANUMERIC"),
    @SerializedName("IGNORE_ACCENTS")
    IGNORE_ACCENTS("IGNORE_ACCENTS"),
    @SerializedName("AGGRESSIVE")
    AGGRESSIVE("AGGRESSIVE");

    private String value;

    DefaultKeyOptionsEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static DefaultKeyOptionsEnum fromValue(String input) {
      for (DefaultKeyOptionsEnum b : DefaultKeyOptionsEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<DefaultKeyOptionsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DefaultKeyOptionsEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public DefaultKeyOptionsEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return DefaultKeyOptionsEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("defaultKeyOptions")
  private List<DefaultKeyOptionsEnum> defaultKeyOptions = null;

  @SerializedName("mappings")
  private List<IndexerMapping> mappings = new ArrayList<IndexerMapping>();

  public Indexer dataset(String dataset) {
    this.dataset = dataset;
    return this;
  }

   /**
   * The dataset to use.
   * @return dataset
  **/
  @Schema(description = "The dataset to use.")
  public String getDataset() {
    return dataset;
  }

  public void setDataset(String dataset) {
    this.dataset = dataset;
  }

  public Indexer defaultKeyOptions(List<DefaultKeyOptionsEnum> defaultKeyOptions) {
    this.defaultKeyOptions = defaultKeyOptions;
    return this;
  }

  public Indexer addDefaultKeyOptionsItem(DefaultKeyOptionsEnum defaultKeyOptionsItem) {
    if (this.defaultKeyOptions == null) {
      this.defaultKeyOptions = new ArrayList<DefaultKeyOptionsEnum>();
    }
    this.defaultKeyOptions.add(defaultKeyOptionsItem);
    return this;
  }

   /**
   * Default key options to use when calculating indexes.
   * @return defaultKeyOptions
  **/
  @Schema(description = "Default key options to use when calculating indexes.")
  public List<DefaultKeyOptionsEnum> getDefaultKeyOptions() {
    return defaultKeyOptions;
  }

  public void setDefaultKeyOptions(List<DefaultKeyOptionsEnum> defaultKeyOptions) {
    this.defaultKeyOptions = defaultKeyOptions;
  }

  public Indexer mappings(List<IndexerMapping> mappings) {
    this.mappings = mappings;
    return this;
  }

  public Indexer addMappingsItem(IndexerMapping mappingsItem) {
    this.mappings.add(mappingsItem);
    return this;
  }

   /**
   * Mappings to calculate indexes.
   * @return mappings
  **/
  @Schema(required = true, description = "Mappings to calculate indexes.")
  public List<IndexerMapping> getMappings() {
    return mappings;
  }

  public void setMappings(List<IndexerMapping> mappings) {
    this.mappings = mappings;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Indexer indexer = (Indexer) o;
    return Objects.equals(this.dataset, indexer.dataset) &&
        Objects.equals(this.defaultKeyOptions, indexer.defaultKeyOptions) &&
        Objects.equals(this.mappings, indexer.mappings) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataset, defaultKeyOptions, mappings, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Indexer {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    dataset: ").append(toIndentedString(dataset)).append("\n");
    sb.append("    defaultKeyOptions: ").append(toIndentedString(defaultKeyOptions)).append("\n");
    sb.append("    mappings: ").append(toIndentedString(mappings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
