/*
 * GOLDEN-API
 * Trazadera Golden API
 *
 * OpenAPI spec version: 15
 * Contact: support@trazadera.com 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.trazadera.golden.restclient.api;

import com.trazadera.golden.restclient.invoker.ApiCallback;
import com.trazadera.golden.restclient.invoker.ApiClient;
import com.trazadera.golden.restclient.invoker.ApiException;
import com.trazadera.golden.restclient.invoker.ApiResponse;
import com.trazadera.golden.restclient.invoker.Configuration;
import com.trazadera.golden.restclient.invoker.Pair;
import com.trazadera.golden.restclient.invoker.ProgressRequestBody;
import com.trazadera.golden.restclient.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.trazadera.golden.restclient.model.BaseResponseDto;
import com.trazadera.golden.restclient.model.GoldenBucketFullResponseDto;
import com.trazadera.golden.restclient.model.GoldenBucketPageResponseDto;
import com.trazadera.golden.restclient.model.GoldenDeleteBucketRequestDto;
import com.trazadera.golden.restclient.model.GoldenDeleteBucketResponseDto;
import com.trazadera.golden.restclient.model.GoldenDeleteRequestDto;
import com.trazadera.golden.restclient.model.GoldenDeleteResponseDto;
import com.trazadera.golden.restclient.model.GoldenDisconnectBucketRequestDto;
import com.trazadera.golden.restclient.model.GoldenDisconnectBucketResponseDto;
import com.trazadera.golden.restclient.model.GoldenMergeBucketRequestDto;
import com.trazadera.golden.restclient.model.GoldenMergeBucketResponseDto;
import com.trazadera.golden.restclient.model.GoldenSearchRequestDto;
import com.trazadera.golden.restclient.model.GoldenSearchResponseDto;
import com.trazadera.golden.restclient.model.GoldenSplitBucketRequestDto;
import com.trazadera.golden.restclient.model.GoldenSplitBucketResponseDto;
import com.trazadera.golden.restclient.model.GoldenUpsertRequestDto;
import com.trazadera.golden.restclient.model.GoldenUpsertResponseDto;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;import java.util.Map;
import java.util.List;
import java.util.Map;

public class GoldenApi {
    private ApiClient apiClient;
    private Map<String, String> headers;

    public GoldenApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GoldenApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public void setHeadersOverrides(Map<String, String> headers) {
        this.headers = headers;
    }

    /**
     * Build call for deleteBucket
     * @param entity Entity identifier (required)
     * @param bucket Bucket identifier (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteBucketCall(String entity, String bucket, GoldenDeleteBucketRequestDto body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/golden/{entity}/buckets/delete/{bucket}"
            .replaceAll("\\{" + "entity" + "\\}", apiClient.escapeString(entity.toString()))
            .replaceAll("\\{" + "bucket" + "\\}", apiClient.escapeString(bucket.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteBucketValidateBeforeCall(String entity, String bucket, GoldenDeleteBucketRequestDto body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'entity' is set
        if (entity == null) {
            throw new ApiException("Missing the required parameter 'entity' when calling deleteBucket(Async)");
        }
        // verify the required parameter 'bucket' is set
        if (bucket == null) {
            throw new ApiException("Missing the required parameter 'bucket' when calling deleteBucket(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteBucketCall(entity, bucket, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Deletes a bucket.
     * Locates a bucket and deletes the bucket and the records in the bucket. The record deletion can be physical or logical (but bucket deletion is always physical). Entity must be enabled. Requires ADMIN or STEWARD role.
     * @param entity Entity identifier (required)
     * @param bucket Bucket identifier (required)
     * @param body  (optional)
     * @return GoldenDeleteBucketResponseDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GoldenDeleteBucketResponseDto deleteBucket(String entity, String bucket, GoldenDeleteBucketRequestDto body) throws ApiException {
        ApiResponse<GoldenDeleteBucketResponseDto> resp = deleteBucketWithHttpInfo(entity, bucket, body);
        return resp.getData();
    }

    /**
     * Deletes a bucket.
     * Locates a bucket and deletes the bucket and the records in the bucket. The record deletion can be physical or logical (but bucket deletion is always physical). Entity must be enabled. Requires ADMIN or STEWARD role.
     * @param entity Entity identifier (required)
     * @param bucket Bucket identifier (required)
     * @param body  (optional)
     * @return ApiResponse&lt;GoldenDeleteBucketResponseDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GoldenDeleteBucketResponseDto> deleteBucketWithHttpInfo(String entity, String bucket, GoldenDeleteBucketRequestDto body) throws ApiException {
        com.squareup.okhttp.Call call = deleteBucketValidateBeforeCall(entity, bucket, body, null, null);
        Type localVarReturnType = new TypeToken<GoldenDeleteBucketResponseDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Deletes a bucket. (asynchronously)
     * Locates a bucket and deletes the bucket and the records in the bucket. The record deletion can be physical or logical (but bucket deletion is always physical). Entity must be enabled. Requires ADMIN or STEWARD role.
     * @param entity Entity identifier (required)
     * @param bucket Bucket identifier (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteBucketAsync(String entity, String bucket, GoldenDeleteBucketRequestDto body, final ApiCallback<GoldenDeleteBucketResponseDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteBucketValidateBeforeCall(entity, bucket, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GoldenDeleteBucketResponseDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteRecord
     * @param body  (required)
     * @param entity Entity identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteRecordCall(GoldenDeleteRequestDto body, String entity, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/golden/{entity}/delete"
            .replaceAll("\\{" + "entity" + "\\}", apiClient.escapeString(entity.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteRecordValidateBeforeCall(GoldenDeleteRequestDto body, String entity, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling deleteRecord(Async)");
        }
        // verify the required parameter 'entity' is set
        if (entity == null) {
            throw new ApiException("Missing the required parameter 'entity' when calling deleteRecord(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteRecordCall(body, entity, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Deletes a golden record from an entity.
     * Locates a golden record by identifier into the indicated entity (table) and deletes it. Entity must be enabled. If the entity has history enabled then logical delete will take place, otherwise physical delete. Record audit information is not returned. Requires ADMIN or STEWARD role.
     * @param body  (required)
     * @param entity Entity identifier (required)
     * @return GoldenDeleteResponseDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GoldenDeleteResponseDto deleteRecord(GoldenDeleteRequestDto body, String entity) throws ApiException {
        ApiResponse<GoldenDeleteResponseDto> resp = deleteRecordWithHttpInfo(body, entity);
        return resp.getData();
    }

    /**
     * Deletes a golden record from an entity.
     * Locates a golden record by identifier into the indicated entity (table) and deletes it. Entity must be enabled. If the entity has history enabled then logical delete will take place, otherwise physical delete. Record audit information is not returned. Requires ADMIN or STEWARD role.
     * @param body  (required)
     * @param entity Entity identifier (required)
     * @return ApiResponse&lt;GoldenDeleteResponseDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GoldenDeleteResponseDto> deleteRecordWithHttpInfo(GoldenDeleteRequestDto body, String entity) throws ApiException {
        com.squareup.okhttp.Call call = deleteRecordValidateBeforeCall(body, entity, null, null);
        Type localVarReturnType = new TypeToken<GoldenDeleteResponseDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Deletes a golden record from an entity. (asynchronously)
     * Locates a golden record by identifier into the indicated entity (table) and deletes it. Entity must be enabled. If the entity has history enabled then logical delete will take place, otherwise physical delete. Record audit information is not returned. Requires ADMIN or STEWARD role.
     * @param body  (required)
     * @param entity Entity identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteRecordAsync(GoldenDeleteRequestDto body, String entity, final ApiCallback<GoldenDeleteResponseDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteRecordValidateBeforeCall(body, entity, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GoldenDeleteResponseDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for disconnectBucket
     * @param entity Entity identifier (required)
     * @param bucket Bucket identifier (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call disconnectBucketCall(String entity, String bucket, GoldenDisconnectBucketRequestDto body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/golden/{entity}/buckets/disconnect/{bucket}"
            .replaceAll("\\{" + "entity" + "\\}", apiClient.escapeString(entity.toString()))
            .replaceAll("\\{" + "bucket" + "\\}", apiClient.escapeString(bucket.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call disconnectBucketValidateBeforeCall(String entity, String bucket, GoldenDisconnectBucketRequestDto body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'entity' is set
        if (entity == null) {
            throw new ApiException("Missing the required parameter 'entity' when calling disconnectBucket(Async)");
        }
        // verify the required parameter 'bucket' is set
        if (bucket == null) {
            throw new ApiException("Missing the required parameter 'bucket' when calling disconnectBucket(Async)");
        }
        
        com.squareup.okhttp.Call call = disconnectBucketCall(entity, bucket, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Disconnects a bucket.
     * Locates a bucket and disconnects all the records in the bucket. The disconnected records will be removed from the bucket but not deleted. Besides, the system will mark the records to avoid future connections. Entity must be enabled. Requires ADMIN or STEWARD role.
     * @param entity Entity identifier (required)
     * @param bucket Bucket identifier (required)
     * @param body  (optional)
     * @return GoldenDisconnectBucketResponseDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GoldenDisconnectBucketResponseDto disconnectBucket(String entity, String bucket, GoldenDisconnectBucketRequestDto body) throws ApiException {
        ApiResponse<GoldenDisconnectBucketResponseDto> resp = disconnectBucketWithHttpInfo(entity, bucket, body);
        return resp.getData();
    }

    /**
     * Disconnects a bucket.
     * Locates a bucket and disconnects all the records in the bucket. The disconnected records will be removed from the bucket but not deleted. Besides, the system will mark the records to avoid future connections. Entity must be enabled. Requires ADMIN or STEWARD role.
     * @param entity Entity identifier (required)
     * @param bucket Bucket identifier (required)
     * @param body  (optional)
     * @return ApiResponse&lt;GoldenDisconnectBucketResponseDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GoldenDisconnectBucketResponseDto> disconnectBucketWithHttpInfo(String entity, String bucket, GoldenDisconnectBucketRequestDto body) throws ApiException {
        com.squareup.okhttp.Call call = disconnectBucketValidateBeforeCall(entity, bucket, body, null, null);
        Type localVarReturnType = new TypeToken<GoldenDisconnectBucketResponseDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Disconnects a bucket. (asynchronously)
     * Locates a bucket and disconnects all the records in the bucket. The disconnected records will be removed from the bucket but not deleted. Besides, the system will mark the records to avoid future connections. Entity must be enabled. Requires ADMIN or STEWARD role.
     * @param entity Entity identifier (required)
     * @param bucket Bucket identifier (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call disconnectBucketAsync(String entity, String bucket, GoldenDisconnectBucketRequestDto body, final ApiCallback<GoldenDisconnectBucketResponseDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = disconnectBucketValidateBeforeCall(entity, bucket, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GoldenDisconnectBucketResponseDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBucket
     * @param entity Entity name (required)
     * @param bucket Bucket id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBucketCall(String entity, String bucket, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/golden/{entity}/buckets/{bucket}"
            .replaceAll("\\{" + "entity" + "\\}", apiClient.escapeString(entity.toString()))
            .replaceAll("\\{" + "bucket" + "\\}", apiClient.escapeString(bucket.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBucketValidateBeforeCall(String entity, String bucket, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'entity' is set
        if (entity == null) {
            throw new ApiException("Missing the required parameter 'entity' when calling getBucket(Async)");
        }
        // verify the required parameter 'bucket' is set
        if (bucket == null) {
            throw new ApiException("Missing the required parameter 'bucket' when calling getBucket(Async)");
        }
        
        com.squareup.okhttp.Call call = getBucketCall(entity, bucket, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieves one bucket.
     * Locates an entity and a certain bucket by identifier, and returns the bucket of potentially duplicated records. Entity must be enabled. Requires any authenticated role.
     * @param entity Entity name (required)
     * @param bucket Bucket id (required)
     * @return GoldenBucketFullResponseDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GoldenBucketFullResponseDto getBucket(String entity, String bucket) throws ApiException {
        ApiResponse<GoldenBucketFullResponseDto> resp = getBucketWithHttpInfo(entity, bucket);
        return resp.getData();
    }

    /**
     * Retrieves one bucket.
     * Locates an entity and a certain bucket by identifier, and returns the bucket of potentially duplicated records. Entity must be enabled. Requires any authenticated role.
     * @param entity Entity name (required)
     * @param bucket Bucket id (required)
     * @return ApiResponse&lt;GoldenBucketFullResponseDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GoldenBucketFullResponseDto> getBucketWithHttpInfo(String entity, String bucket) throws ApiException {
        com.squareup.okhttp.Call call = getBucketValidateBeforeCall(entity, bucket, null, null);
        Type localVarReturnType = new TypeToken<GoldenBucketFullResponseDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves one bucket. (asynchronously)
     * Locates an entity and a certain bucket by identifier, and returns the bucket of potentially duplicated records. Entity must be enabled. Requires any authenticated role.
     * @param entity Entity name (required)
     * @param bucket Bucket id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBucketAsync(String entity, String bucket, final ApiCallback<GoldenBucketFullResponseDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBucketValidateBeforeCall(entity, bucket, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GoldenBucketFullResponseDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBuckets
     * @param entity Entity name (required)
     * @param pageNumber Page number (required)
     * @param pageSize Page size (required)
     * @param index Index name (optional)
     * @param classification Classification outcome filter (optional)
     * @param sort Bucket sorting criteria. Natural order by default. More than one criteria is accepted, sorting will be applied in order. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBucketsCall(String entity, Integer pageNumber, Integer pageSize, String index, String classification, List<String> sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/golden/{entity}/buckets"
            .replaceAll("\\{" + "entity" + "\\}", apiClient.escapeString(entity.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (index != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("index", index));
        if (classification != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("classification", classification));
        if (sort != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sort", sort));
        if (pageNumber != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageNumber", pageNumber));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBucketsValidateBeforeCall(String entity, Integer pageNumber, Integer pageSize, String index, String classification, List<String> sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'entity' is set
        if (entity == null) {
            throw new ApiException("Missing the required parameter 'entity' when calling getBuckets(Async)");
        }
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getBuckets(Async)");
        }
        // verify the required parameter 'pageSize' is set
        if (pageSize == null) {
            throw new ApiException("Missing the required parameter 'pageSize' when calling getBuckets(Async)");
        }
        
        com.squareup.okhttp.Call call = getBucketsCall(entity, pageNumber, pageSize, index, classification, sort, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieves buckets for an entity.
     * Finds a retrieves buckets of potentially duplicated records, using different filtering, sorting and paging criteria. Entity must be enabled. Requires any authenticated role.
     * @param entity Entity name (required)
     * @param pageNumber Page number (required)
     * @param pageSize Page size (required)
     * @param index Index name (optional)
     * @param classification Classification outcome filter (optional)
     * @param sort Bucket sorting criteria. Natural order by default. More than one criteria is accepted, sorting will be applied in order. (optional)
     * @return GoldenBucketPageResponseDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GoldenBucketPageResponseDto getBuckets(String entity, Integer pageNumber, Integer pageSize, String index, String classification, List<String> sort) throws ApiException {
        ApiResponse<GoldenBucketPageResponseDto> resp = getBucketsWithHttpInfo(entity, pageNumber, pageSize, index, classification, sort);
        return resp.getData();
    }

    /**
     * Retrieves buckets for an entity.
     * Finds a retrieves buckets of potentially duplicated records, using different filtering, sorting and paging criteria. Entity must be enabled. Requires any authenticated role.
     * @param entity Entity name (required)
     * @param pageNumber Page number (required)
     * @param pageSize Page size (required)
     * @param index Index name (optional)
     * @param classification Classification outcome filter (optional)
     * @param sort Bucket sorting criteria. Natural order by default. More than one criteria is accepted, sorting will be applied in order. (optional)
     * @return ApiResponse&lt;GoldenBucketPageResponseDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GoldenBucketPageResponseDto> getBucketsWithHttpInfo(String entity, Integer pageNumber, Integer pageSize, String index, String classification, List<String> sort) throws ApiException {
        com.squareup.okhttp.Call call = getBucketsValidateBeforeCall(entity, pageNumber, pageSize, index, classification, sort, null, null);
        Type localVarReturnType = new TypeToken<GoldenBucketPageResponseDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves buckets for an entity. (asynchronously)
     * Finds a retrieves buckets of potentially duplicated records, using different filtering, sorting and paging criteria. Entity must be enabled. Requires any authenticated role.
     * @param entity Entity name (required)
     * @param pageNumber Page number (required)
     * @param pageSize Page size (required)
     * @param index Index name (optional)
     * @param classification Classification outcome filter (optional)
     * @param sort Bucket sorting criteria. Natural order by default. More than one criteria is accepted, sorting will be applied in order. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBucketsAsync(String entity, Integer pageNumber, Integer pageSize, String index, String classification, List<String> sort, final ApiCallback<GoldenBucketPageResponseDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBucketsValidateBeforeCall(entity, pageNumber, pageSize, index, classification, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GoldenBucketPageResponseDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ignoreBucket
     * @param entity Entity identifier (required)
     * @param bucket Bucket identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ignoreBucketCall(String entity, String bucket, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/golden/{entity}/buckets/ignore/{bucket}"
            .replaceAll("\\{" + "entity" + "\\}", apiClient.escapeString(entity.toString()))
            .replaceAll("\\{" + "bucket" + "\\}", apiClient.escapeString(bucket.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ignoreBucketValidateBeforeCall(String entity, String bucket, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'entity' is set
        if (entity == null) {
            throw new ApiException("Missing the required parameter 'entity' when calling ignoreBucket(Async)");
        }
        // verify the required parameter 'bucket' is set
        if (bucket == null) {
            throw new ApiException("Missing the required parameter 'bucket' when calling ignoreBucket(Async)");
        }
        
        com.squareup.okhttp.Call call = ignoreBucketCall(entity, bucket, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Sets ignore flag for a bucket.
     * Locates a bucket and sets the ignore flag to true to ignore the bucket. Entity must be enabled. Requires ADMIN or STEWARD role.
     * @param entity Entity identifier (required)
     * @param bucket Bucket identifier (required)
     * @return GoldenBucketFullResponseDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GoldenBucketFullResponseDto ignoreBucket(String entity, String bucket) throws ApiException {
        ApiResponse<GoldenBucketFullResponseDto> resp = ignoreBucketWithHttpInfo(entity, bucket);
        return resp.getData();
    }

    /**
     * Sets ignore flag for a bucket.
     * Locates a bucket and sets the ignore flag to true to ignore the bucket. Entity must be enabled. Requires ADMIN or STEWARD role.
     * @param entity Entity identifier (required)
     * @param bucket Bucket identifier (required)
     * @return ApiResponse&lt;GoldenBucketFullResponseDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GoldenBucketFullResponseDto> ignoreBucketWithHttpInfo(String entity, String bucket) throws ApiException {
        com.squareup.okhttp.Call call = ignoreBucketValidateBeforeCall(entity, bucket, null, null);
        Type localVarReturnType = new TypeToken<GoldenBucketFullResponseDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Sets ignore flag for a bucket. (asynchronously)
     * Locates a bucket and sets the ignore flag to true to ignore the bucket. Entity must be enabled. Requires ADMIN or STEWARD role.
     * @param entity Entity identifier (required)
     * @param bucket Bucket identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ignoreBucketAsync(String entity, String bucket, final ApiCallback<GoldenBucketFullResponseDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ignoreBucketValidateBeforeCall(entity, bucket, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GoldenBucketFullResponseDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for mergeBucket
     * @param entity Entity identifier (required)
     * @param bucket Bucket identifier (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call mergeBucketCall(String entity, String bucket, GoldenMergeBucketRequestDto body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/golden/{entity}/buckets/merge/{bucket}"
            .replaceAll("\\{" + "entity" + "\\}", apiClient.escapeString(entity.toString()))
            .replaceAll("\\{" + "bucket" + "\\}", apiClient.escapeString(bucket.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call mergeBucketValidateBeforeCall(String entity, String bucket, GoldenMergeBucketRequestDto body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'entity' is set
        if (entity == null) {
            throw new ApiException("Missing the required parameter 'entity' when calling mergeBucket(Async)");
        }
        // verify the required parameter 'bucket' is set
        if (bucket == null) {
            throw new ApiException("Missing the required parameter 'bucket' when calling mergeBucket(Async)");
        }
        
        com.squareup.okhttp.Call call = mergeBucketCall(entity, bucket, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Merges a bucket.
     * Locates a bucket and merges the records in the bucket. The merge is done using the record generated automatically using the merger resource. Entity must be enabled. Requires ADMIN or STEWARD role.
     * @param entity Entity identifier (required)
     * @param bucket Bucket identifier (required)
     * @param body  (optional)
     * @return GoldenMergeBucketResponseDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GoldenMergeBucketResponseDto mergeBucket(String entity, String bucket, GoldenMergeBucketRequestDto body) throws ApiException {
        ApiResponse<GoldenMergeBucketResponseDto> resp = mergeBucketWithHttpInfo(entity, bucket, body);
        return resp.getData();
    }

    /**
     * Merges a bucket.
     * Locates a bucket and merges the records in the bucket. The merge is done using the record generated automatically using the merger resource. Entity must be enabled. Requires ADMIN or STEWARD role.
     * @param entity Entity identifier (required)
     * @param bucket Bucket identifier (required)
     * @param body  (optional)
     * @return ApiResponse&lt;GoldenMergeBucketResponseDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GoldenMergeBucketResponseDto> mergeBucketWithHttpInfo(String entity, String bucket, GoldenMergeBucketRequestDto body) throws ApiException {
        com.squareup.okhttp.Call call = mergeBucketValidateBeforeCall(entity, bucket, body, null, null);
        Type localVarReturnType = new TypeToken<GoldenMergeBucketResponseDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Merges a bucket. (asynchronously)
     * Locates a bucket and merges the records in the bucket. The merge is done using the record generated automatically using the merger resource. Entity must be enabled. Requires ADMIN or STEWARD role.
     * @param entity Entity identifier (required)
     * @param bucket Bucket identifier (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call mergeBucketAsync(String entity, String bucket, GoldenMergeBucketRequestDto body, final ApiCallback<GoldenMergeBucketResponseDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = mergeBucketValidateBeforeCall(entity, bucket, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GoldenMergeBucketResponseDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for searchRecords
     * @param body  (required)
     * @param entity Entity identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchRecordsCall(GoldenSearchRequestDto body, String entity, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/golden/{entity}/search"
            .replaceAll("\\{" + "entity" + "\\}", apiClient.escapeString(entity.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchRecordsValidateBeforeCall(GoldenSearchRequestDto body, String entity, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling searchRecords(Async)");
        }
        // verify the required parameter 'entity' is set
        if (entity == null) {
            throw new ApiException("Missing the required parameter 'entity' when calling searchRecords(Async)");
        }
        
        com.squareup.okhttp.Call call = searchRecordsCall(body, entity, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Searches golden records in an entity.
     * Searches golden records considering indicated entity and search conditions. Entity must be enabled. The search criteria is expressed as a record that should meet the requirements of the dataset associated to this entity. Requires any authenticated role.
     * @param body  (required)
     * @param entity Entity identifier (required)
     * @return GoldenSearchResponseDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GoldenSearchResponseDto searchRecords(GoldenSearchRequestDto body, String entity) throws ApiException {
        ApiResponse<GoldenSearchResponseDto> resp = searchRecordsWithHttpInfo(body, entity);
        return resp.getData();
    }

    /**
     * Searches golden records in an entity.
     * Searches golden records considering indicated entity and search conditions. Entity must be enabled. The search criteria is expressed as a record that should meet the requirements of the dataset associated to this entity. Requires any authenticated role.
     * @param body  (required)
     * @param entity Entity identifier (required)
     * @return ApiResponse&lt;GoldenSearchResponseDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GoldenSearchResponseDto> searchRecordsWithHttpInfo(GoldenSearchRequestDto body, String entity) throws ApiException {
        com.squareup.okhttp.Call call = searchRecordsValidateBeforeCall(body, entity, null, null);
        Type localVarReturnType = new TypeToken<GoldenSearchResponseDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Searches golden records in an entity. (asynchronously)
     * Searches golden records considering indicated entity and search conditions. Entity must be enabled. The search criteria is expressed as a record that should meet the requirements of the dataset associated to this entity. Requires any authenticated role.
     * @param body  (required)
     * @param entity Entity identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchRecordsAsync(GoldenSearchRequestDto body, String entity, final ApiCallback<GoldenSearchResponseDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchRecordsValidateBeforeCall(body, entity, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GoldenSearchResponseDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for splitBucket
     * @param entity Entity identifier (required)
     * @param bucket Bucket identifier (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call splitBucketCall(String entity, String bucket, GoldenSplitBucketRequestDto body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/golden/{entity}/buckets/split/{bucket}"
            .replaceAll("\\{" + "entity" + "\\}", apiClient.escapeString(entity.toString()))
            .replaceAll("\\{" + "bucket" + "\\}", apiClient.escapeString(bucket.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call splitBucketValidateBeforeCall(String entity, String bucket, GoldenSplitBucketRequestDto body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'entity' is set
        if (entity == null) {
            throw new ApiException("Missing the required parameter 'entity' when calling splitBucket(Async)");
        }
        // verify the required parameter 'bucket' is set
        if (bucket == null) {
            throw new ApiException("Missing the required parameter 'bucket' when calling splitBucket(Async)");
        }
        
        com.squareup.okhttp.Call call = splitBucketCall(entity, bucket, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Splits a bucket.
     * Locates a bucket and splits (modifies) the records using the automatic records or provided ones. Entity must be enabled. Requires ADMIN or STEWARD role.
     * @param entity Entity identifier (required)
     * @param bucket Bucket identifier (required)
     * @param body  (optional)
     * @return GoldenSplitBucketResponseDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GoldenSplitBucketResponseDto splitBucket(String entity, String bucket, GoldenSplitBucketRequestDto body) throws ApiException {
        ApiResponse<GoldenSplitBucketResponseDto> resp = splitBucketWithHttpInfo(entity, bucket, body);
        return resp.getData();
    }

    /**
     * Splits a bucket.
     * Locates a bucket and splits (modifies) the records using the automatic records or provided ones. Entity must be enabled. Requires ADMIN or STEWARD role.
     * @param entity Entity identifier (required)
     * @param bucket Bucket identifier (required)
     * @param body  (optional)
     * @return ApiResponse&lt;GoldenSplitBucketResponseDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GoldenSplitBucketResponseDto> splitBucketWithHttpInfo(String entity, String bucket, GoldenSplitBucketRequestDto body) throws ApiException {
        com.squareup.okhttp.Call call = splitBucketValidateBeforeCall(entity, bucket, body, null, null);
        Type localVarReturnType = new TypeToken<GoldenSplitBucketResponseDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Splits a bucket. (asynchronously)
     * Locates a bucket and splits (modifies) the records using the automatic records or provided ones. Entity must be enabled. Requires ADMIN or STEWARD role.
     * @param entity Entity identifier (required)
     * @param bucket Bucket identifier (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call splitBucketAsync(String entity, String bucket, GoldenSplitBucketRequestDto body, final ApiCallback<GoldenSplitBucketResponseDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = splitBucketValidateBeforeCall(entity, bucket, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GoldenSplitBucketResponseDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for unignoreBucket
     * @param entity Entity identifier (required)
     * @param bucket Bucket identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call unignoreBucketCall(String entity, String bucket, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/golden/{entity}/buckets/unignore/{bucket}"
            .replaceAll("\\{" + "entity" + "\\}", apiClient.escapeString(entity.toString()))
            .replaceAll("\\{" + "bucket" + "\\}", apiClient.escapeString(bucket.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call unignoreBucketValidateBeforeCall(String entity, String bucket, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'entity' is set
        if (entity == null) {
            throw new ApiException("Missing the required parameter 'entity' when calling unignoreBucket(Async)");
        }
        // verify the required parameter 'bucket' is set
        if (bucket == null) {
            throw new ApiException("Missing the required parameter 'bucket' when calling unignoreBucket(Async)");
        }
        
        com.squareup.okhttp.Call call = unignoreBucketCall(entity, bucket, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Sets ignore flag for a bucket.
     * Locates a bucket and sets the ignore flag to false to consider the bucket. Entity must be enabled. Requires ADMIN or STEWARD role.
     * @param entity Entity identifier (required)
     * @param bucket Bucket identifier (required)
     * @return GoldenBucketFullResponseDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GoldenBucketFullResponseDto unignoreBucket(String entity, String bucket) throws ApiException {
        ApiResponse<GoldenBucketFullResponseDto> resp = unignoreBucketWithHttpInfo(entity, bucket);
        return resp.getData();
    }

    /**
     * Sets ignore flag for a bucket.
     * Locates a bucket and sets the ignore flag to false to consider the bucket. Entity must be enabled. Requires ADMIN or STEWARD role.
     * @param entity Entity identifier (required)
     * @param bucket Bucket identifier (required)
     * @return ApiResponse&lt;GoldenBucketFullResponseDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GoldenBucketFullResponseDto> unignoreBucketWithHttpInfo(String entity, String bucket) throws ApiException {
        com.squareup.okhttp.Call call = unignoreBucketValidateBeforeCall(entity, bucket, null, null);
        Type localVarReturnType = new TypeToken<GoldenBucketFullResponseDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Sets ignore flag for a bucket. (asynchronously)
     * Locates a bucket and sets the ignore flag to false to consider the bucket. Entity must be enabled. Requires ADMIN or STEWARD role.
     * @param entity Entity identifier (required)
     * @param bucket Bucket identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call unignoreBucketAsync(String entity, String bucket, final ApiCallback<GoldenBucketFullResponseDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = unignoreBucketValidateBeforeCall(entity, bucket, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GoldenBucketFullResponseDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for upsertRecord
     * @param body  (required)
     * @param entity Entity identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call upsertRecordCall(GoldenUpsertRequestDto body, String entity, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/golden/{entity}/upsert"
            .replaceAll("\\{" + "entity" + "\\}", apiClient.escapeString(entity.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call upsertRecordValidateBeforeCall(GoldenUpsertRequestDto body, String entity, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling upsertRecord(Async)");
        }
        // verify the required parameter 'entity' is set
        if (entity == null) {
            throw new ApiException("Missing the required parameter 'entity' when calling upsertRecord(Async)");
        }
        
        com.squareup.okhttp.Call call = upsertRecordCall(body, entity, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Updates or inserts a golden record in an entity.
     * Updates or inserts a golden record into indicated entity. Entity must be enabled. The indicated record is searched: if found, then the record will be updated; if not found, the record will be considered as new and inserted. If more than one record is found in the search, only the first one will be updated. Requires ADMIN or STEWARD role.
     * @param body  (required)
     * @param entity Entity identifier (required)
     * @return GoldenUpsertResponseDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GoldenUpsertResponseDto upsertRecord(GoldenUpsertRequestDto body, String entity) throws ApiException {
        ApiResponse<GoldenUpsertResponseDto> resp = upsertRecordWithHttpInfo(body, entity);
        return resp.getData();
    }

    /**
     * Updates or inserts a golden record in an entity.
     * Updates or inserts a golden record into indicated entity. Entity must be enabled. The indicated record is searched: if found, then the record will be updated; if not found, the record will be considered as new and inserted. If more than one record is found in the search, only the first one will be updated. Requires ADMIN or STEWARD role.
     * @param body  (required)
     * @param entity Entity identifier (required)
     * @return ApiResponse&lt;GoldenUpsertResponseDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GoldenUpsertResponseDto> upsertRecordWithHttpInfo(GoldenUpsertRequestDto body, String entity) throws ApiException {
        com.squareup.okhttp.Call call = upsertRecordValidateBeforeCall(body, entity, null, null);
        Type localVarReturnType = new TypeToken<GoldenUpsertResponseDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates or inserts a golden record in an entity. (asynchronously)
     * Updates or inserts a golden record into indicated entity. Entity must be enabled. The indicated record is searched: if found, then the record will be updated; if not found, the record will be considered as new and inserted. If more than one record is found in the search, only the first one will be updated. Requires ADMIN or STEWARD role.
     * @param body  (required)
     * @param entity Entity identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call upsertRecordAsync(GoldenUpsertRequestDto body, String entity, final ApiCallback<GoldenUpsertResponseDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = upsertRecordValidateBeforeCall(body, entity, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GoldenUpsertResponseDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
