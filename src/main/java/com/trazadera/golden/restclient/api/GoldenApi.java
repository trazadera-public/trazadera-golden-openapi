/*
 * GOLDEN-API
 * Trazadera Golden API
 *
 * OpenAPI spec version: v1
 * Contact: support@trazadera.com 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.trazadera.golden.restclient.api;

import com.trazadera.golden.restclient.invoker.ApiCallback;
import com.trazadera.golden.restclient.invoker.ApiClient;
import com.trazadera.golden.restclient.invoker.ApiException;
import com.trazadera.golden.restclient.invoker.ApiResponse;
import com.trazadera.golden.restclient.invoker.Configuration;
import com.trazadera.golden.restclient.invoker.Pair;
import com.trazadera.golden.restclient.invoker.ProgressRequestBody;
import com.trazadera.golden.restclient.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.trazadera.golden.restclient.model.BaseResponseDto;
import com.trazadera.golden.restclient.model.GoldenBucketFullResponseDto;
import com.trazadera.golden.restclient.model.GoldenBucketPageResponseDto;
import com.trazadera.golden.restclient.model.GoldenDeleteResponseDto;
import com.trazadera.golden.restclient.model.GoldenMergeRequestDto;
import com.trazadera.golden.restclient.model.GoldenSearchRequestDto;
import com.trazadera.golden.restclient.model.GoldenSearchResponseDto;
import com.trazadera.golden.restclient.model.GoldenSplitRequestDto;
import com.trazadera.golden.restclient.model.GoldenUpsertRequestDto;
import com.trazadera.golden.restclient.model.GoldenUpsertResponseDto;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GoldenApi {
    private ApiClient apiClient;

    public GoldenApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GoldenApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for deleteBucket
     * @param entity Entity identifier (required)
     * @param bucket Bucket identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteBucketCall(String entity, String bucket, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/golden/{entity}/buckets/delete/{bucket}"
            .replaceAll("\\{" + "entity" + "\\}", apiClient.escapeString(entity.toString()))
            .replaceAll("\\{" + "bucket" + "\\}", apiClient.escapeString(bucket.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteBucketValidateBeforeCall(String entity, String bucket, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'entity' is set
        if (entity == null) {
            throw new ApiException("Missing the required parameter 'entity' when calling deleteBucket(Async)");
        }
        // verify the required parameter 'bucket' is set
        if (bucket == null) {
            throw new ApiException("Missing the required parameter 'bucket' when calling deleteBucket(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteBucketCall(entity, bucket, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Deletes a bucket.
     * Locates a bucket and deletes.
     * @param entity Entity identifier (required)
     * @param bucket Bucket identifier (required)
     * @return BaseResponseDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaseResponseDto deleteBucket(String entity, String bucket) throws ApiException {
        ApiResponse<BaseResponseDto> resp = deleteBucketWithHttpInfo(entity, bucket);
        return resp.getData();
    }

    /**
     * Deletes a bucket.
     * Locates a bucket and deletes.
     * @param entity Entity identifier (required)
     * @param bucket Bucket identifier (required)
     * @return ApiResponse&lt;BaseResponseDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaseResponseDto> deleteBucketWithHttpInfo(String entity, String bucket) throws ApiException {
        com.squareup.okhttp.Call call = deleteBucketValidateBeforeCall(entity, bucket, null, null);
        Type localVarReturnType = new TypeToken<BaseResponseDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Deletes a bucket. (asynchronously)
     * Locates a bucket and deletes.
     * @param entity Entity identifier (required)
     * @param bucket Bucket identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteBucketAsync(String entity, String bucket, final ApiCallback<BaseResponseDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteBucketValidateBeforeCall(entity, bucket, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaseResponseDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteRecord
     * @param entity Entity identifier (required)
     * @param record Record identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteRecordCall(String entity, String record, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/golden/{entity}/delete/{record}"
            .replaceAll("\\{" + "entity" + "\\}", apiClient.escapeString(entity.toString()))
            .replaceAll("\\{" + "record" + "\\}", apiClient.escapeString(record.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteRecordValidateBeforeCall(String entity, String record, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'entity' is set
        if (entity == null) {
            throw new ApiException("Missing the required parameter 'entity' when calling deleteRecord(Async)");
        }
        // verify the required parameter 'record' is set
        if (record == null) {
            throw new ApiException("Missing the required parameter 'record' when calling deleteRecord(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteRecordCall(entity, record, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Deletes a golden record from an entity.
     * Locates a golden record by identifier into indicated entity and deletes.
     * @param entity Entity identifier (required)
     * @param record Record identifier (required)
     * @return GoldenDeleteResponseDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GoldenDeleteResponseDto deleteRecord(String entity, String record) throws ApiException {
        ApiResponse<GoldenDeleteResponseDto> resp = deleteRecordWithHttpInfo(entity, record);
        return resp.getData();
    }

    /**
     * Deletes a golden record from an entity.
     * Locates a golden record by identifier into indicated entity and deletes.
     * @param entity Entity identifier (required)
     * @param record Record identifier (required)
     * @return ApiResponse&lt;GoldenDeleteResponseDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GoldenDeleteResponseDto> deleteRecordWithHttpInfo(String entity, String record) throws ApiException {
        com.squareup.okhttp.Call call = deleteRecordValidateBeforeCall(entity, record, null, null);
        Type localVarReturnType = new TypeToken<GoldenDeleteResponseDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Deletes a golden record from an entity. (asynchronously)
     * Locates a golden record by identifier into indicated entity and deletes.
     * @param entity Entity identifier (required)
     * @param record Record identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteRecordAsync(String entity, String record, final ApiCallback<GoldenDeleteResponseDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteRecordValidateBeforeCall(entity, record, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GoldenDeleteResponseDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for disconnectBucket
     * @param entity Entity identifier (required)
     * @param bucket Bucket identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call disconnectBucketCall(String entity, String bucket, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/golden/{entity}/buckets/disconnect/{bucket}"
            .replaceAll("\\{" + "entity" + "\\}", apiClient.escapeString(entity.toString()))
            .replaceAll("\\{" + "bucket" + "\\}", apiClient.escapeString(bucket.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call disconnectBucketValidateBeforeCall(String entity, String bucket, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'entity' is set
        if (entity == null) {
            throw new ApiException("Missing the required parameter 'entity' when calling disconnectBucket(Async)");
        }
        // verify the required parameter 'bucket' is set
        if (bucket == null) {
            throw new ApiException("Missing the required parameter 'bucket' when calling disconnectBucket(Async)");
        }
        
        com.squareup.okhttp.Call call = disconnectBucketCall(entity, bucket, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Disconnects a bucket.
     * Locates a bucket and disconnects all the records in the bucket.
     * @param entity Entity identifier (required)
     * @param bucket Bucket identifier (required)
     * @return BaseResponseDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaseResponseDto disconnectBucket(String entity, String bucket) throws ApiException {
        ApiResponse<BaseResponseDto> resp = disconnectBucketWithHttpInfo(entity, bucket);
        return resp.getData();
    }

    /**
     * Disconnects a bucket.
     * Locates a bucket and disconnects all the records in the bucket.
     * @param entity Entity identifier (required)
     * @param bucket Bucket identifier (required)
     * @return ApiResponse&lt;BaseResponseDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaseResponseDto> disconnectBucketWithHttpInfo(String entity, String bucket) throws ApiException {
        com.squareup.okhttp.Call call = disconnectBucketValidateBeforeCall(entity, bucket, null, null);
        Type localVarReturnType = new TypeToken<BaseResponseDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Disconnects a bucket. (asynchronously)
     * Locates a bucket and disconnects all the records in the bucket.
     * @param entity Entity identifier (required)
     * @param bucket Bucket identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call disconnectBucketAsync(String entity, String bucket, final ApiCallback<BaseResponseDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = disconnectBucketValidateBeforeCall(entity, bucket, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaseResponseDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBucket
     * @param entity Entity name (required)
     * @param bucket Bucket id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBucketCall(String entity, String bucket, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/golden/{entity}/buckets/{bucket}"
            .replaceAll("\\{" + "entity" + "\\}", apiClient.escapeString(entity.toString()))
            .replaceAll("\\{" + "bucket" + "\\}", apiClient.escapeString(bucket.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBucketValidateBeforeCall(String entity, String bucket, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'entity' is set
        if (entity == null) {
            throw new ApiException("Missing the required parameter 'entity' when calling getBucket(Async)");
        }
        // verify the required parameter 'bucket' is set
        if (bucket == null) {
            throw new ApiException("Missing the required parameter 'bucket' when calling getBucket(Async)");
        }
        
        com.squareup.okhttp.Call call = getBucketCall(entity, bucket, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieves one bucket.
     * Locates an entity and a bucket, and returns the bucket of potentially duplicated records. 
     * @param entity Entity name (required)
     * @param bucket Bucket id (required)
     * @return GoldenBucketFullResponseDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GoldenBucketFullResponseDto getBucket(String entity, String bucket) throws ApiException {
        ApiResponse<GoldenBucketFullResponseDto> resp = getBucketWithHttpInfo(entity, bucket);
        return resp.getData();
    }

    /**
     * Retrieves one bucket.
     * Locates an entity and a bucket, and returns the bucket of potentially duplicated records. 
     * @param entity Entity name (required)
     * @param bucket Bucket id (required)
     * @return ApiResponse&lt;GoldenBucketFullResponseDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GoldenBucketFullResponseDto> getBucketWithHttpInfo(String entity, String bucket) throws ApiException {
        com.squareup.okhttp.Call call = getBucketValidateBeforeCall(entity, bucket, null, null);
        Type localVarReturnType = new TypeToken<GoldenBucketFullResponseDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves one bucket. (asynchronously)
     * Locates an entity and a bucket, and returns the bucket of potentially duplicated records. 
     * @param entity Entity name (required)
     * @param bucket Bucket id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBucketAsync(String entity, String bucket, final ApiCallback<GoldenBucketFullResponseDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBucketValidateBeforeCall(entity, bucket, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GoldenBucketFullResponseDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBuckets
     * @param entity Entity name (required)
     * @param pageNumber Page number (required)
     * @param pageSize Page size (required)
     * @param index Index name (optional)
     * @param classificationFilter Classification outcome filter (optional)
     * @param sorting Bucket sorting (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBucketsCall(String entity, Integer pageNumber, Integer pageSize, String index, String classificationFilter, String sorting, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/golden/{entity}/buckets"
            .replaceAll("\\{" + "entity" + "\\}", apiClient.escapeString(entity.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (index != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("index", index));
        if (classificationFilter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("classificationFilter", classificationFilter));
        if (sorting != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sorting", sorting));
        if (pageNumber != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageNumber", pageNumber));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBucketsValidateBeforeCall(String entity, Integer pageNumber, Integer pageSize, String index, String classificationFilter, String sorting, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'entity' is set
        if (entity == null) {
            throw new ApiException("Missing the required parameter 'entity' when calling getBuckets(Async)");
        }
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getBuckets(Async)");
        }
        // verify the required parameter 'pageSize' is set
        if (pageSize == null) {
            throw new ApiException("Missing the required parameter 'pageSize' when calling getBuckets(Async)");
        }
        
        com.squareup.okhttp.Call call = getBucketsCall(entity, pageNumber, pageSize, index, classificationFilter, sorting, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieves duplicate buckets for a entity.
     * Locates a entity using different criteria and returns buckets of potentially duplicated records for indicated index.
     * @param entity Entity name (required)
     * @param pageNumber Page number (required)
     * @param pageSize Page size (required)
     * @param index Index name (optional)
     * @param classificationFilter Classification outcome filter (optional)
     * @param sorting Bucket sorting (optional)
     * @return GoldenBucketPageResponseDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GoldenBucketPageResponseDto getBuckets(String entity, Integer pageNumber, Integer pageSize, String index, String classificationFilter, String sorting) throws ApiException {
        ApiResponse<GoldenBucketPageResponseDto> resp = getBucketsWithHttpInfo(entity, pageNumber, pageSize, index, classificationFilter, sorting);
        return resp.getData();
    }

    /**
     * Retrieves duplicate buckets for a entity.
     * Locates a entity using different criteria and returns buckets of potentially duplicated records for indicated index.
     * @param entity Entity name (required)
     * @param pageNumber Page number (required)
     * @param pageSize Page size (required)
     * @param index Index name (optional)
     * @param classificationFilter Classification outcome filter (optional)
     * @param sorting Bucket sorting (optional)
     * @return ApiResponse&lt;GoldenBucketPageResponseDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GoldenBucketPageResponseDto> getBucketsWithHttpInfo(String entity, Integer pageNumber, Integer pageSize, String index, String classificationFilter, String sorting) throws ApiException {
        com.squareup.okhttp.Call call = getBucketsValidateBeforeCall(entity, pageNumber, pageSize, index, classificationFilter, sorting, null, null);
        Type localVarReturnType = new TypeToken<GoldenBucketPageResponseDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves duplicate buckets for a entity. (asynchronously)
     * Locates a entity using different criteria and returns buckets of potentially duplicated records for indicated index.
     * @param entity Entity name (required)
     * @param pageNumber Page number (required)
     * @param pageSize Page size (required)
     * @param index Index name (optional)
     * @param classificationFilter Classification outcome filter (optional)
     * @param sorting Bucket sorting (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBucketsAsync(String entity, Integer pageNumber, Integer pageSize, String index, String classificationFilter, String sorting, final ApiCallback<GoldenBucketPageResponseDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBucketsValidateBeforeCall(entity, pageNumber, pageSize, index, classificationFilter, sorting, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GoldenBucketPageResponseDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for mergeBucket
     * @param entity Entity identifier (required)
     * @param bucket Bucket identifier (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call mergeBucketCall(String entity, String bucket, GoldenMergeRequestDto body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/golden/{entity}/buckets/merge/{bucket}"
            .replaceAll("\\{" + "entity" + "\\}", apiClient.escapeString(entity.toString()))
            .replaceAll("\\{" + "bucket" + "\\}", apiClient.escapeString(bucket.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call mergeBucketValidateBeforeCall(String entity, String bucket, GoldenMergeRequestDto body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'entity' is set
        if (entity == null) {
            throw new ApiException("Missing the required parameter 'entity' when calling mergeBucket(Async)");
        }
        // verify the required parameter 'bucket' is set
        if (bucket == null) {
            throw new ApiException("Missing the required parameter 'bucket' when calling mergeBucket(Async)");
        }
        
        com.squareup.okhttp.Call call = mergeBucketCall(entity, bucket, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Merges a bucket.
     * Locates a bucket and merges using the automatic record or provided one.
     * @param entity Entity identifier (required)
     * @param bucket Bucket identifier (required)
     * @param body  (optional)
     * @return BaseResponseDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaseResponseDto mergeBucket(String entity, String bucket, GoldenMergeRequestDto body) throws ApiException {
        ApiResponse<BaseResponseDto> resp = mergeBucketWithHttpInfo(entity, bucket, body);
        return resp.getData();
    }

    /**
     * Merges a bucket.
     * Locates a bucket and merges using the automatic record or provided one.
     * @param entity Entity identifier (required)
     * @param bucket Bucket identifier (required)
     * @param body  (optional)
     * @return ApiResponse&lt;BaseResponseDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaseResponseDto> mergeBucketWithHttpInfo(String entity, String bucket, GoldenMergeRequestDto body) throws ApiException {
        com.squareup.okhttp.Call call = mergeBucketValidateBeforeCall(entity, bucket, body, null, null);
        Type localVarReturnType = new TypeToken<BaseResponseDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Merges a bucket. (asynchronously)
     * Locates a bucket and merges using the automatic record or provided one.
     * @param entity Entity identifier (required)
     * @param bucket Bucket identifier (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call mergeBucketAsync(String entity, String bucket, GoldenMergeRequestDto body, final ApiCallback<BaseResponseDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = mergeBucketValidateBeforeCall(entity, bucket, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaseResponseDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for searchRecord
     * @param body  (required)
     * @param entity Entity identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchRecordCall(GoldenSearchRequestDto body, String entity, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/golden/{entity}/search"
            .replaceAll("\\{" + "entity" + "\\}", apiClient.escapeString(entity.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchRecordValidateBeforeCall(GoldenSearchRequestDto body, String entity, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling searchRecord(Async)");
        }
        // verify the required parameter 'entity' is set
        if (entity == null) {
            throw new ApiException("Missing the required parameter 'entity' when calling searchRecord(Async)");
        }
        
        com.squareup.okhttp.Call call = searchRecordCall(body, entity, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Searches a golden record in an entity.
     * Searches a golden record considering indicated entity and search conditions.
     * @param body  (required)
     * @param entity Entity identifier (required)
     * @return GoldenSearchResponseDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GoldenSearchResponseDto searchRecord(GoldenSearchRequestDto body, String entity) throws ApiException {
        ApiResponse<GoldenSearchResponseDto> resp = searchRecordWithHttpInfo(body, entity);
        return resp.getData();
    }

    /**
     * Searches a golden record in an entity.
     * Searches a golden record considering indicated entity and search conditions.
     * @param body  (required)
     * @param entity Entity identifier (required)
     * @return ApiResponse&lt;GoldenSearchResponseDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GoldenSearchResponseDto> searchRecordWithHttpInfo(GoldenSearchRequestDto body, String entity) throws ApiException {
        com.squareup.okhttp.Call call = searchRecordValidateBeforeCall(body, entity, null, null);
        Type localVarReturnType = new TypeToken<GoldenSearchResponseDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Searches a golden record in an entity. (asynchronously)
     * Searches a golden record considering indicated entity and search conditions.
     * @param body  (required)
     * @param entity Entity identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchRecordAsync(GoldenSearchRequestDto body, String entity, final ApiCallback<GoldenSearchResponseDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchRecordValidateBeforeCall(body, entity, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GoldenSearchResponseDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for splitBucket
     * @param entity Entity identifier (required)
     * @param bucket Bucket identifier (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call splitBucketCall(String entity, String bucket, GoldenSplitRequestDto body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/golden/{entity}/buckets/split/{bucket}"
            .replaceAll("\\{" + "entity" + "\\}", apiClient.escapeString(entity.toString()))
            .replaceAll("\\{" + "bucket" + "\\}", apiClient.escapeString(bucket.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call splitBucketValidateBeforeCall(String entity, String bucket, GoldenSplitRequestDto body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'entity' is set
        if (entity == null) {
            throw new ApiException("Missing the required parameter 'entity' when calling splitBucket(Async)");
        }
        // verify the required parameter 'bucket' is set
        if (bucket == null) {
            throw new ApiException("Missing the required parameter 'bucket' when calling splitBucket(Async)");
        }
        
        com.squareup.okhttp.Call call = splitBucketCall(entity, bucket, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Splits a bucket.
     * Locates a bucket and splits (modifies) the records using the automatic records or provided ones.
     * @param entity Entity identifier (required)
     * @param bucket Bucket identifier (required)
     * @param body  (optional)
     * @return BaseResponseDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaseResponseDto splitBucket(String entity, String bucket, GoldenSplitRequestDto body) throws ApiException {
        ApiResponse<BaseResponseDto> resp = splitBucketWithHttpInfo(entity, bucket, body);
        return resp.getData();
    }

    /**
     * Splits a bucket.
     * Locates a bucket and splits (modifies) the records using the automatic records or provided ones.
     * @param entity Entity identifier (required)
     * @param bucket Bucket identifier (required)
     * @param body  (optional)
     * @return ApiResponse&lt;BaseResponseDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaseResponseDto> splitBucketWithHttpInfo(String entity, String bucket, GoldenSplitRequestDto body) throws ApiException {
        com.squareup.okhttp.Call call = splitBucketValidateBeforeCall(entity, bucket, body, null, null);
        Type localVarReturnType = new TypeToken<BaseResponseDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Splits a bucket. (asynchronously)
     * Locates a bucket and splits (modifies) the records using the automatic records or provided ones.
     * @param entity Entity identifier (required)
     * @param bucket Bucket identifier (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call splitBucketAsync(String entity, String bucket, GoldenSplitRequestDto body, final ApiCallback<BaseResponseDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = splitBucketValidateBeforeCall(entity, bucket, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaseResponseDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for upsertRecord
     * @param body  (required)
     * @param entity Entity identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call upsertRecordCall(GoldenUpsertRequestDto body, String entity, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/golden/{entity}/upsert"
            .replaceAll("\\{" + "entity" + "\\}", apiClient.escapeString(entity.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call upsertRecordValidateBeforeCall(GoldenUpsertRequestDto body, String entity, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling upsertRecord(Async)");
        }
        // verify the required parameter 'entity' is set
        if (entity == null) {
            throw new ApiException("Missing the required parameter 'entity' when calling upsertRecord(Async)");
        }
        
        com.squareup.okhttp.Call call = upsertRecordCall(body, entity, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Updates or inserts a golden record in an entity.
     * Updates or inserts a golden record into indicated entity.
     * @param body  (required)
     * @param entity Entity identifier (required)
     * @return GoldenUpsertResponseDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GoldenUpsertResponseDto upsertRecord(GoldenUpsertRequestDto body, String entity) throws ApiException {
        ApiResponse<GoldenUpsertResponseDto> resp = upsertRecordWithHttpInfo(body, entity);
        return resp.getData();
    }

    /**
     * Updates or inserts a golden record in an entity.
     * Updates or inserts a golden record into indicated entity.
     * @param body  (required)
     * @param entity Entity identifier (required)
     * @return ApiResponse&lt;GoldenUpsertResponseDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GoldenUpsertResponseDto> upsertRecordWithHttpInfo(GoldenUpsertRequestDto body, String entity) throws ApiException {
        com.squareup.okhttp.Call call = upsertRecordValidateBeforeCall(body, entity, null, null);
        Type localVarReturnType = new TypeToken<GoldenUpsertResponseDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates or inserts a golden record in an entity. (asynchronously)
     * Updates or inserts a golden record into indicated entity.
     * @param body  (required)
     * @param entity Entity identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call upsertRecordAsync(GoldenUpsertRequestDto body, String entity, final ApiCallback<GoldenUpsertResponseDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = upsertRecordValidateBeforeCall(body, entity, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GoldenUpsertResponseDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
