/*
 * GOLDEN-API
 * Trazadera Golden API
 *
 * OpenAPI spec version: 16-SNAPSHOT
 * Contact: support@trazadera.com 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.trazadera.golden.restclient.api;

import com.trazadera.golden.restclient.invoker.ApiCallback;
import com.trazadera.golden.restclient.invoker.ApiClient;
import com.trazadera.golden.restclient.invoker.ApiException;
import com.trazadera.golden.restclient.invoker.ApiResponse;
import com.trazadera.golden.restclient.invoker.Configuration;
import com.trazadera.golden.restclient.invoker.Pair;
import com.trazadera.golden.restclient.invoker.ProgressRequestBody;
import com.trazadera.golden.restclient.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.trazadera.golden.restclient.model.BaseResponseDto;
import com.trazadera.golden.restclient.model.EntityListResponseDto;
import com.trazadera.golden.restclient.model.EntityResponseDto;
import com.trazadera.golden.restclient.model.EntitySaveRequestDto;
import com.trazadera.golden.restclient.model.EntitySynchronizationRequestDto;
import com.trazadera.golden.restclient.model.EntitySynchronizationResponseDto;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;import java.util.Map;
import java.util.List;
import java.util.Map;

public class EntityApi {
    private ApiClient apiClient;
    private Map<String, String> headers;

    public EntityApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EntityApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public void setHeadersOverrides(Map<String, String> headers) {
        this.headers = headers;
    }

    /**
     * Build call for clearEntity
     * @param entity Entity identifier to be cleared (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call clearEntityCall(String entity, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/entities/{entity}/clear"
            .replaceAll("\\{" + "entity" + "\\}", apiClient.escapeString(entity.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call clearEntityValidateBeforeCall(String entity, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'entity' is set
        if (entity == null) {
            throw new ApiException("Missing the required parameter 'entity' when calling clearEntity(Async)");
        }
        
        com.squareup.okhttp.Call call = clearEntityCall(entity, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Clears an entity.
     * Locates a existing entity and clears all buckets if not locked. Requires permissions &#x27;entity.clear&#x27; and &#x27;entity.filter&#x27;.
     * @param entity Entity identifier to be cleared (required)
     * @return EntityResponseDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EntityResponseDto clearEntity(String entity) throws ApiException {
        ApiResponse<EntityResponseDto> resp = clearEntityWithHttpInfo(entity);
        return resp.getData();
    }

    /**
     * Clears an entity.
     * Locates a existing entity and clears all buckets if not locked. Requires permissions &#x27;entity.clear&#x27; and &#x27;entity.filter&#x27;.
     * @param entity Entity identifier to be cleared (required)
     * @return ApiResponse&lt;EntityResponseDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EntityResponseDto> clearEntityWithHttpInfo(String entity) throws ApiException {
        com.squareup.okhttp.Call call = clearEntityValidateBeforeCall(entity, null, null);
        Type localVarReturnType = new TypeToken<EntityResponseDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Clears an entity. (asynchronously)
     * Locates a existing entity and clears all buckets if not locked. Requires permissions &#x27;entity.clear&#x27; and &#x27;entity.filter&#x27;.
     * @param entity Entity identifier to be cleared (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call clearEntityAsync(String entity, final ApiCallback<EntityResponseDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = clearEntityValidateBeforeCall(entity, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EntityResponseDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteEntity
     * @param entity Entity identifier to be deleted (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteEntityCall(String entity, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/entities/{entity}"
            .replaceAll("\\{" + "entity" + "\\}", apiClient.escapeString(entity.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteEntityValidateBeforeCall(String entity, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'entity' is set
        if (entity == null) {
            throw new ApiException("Missing the required parameter 'entity' when calling deleteEntity(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteEntityCall(entity, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Deletes a entity.
     * Locates a entity and deletes it. Requires permissions &#x27;entity.delete&#x27; and &#x27;entity.filter&#x27;.
     * @param entity Entity identifier to be deleted (required)
     * @return EntityResponseDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EntityResponseDto deleteEntity(String entity) throws ApiException {
        ApiResponse<EntityResponseDto> resp = deleteEntityWithHttpInfo(entity);
        return resp.getData();
    }

    /**
     * Deletes a entity.
     * Locates a entity and deletes it. Requires permissions &#x27;entity.delete&#x27; and &#x27;entity.filter&#x27;.
     * @param entity Entity identifier to be deleted (required)
     * @return ApiResponse&lt;EntityResponseDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EntityResponseDto> deleteEntityWithHttpInfo(String entity) throws ApiException {
        com.squareup.okhttp.Call call = deleteEntityValidateBeforeCall(entity, null, null);
        Type localVarReturnType = new TypeToken<EntityResponseDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Deletes a entity. (asynchronously)
     * Locates a entity and deletes it. Requires permissions &#x27;entity.delete&#x27; and &#x27;entity.filter&#x27;.
     * @param entity Entity identifier to be deleted (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteEntityAsync(String entity, final ApiCallback<EntityResponseDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteEntityValidateBeforeCall(entity, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EntityResponseDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for downloadFile
     * @param file File identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call downloadFileCall(String file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/files/download/{file}"
            .replaceAll("\\{" + "file" + "\\}", apiClient.escapeString(file.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call downloadFileValidateBeforeCall(String file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'file' is set
        if (file == null) {
            throw new ApiException("Missing the required parameter 'file' when calling downloadFile(Async)");
        }
        
        com.squareup.okhttp.Call call = downloadFileCall(file, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieves a file by identifier.
     * Locates a file by identifier and returns the binary content. Requires permissions &#x27;file.download&#x27; and &#x27;file.filter&#x27;.
     * @param file File identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void downloadFile(String file) throws ApiException {
        downloadFileWithHttpInfo(file);
    }

    /**
     * Retrieves a file by identifier.
     * Locates a file by identifier and returns the binary content. Requires permissions &#x27;file.download&#x27; and &#x27;file.filter&#x27;.
     * @param file File identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> downloadFileWithHttpInfo(String file) throws ApiException {
        com.squareup.okhttp.Call call = downloadFileValidateBeforeCall(file, null, null);
        return apiClient.execute(call);
    }

    /**
     * Retrieves a file by identifier. (asynchronously)
     * Locates a file by identifier and returns the binary content. Requires permissions &#x27;file.download&#x27; and &#x27;file.filter&#x27;.
     * @param file File identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call downloadFileAsync(String file, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = downloadFileValidateBeforeCall(file, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getAllEntities
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllEntitiesCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/entities";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllEntitiesValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getAllEntitiesCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieves all available entities.
     * Locates all entities and returns. Requires permissions &#x27;entity.list&#x27; and &#x27;entity.filter&#x27;.
     * @return EntityListResponseDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EntityListResponseDto getAllEntities() throws ApiException {
        ApiResponse<EntityListResponseDto> resp = getAllEntitiesWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieves all available entities.
     * Locates all entities and returns. Requires permissions &#x27;entity.list&#x27; and &#x27;entity.filter&#x27;.
     * @return ApiResponse&lt;EntityListResponseDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EntityListResponseDto> getAllEntitiesWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getAllEntitiesValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<EntityListResponseDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves all available entities. (asynchronously)
     * Locates all entities and returns. Requires permissions &#x27;entity.list&#x27; and &#x27;entity.filter&#x27;.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllEntitiesAsync(final ApiCallback<EntityListResponseDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllEntitiesValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EntityListResponseDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEntity
     * @param entity Entity identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEntityCall(String entity, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/entities/{entity}"
            .replaceAll("\\{" + "entity" + "\\}", apiClient.escapeString(entity.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEntityValidateBeforeCall(String entity, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'entity' is set
        if (entity == null) {
            throw new ApiException("Missing the required parameter 'entity' when calling getEntity(Async)");
        }
        
        com.squareup.okhttp.Call call = getEntityCall(entity, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieves a entity by identifier.
     * Locates a entity by identifier and returns it. Requires permissions &#x27;entity.view&#x27; and &#x27;entity.filter&#x27;.
     * @param entity Entity identifier (required)
     * @return EntityResponseDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EntityResponseDto getEntity(String entity) throws ApiException {
        ApiResponse<EntityResponseDto> resp = getEntityWithHttpInfo(entity);
        return resp.getData();
    }

    /**
     * Retrieves a entity by identifier.
     * Locates a entity by identifier and returns it. Requires permissions &#x27;entity.view&#x27; and &#x27;entity.filter&#x27;.
     * @param entity Entity identifier (required)
     * @return ApiResponse&lt;EntityResponseDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EntityResponseDto> getEntityWithHttpInfo(String entity) throws ApiException {
        com.squareup.okhttp.Call call = getEntityValidateBeforeCall(entity, null, null);
        Type localVarReturnType = new TypeToken<EntityResponseDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves a entity by identifier. (asynchronously)
     * Locates a entity by identifier and returns it. Requires permissions &#x27;entity.view&#x27; and &#x27;entity.filter&#x27;.
     * @param entity Entity identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEntityAsync(String entity, final ApiCallback<EntityResponseDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEntityValidateBeforeCall(entity, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EntityResponseDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEntityForTable
     * @param table Table identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEntityForTableCall(String table, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/entities/table/{table}"
            .replaceAll("\\{" + "table" + "\\}", apiClient.escapeString(table.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEntityForTableValidateBeforeCall(String table, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'table' is set
        if (table == null) {
            throw new ApiException("Missing the required parameter 'table' when calling getEntityForTable(Async)");
        }
        
        com.squareup.okhttp.Call call = getEntityForTableCall(table, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieves the entity associated to a table.
     * Locates that is associated to indicated table, or none if table is not associated to an entity. Requires permissions &#x27;entity.table&#x27; and &#x27;entity.filter&#x27;.
     * @param table Table identifier (required)
     * @return EntityResponseDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EntityResponseDto getEntityForTable(String table) throws ApiException {
        ApiResponse<EntityResponseDto> resp = getEntityForTableWithHttpInfo(table);
        return resp.getData();
    }

    /**
     * Retrieves the entity associated to a table.
     * Locates that is associated to indicated table, or none if table is not associated to an entity. Requires permissions &#x27;entity.table&#x27; and &#x27;entity.filter&#x27;.
     * @param table Table identifier (required)
     * @return ApiResponse&lt;EntityResponseDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EntityResponseDto> getEntityForTableWithHttpInfo(String table) throws ApiException {
        com.squareup.okhttp.Call call = getEntityForTableValidateBeforeCall(table, null, null);
        Type localVarReturnType = new TypeToken<EntityResponseDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves the entity associated to a table. (asynchronously)
     * Locates that is associated to indicated table, or none if table is not associated to an entity. Requires permissions &#x27;entity.table&#x27; and &#x27;entity.filter&#x27;.
     * @param table Table identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEntityForTableAsync(String table, final ApiCallback<EntityResponseDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEntityForTableValidateBeforeCall(table, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EntityResponseDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for saveEntity
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call saveEntityCall(EntitySaveRequestDto body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/entities";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call saveEntityValidateBeforeCall(EntitySaveRequestDto body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling saveEntity(Async)");
        }
        
        com.squareup.okhttp.Call call = saveEntityCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Creates a new entity or updates existing one.
     * Creates a new entity or updates existing one using provided information. Functional validations are applied. Requires permissions &#x27;entity.save&#x27; and &#x27;entity.filter&#x27;.
     * @param body  (required)
     * @return EntityResponseDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EntityResponseDto saveEntity(EntitySaveRequestDto body) throws ApiException {
        ApiResponse<EntityResponseDto> resp = saveEntityWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Creates a new entity or updates existing one.
     * Creates a new entity or updates existing one using provided information. Functional validations are applied. Requires permissions &#x27;entity.save&#x27; and &#x27;entity.filter&#x27;.
     * @param body  (required)
     * @return ApiResponse&lt;EntityResponseDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EntityResponseDto> saveEntityWithHttpInfo(EntitySaveRequestDto body) throws ApiException {
        com.squareup.okhttp.Call call = saveEntityValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<EntityResponseDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates a new entity or updates existing one. (asynchronously)
     * Creates a new entity or updates existing one using provided information. Functional validations are applied. Requires permissions &#x27;entity.save&#x27; and &#x27;entity.filter&#x27;.
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call saveEntityAsync(EntitySaveRequestDto body, final ApiCallback<EntityResponseDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = saveEntityValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EntityResponseDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for setEntityAutomatic
     * @param entity Entity name (required)
     * @param automatic Automatic flag (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setEntityAutomaticCall(String entity, Boolean automatic, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/entities/{entity}/automatic/{automatic}"
            .replaceAll("\\{" + "entity" + "\\}", apiClient.escapeString(entity.toString()))
            .replaceAll("\\{" + "automatic" + "\\}", apiClient.escapeString(automatic.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setEntityAutomaticValidateBeforeCall(String entity, Boolean automatic, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'entity' is set
        if (entity == null) {
            throw new ApiException("Missing the required parameter 'entity' when calling setEntityAutomatic(Async)");
        }
        // verify the required parameter 'automatic' is set
        if (automatic == null) {
            throw new ApiException("Missing the required parameter 'automatic' when calling setEntityAutomatic(Async)");
        }
        
        com.squareup.okhttp.Call call = setEntityAutomaticCall(entity, automatic, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Set automatic/manual synchronization mode for an entity.
     * Locates a existing entity and sets automatic synchronization behaviour. An entity in automatic synchronization mode does automatic synchronization and does not allow any changes, so the entity becomes locked; if not automatic, synchronization needs to be manually called. Requires permissions &#x27;entity.automatic&#x27; and &#x27;entity.filter&#x27;.
     * @param entity Entity name (required)
     * @param automatic Automatic flag (required)
     * @return EntityResponseDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EntityResponseDto setEntityAutomatic(String entity, Boolean automatic) throws ApiException {
        ApiResponse<EntityResponseDto> resp = setEntityAutomaticWithHttpInfo(entity, automatic);
        return resp.getData();
    }

    /**
     * Set automatic/manual synchronization mode for an entity.
     * Locates a existing entity and sets automatic synchronization behaviour. An entity in automatic synchronization mode does automatic synchronization and does not allow any changes, so the entity becomes locked; if not automatic, synchronization needs to be manually called. Requires permissions &#x27;entity.automatic&#x27; and &#x27;entity.filter&#x27;.
     * @param entity Entity name (required)
     * @param automatic Automatic flag (required)
     * @return ApiResponse&lt;EntityResponseDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EntityResponseDto> setEntityAutomaticWithHttpInfo(String entity, Boolean automatic) throws ApiException {
        com.squareup.okhttp.Call call = setEntityAutomaticValidateBeforeCall(entity, automatic, null, null);
        Type localVarReturnType = new TypeToken<EntityResponseDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Set automatic/manual synchronization mode for an entity. (asynchronously)
     * Locates a existing entity and sets automatic synchronization behaviour. An entity in automatic synchronization mode does automatic synchronization and does not allow any changes, so the entity becomes locked; if not automatic, synchronization needs to be manually called. Requires permissions &#x27;entity.automatic&#x27; and &#x27;entity.filter&#x27;.
     * @param entity Entity name (required)
     * @param automatic Automatic flag (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setEntityAutomaticAsync(String entity, Boolean automatic, final ApiCallback<EntityResponseDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setEntityAutomaticValidateBeforeCall(entity, automatic, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EntityResponseDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for setEntityEnabled
     * @param entity Entity name (required)
     * @param enabled Enabled flag (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setEntityEnabledCall(String entity, Boolean enabled, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/entities/{entity}/enabled/{enabled}"
            .replaceAll("\\{" + "entity" + "\\}", apiClient.escapeString(entity.toString()))
            .replaceAll("\\{" + "enabled" + "\\}", apiClient.escapeString(enabled.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setEntityEnabledValidateBeforeCall(String entity, Boolean enabled, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'entity' is set
        if (entity == null) {
            throw new ApiException("Missing the required parameter 'entity' when calling setEntityEnabled(Async)");
        }
        // verify the required parameter 'enabled' is set
        if (enabled == null) {
            throw new ApiException("Missing the required parameter 'enabled' when calling setEntityEnabled(Async)");
        }
        
        com.squareup.okhttp.Call call = setEntityEnabledCall(entity, enabled, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Enable/disable an entity.
     * Locates a existing entity and sets/unsets enabled flag. A disabled entity does not allow any data operation, but allows changes to configuration. Requires permissions &#x27;entity.enable&#x27; and &#x27;entity.filter&#x27;.
     * @param entity Entity name (required)
     * @param enabled Enabled flag (required)
     * @return EntityResponseDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EntityResponseDto setEntityEnabled(String entity, Boolean enabled) throws ApiException {
        ApiResponse<EntityResponseDto> resp = setEntityEnabledWithHttpInfo(entity, enabled);
        return resp.getData();
    }

    /**
     * Enable/disable an entity.
     * Locates a existing entity and sets/unsets enabled flag. A disabled entity does not allow any data operation, but allows changes to configuration. Requires permissions &#x27;entity.enable&#x27; and &#x27;entity.filter&#x27;.
     * @param entity Entity name (required)
     * @param enabled Enabled flag (required)
     * @return ApiResponse&lt;EntityResponseDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EntityResponseDto> setEntityEnabledWithHttpInfo(String entity, Boolean enabled) throws ApiException {
        com.squareup.okhttp.Call call = setEntityEnabledValidateBeforeCall(entity, enabled, null, null);
        Type localVarReturnType = new TypeToken<EntityResponseDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Enable/disable an entity. (asynchronously)
     * Locates a existing entity and sets/unsets enabled flag. A disabled entity does not allow any data operation, but allows changes to configuration. Requires permissions &#x27;entity.enable&#x27; and &#x27;entity.filter&#x27;.
     * @param entity Entity name (required)
     * @param enabled Enabled flag (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setEntityEnabledAsync(String entity, Boolean enabled, final ApiCallback<EntityResponseDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setEntityEnabledValidateBeforeCall(entity, enabled, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EntityResponseDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for setEntityLocking
     * @param entity Entity name (required)
     * @param locked Locking flag (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setEntityLockingCall(String entity, Boolean locked, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/entities/{entity}/locked/{locked}"
            .replaceAll("\\{" + "entity" + "\\}", apiClient.escapeString(entity.toString()))
            .replaceAll("\\{" + "locked" + "\\}", apiClient.escapeString(locked.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setEntityLockingValidateBeforeCall(String entity, Boolean locked, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'entity' is set
        if (entity == null) {
            throw new ApiException("Missing the required parameter 'entity' when calling setEntityLocking(Async)");
        }
        // verify the required parameter 'locked' is set
        if (locked == null) {
            throw new ApiException("Missing the required parameter 'locked' when calling setEntityLocking(Async)");
        }
        
        com.squareup.okhttp.Call call = setEntityLockingCall(entity, locked, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Locks/unlocks an entity.
     * Locates a existing entity and locks/unlocks. A locked entity prevents any change to be made to the entity and underlying table and resources. Requires permissions &#x27;entity.lock&#x27; and &#x27;entity.filter&#x27;.
     * @param entity Entity name (required)
     * @param locked Locking flag (required)
     * @return EntityResponseDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EntityResponseDto setEntityLocking(String entity, Boolean locked) throws ApiException {
        ApiResponse<EntityResponseDto> resp = setEntityLockingWithHttpInfo(entity, locked);
        return resp.getData();
    }

    /**
     * Locks/unlocks an entity.
     * Locates a existing entity and locks/unlocks. A locked entity prevents any change to be made to the entity and underlying table and resources. Requires permissions &#x27;entity.lock&#x27; and &#x27;entity.filter&#x27;.
     * @param entity Entity name (required)
     * @param locked Locking flag (required)
     * @return ApiResponse&lt;EntityResponseDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EntityResponseDto> setEntityLockingWithHttpInfo(String entity, Boolean locked) throws ApiException {
        com.squareup.okhttp.Call call = setEntityLockingValidateBeforeCall(entity, locked, null, null);
        Type localVarReturnType = new TypeToken<EntityResponseDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Locks/unlocks an entity. (asynchronously)
     * Locates a existing entity and locks/unlocks. A locked entity prevents any change to be made to the entity and underlying table and resources. Requires permissions &#x27;entity.lock&#x27; and &#x27;entity.filter&#x27;.
     * @param entity Entity name (required)
     * @param locked Locking flag (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setEntityLockingAsync(String entity, Boolean locked, final ApiCallback<EntityResponseDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setEntityLockingValidateBeforeCall(entity, locked, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EntityResponseDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for synchronizeEntity
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call synchronizeEntityCall(EntitySynchronizationRequestDto body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/entities/synchronize";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call synchronizeEntityValidateBeforeCall(EntitySynchronizationRequestDto body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling synchronizeEntity(Async)");
        }
        
        com.squareup.okhttp.Call call = synchronizeEntityCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Manual entity synchronization.
     * Locates a existing entity and executes a manual synchronization using provided parameters. The entity must be enabled, unlocked and set to manual mode. Requires permissions &#x27;entity.synchronize&#x27; and &#x27;entity.filter&#x27;.
     * @param body  (required)
     * @return EntitySynchronizationResponseDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EntitySynchronizationResponseDto synchronizeEntity(EntitySynchronizationRequestDto body) throws ApiException {
        ApiResponse<EntitySynchronizationResponseDto> resp = synchronizeEntityWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Manual entity synchronization.
     * Locates a existing entity and executes a manual synchronization using provided parameters. The entity must be enabled, unlocked and set to manual mode. Requires permissions &#x27;entity.synchronize&#x27; and &#x27;entity.filter&#x27;.
     * @param body  (required)
     * @return ApiResponse&lt;EntitySynchronizationResponseDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EntitySynchronizationResponseDto> synchronizeEntityWithHttpInfo(EntitySynchronizationRequestDto body) throws ApiException {
        com.squareup.okhttp.Call call = synchronizeEntityValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<EntitySynchronizationResponseDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Manual entity synchronization. (asynchronously)
     * Locates a existing entity and executes a manual synchronization using provided parameters. The entity must be enabled, unlocked and set to manual mode. Requires permissions &#x27;entity.synchronize&#x27; and &#x27;entity.filter&#x27;.
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call synchronizeEntityAsync(EntitySynchronizationRequestDto body, final ApiCallback<EntitySynchronizationResponseDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = synchronizeEntityValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EntitySynchronizationResponseDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
